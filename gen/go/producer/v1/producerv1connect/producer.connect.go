// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: producer/v1/producer.proto

package producerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/agentero/producerflowapi/gen/go/producer/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProducerServiceName is the fully-qualified name of the ProducerService service.
	ProducerServiceName = "producerflow.producer.v1.ProducerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProducerServiceCreateAgencyOnboardingURLProcedure is the fully-qualified name of the
	// ProducerService's CreateAgencyOnboardingURL RPC.
	ProducerServiceCreateAgencyOnboardingURLProcedure = "/producerflow.producer.v1.ProducerService/CreateAgencyOnboardingURL"
	// ProducerServiceNewAgencyProcedure is the fully-qualified name of the ProducerService's NewAgency
	// RPC.
	ProducerServiceNewAgencyProcedure = "/producerflow.producer.v1.ProducerService/NewAgency"
	// ProducerServiceNewProducerProcedure is the fully-qualified name of the ProducerService's
	// NewProducer RPC.
	ProducerServiceNewProducerProcedure = "/producerflow.producer.v1.ProducerService/NewProducer"
	// ProducerServiceNewProducersProcedure is the fully-qualified name of the ProducerService's
	// NewProducers RPC.
	ProducerServiceNewProducersProcedure = "/producerflow.producer.v1.ProducerService/NewProducers"
	// ProducerServiceGetAgencyAndProducersProcedure is the fully-qualified name of the
	// ProducerService's GetAgencyAndProducers RPC.
	ProducerServiceGetAgencyAndProducersProcedure = "/producerflow.producer.v1.ProducerService/GetAgencyAndProducers"
	// ProducerServiceGetProducerProcedure is the fully-qualified name of the ProducerService's
	// GetProducer RPC.
	ProducerServiceGetProducerProcedure = "/producerflow.producer.v1.ProducerService/GetProducer"
	// ProducerServiceGetAgencyFilesProcedure is the fully-qualified name of the ProducerService's
	// GetAgencyFiles RPC.
	ProducerServiceGetAgencyFilesProcedure = "/producerflow.producer.v1.ProducerService/GetAgencyFiles"
	// ProducerServiceUpdateProducerProcedure is the fully-qualified name of the ProducerService's
	// UpdateProducer RPC.
	ProducerServiceUpdateProducerProcedure = "/producerflow.producer.v1.ProducerService/UpdateProducer"
	// ProducerServiceApproveProducerProcedure is the fully-qualified name of the ProducerService's
	// ApproveProducer RPC.
	ProducerServiceApproveProducerProcedure = "/producerflow.producer.v1.ProducerService/ApproveProducer"
	// ProducerServiceRejectProducerProcedure is the fully-qualified name of the ProducerService's
	// RejectProducer RPC.
	ProducerServiceRejectProducerProcedure = "/producerflow.producer.v1.ProducerService/RejectProducer"
	// ProducerServiceNewContactProcedure is the fully-qualified name of the ProducerService's
	// NewContact RPC.
	ProducerServiceNewContactProcedure = "/producerflow.producer.v1.ProducerService/NewContact"
	// ProducerServiceNewContactsProcedure is the fully-qualified name of the ProducerService's
	// NewContacts RPC.
	ProducerServiceNewContactsProcedure = "/producerflow.producer.v1.ProducerService/NewContacts"
	// ProducerServiceSetExternalIDProcedure is the fully-qualified name of the ProducerService's
	// SetExternalID RPC.
	ProducerServiceSetExternalIDProcedure = "/producerflow.producer.v1.ProducerService/SetExternalID"
	// ProducerServiceValidateProducerNPNProcedure is the fully-qualified name of the ProducerService's
	// ValidateProducerNPN RPC.
	ProducerServiceValidateProducerNPNProcedure = "/producerflow.producer.v1.ProducerService/ValidateProducerNPN"
	// ProducerServiceValidateAgencyNPNProcedure is the fully-qualified name of the ProducerService's
	// ValidateAgencyNPN RPC.
	ProducerServiceValidateAgencyNPNProcedure = "/producerflow.producer.v1.ProducerService/ValidateAgencyNPN"
	// ProducerServiceLookupNPNByFEINProcedure is the fully-qualified name of the ProducerService's
	// LookupNPNByFEIN RPC.
	ProducerServiceLookupNPNByFEINProcedure = "/producerflow.producer.v1.ProducerService/LookupNPNByFEIN"
	// ProducerServiceResyncProducerProcedure is the fully-qualified name of the ProducerService's
	// ResyncProducer RPC.
	ProducerServiceResyncProducerProcedure = "/producerflow.producer.v1.ProducerService/ResyncProducer"
	// ProducerServiceResyncAgencyProcedure is the fully-qualified name of the ProducerService's
	// ResyncAgency RPC.
	ProducerServiceResyncAgencyProcedure = "/producerflow.producer.v1.ProducerService/ResyncAgency"
	// ProducerServiceSyncProducerWithNIPRProcedure is the fully-qualified name of the ProducerService's
	// SyncProducerWithNIPR RPC.
	ProducerServiceSyncProducerWithNIPRProcedure = "/producerflow.producer.v1.ProducerService/SyncProducerWithNIPR"
	// ProducerServiceSyncAgencyWithNIPRProcedure is the fully-qualified name of the ProducerService's
	// SyncAgencyWithNIPR RPC.
	ProducerServiceSyncAgencyWithNIPRProcedure = "/producerflow.producer.v1.ProducerService/SyncAgencyWithNIPR"
	// ProducerServiceStopSyncProducerWithNIPRProcedure is the fully-qualified name of the
	// ProducerService's StopSyncProducerWithNIPR RPC.
	ProducerServiceStopSyncProducerWithNIPRProcedure = "/producerflow.producer.v1.ProducerService/StopSyncProducerWithNIPR"
	// ProducerServiceStopSyncAgencyWithNIPRProcedure is the fully-qualified name of the
	// ProducerService's StopSyncAgencyWithNIPR RPC.
	ProducerServiceStopSyncAgencyWithNIPRProcedure = "/producerflow.producer.v1.ProducerService/StopSyncAgencyWithNIPR"
)

// ProducerServiceClient is a client for the producerflow.producer.v1.ProducerService service.
type ProducerServiceClient interface {
	// CreateAgencyOnboardingURL generates a URL that can be used to onboard a new agency.
	// The URL contains encoded information about the agency defaults and tenant context.
	// Returns a URL string that can be shared with the agency for self-onboarding.
	CreateAgencyOnboardingURL(context.Context, *connect.Request[v1.CreateAgencyOnboardingURLRequest]) (*connect.Response[v1.CreateAgencyOnboardingURLResponse], error)
	// NewAgency creates a new agency, optionally with associated producers.
	// It performs the following validation checks:
	// - Ensures all required fields are present and valid
	// - Checks whether the NPN is already registered
	// - Verifies agency and principal information with NIPR
	//
	// Business rules:
	// - Sole proprietors can't have an agency NPN or additional producers
	// - Regular agencies must provide either an NPN or a FEIN
	//
	// If validation passes, it creates the agency, principal, and any producers.
	// Returns the IDs of the created agency, principal, and producers.
	NewAgency(context.Context, *connect.Request[v1.NewAgencyRequest]) (*connect.Response[v1.NewAgencyResponse], error)
	// NewProducer creates a new producer and associates them with an existing agency.
	// It validates the producer's information and checks that the email is unique.
	// Returns the ID of the created producer.
	NewProducer(context.Context, *connect.Request[v1.NewProducerRequest]) (*connect.Response[v1.NewProducerResponse], error)
	// NewProducers creates multiple producers and associates them with the specified agency.
	// It performs the same validations as NewProducer for each entry.
	// Returns the IDs of all created producers.
	NewProducers(context.Context, *connect.Request[v1.NewProducersRequest]) (*connect.Response[v1.NewProducersResponse], error)
	// GetAgencyAndProducers retrieves details for an agency and all associated producers.
	// Returns the agency information and a list of producers.
	GetAgencyAndProducers(context.Context, *connect.Request[v1.GetAgencyAndProducersRequest]) (*connect.Response[v1.GetAgencyAndProducersResponse], error)
	// GetProducer retrieves detailed information about a specific producer.
	// The producer can be found by ID, NPN, or email.
	// Returns the producer's information, including NIPR data and agency association.
	GetProducer(context.Context, *connect.Request[v1.GetProducerRequest]) (*connect.Response[v1.GetProducerResponse], error)
	// GetAgencyFiles returns URLs for accessing files associated with an agency, such as contracts.
	GetAgencyFiles(context.Context, *connect.Request[v1.GetAgencyFilesRequest]) (*connect.Response[v1.GetAgencyFilesResponse], error)
	// UpdateProducer updates information for an existing producer.
	// Supports updating contact details, background check responses,
	// employment history, and non-uniform licensing questions.
	// Information from NIPR and other third-party sources cannot be updated.
	// Validates email uniqueness if the email is changed.
	UpdateProducer(context.Context, *connect.Request[v1.UpdateProducerRequest]) (*connect.Response[v1.UpdateProducerResponse], error)
	// ApproveProducer changes a producer's onboarding state to APPROVED.
	// This typically happens after all verification steps are complete.
	// This method is deprecated. Use SyncProducerWithNIPR instead.
	//
	// Deprecated: do not use.
	ApproveProducer(context.Context, *connect.Request[v1.ApproveProducerRequest]) (*connect.Response[v1.ApproveProducerResponse], error)
	// RejectProducer changes a producer's onboarding state to REJECTED.
	// An optional reason for rejection can be provided.
	// This method is deprecated. Use StopSyncAgencyWithNIPR instead.
	//
	// Deprecated: do not use.
	RejectProducer(context.Context, *connect.Request[v1.RejectProducerRequest]) (*connect.Response[v1.RejectProducerResponse], error)
	// NewContact creates a new contact associated with an agency.
	// Contacts represent non-producer individuals linked to the agency.
	// Returns the ID of the created contact.
	NewContact(context.Context, *connect.Request[v1.NewContactRequest]) (*connect.Response[v1.NewContactResponse], error)
	// NewContacts creates multiple contacts in a single request.
	// Each contact is associated with the specified agency.
	// Returns the IDs of all created contacts.
	NewContacts(context.Context, *connect.Request[v1.NewContactsRequest]) (*connect.Response[v1.NewContactsResponse], error)
	// SetExternalID sets an external identifier for a producer or contact.
	// Useful for integrating with external systems that use different ID schemes.
	SetExternalID(context.Context, *connect.Request[v1.SetExternalIDRequest]) (*connect.Response[v1.SetExternalIDResponse], error)
	// ValidateProducerNPN checks whether a producer’s National Producer Number (NPN) is valid.
	// It performs a lookup against NIPR and applies internal validation rules.
	// Returns a validity flag and any associated error messages.
	ValidateProducerNPN(context.Context, *connect.Request[v1.ValidateProducerNPNRequest]) (*connect.Response[v1.ValidateProducerNPNResponse], error)
	// ValidateAgencyNPN checks whether an agency’s National Producer Number (NPN) is valid.
	// It performs a lookup against NIPR and applies internal validation rules.
	// Returns a validity flag and any associated error messages.
	ValidateAgencyNPN(context.Context, *connect.Request[v1.ValidateAgencyNPNRequest]) (*connect.Response[v1.ValidateAgencyNPNResponse], error)
	// LookupNPNByFEIN finds an NPN using a Federal Employer Identification Number.
	// Used to help agencies that know their FEIN but not their NPN.
	// Returns the NPN if found or an error message.
	LookupNPNByFEIN(context.Context, *connect.Request[v1.LookupNPNByFEINRequest]) (*connect.Response[v1.LookupNPNByFEINResponse], error)
	// ResyncProducer triggers a manual resynchronization of a producer’s data.
	// This can be used to refresh data after external changes.
	//
	// WARNING: This call counts as an additional NPN lookup for billing purposes.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in extra charges.
	ResyncProducer(context.Context, *connect.Request[v1.ResyncProducerRequest]) (*connect.Response[v1.ResyncProducerResponse], error)
	// ResyncAgency triggers a manual resynchronization of an agency’s data.
	// Similar to ResyncProducer, this can be used to refresh data after external changes.
	//
	// WARNING: This call counts as an additional NPN lookup for billing purposes.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in extra charges.
	ResyncAgency(context.Context, *connect.Request[v1.ResyncAgencyRequest]) (*connect.Response[v1.ResyncAgencyResponse], error)
	// SyncAgencyWithNIPR synchronizes an producer’s data with the NIPR system.
	// Fetches the latest producer information and appointments.
	//
	// WARNING: This call counts as an extra NPN lookup against your billing.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in additional charges.
	SyncProducerWithNIPR(context.Context, *connect.Request[v1.SyncProducerWithNIPRRequest]) (*connect.Response[v1.SyncProducerWithNIPRResponse], error)
	// SyncAgencyWithNIPR synchronizes an agency’s data with the NIPR system.
	// Fetches the latest agency information and appointments.
	//
	// WARNING: This call counts as an extra NPN lookup against your billing.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in additional charges.
	SyncAgencyWithNIPR(context.Context, *connect.Request[v1.SyncAgencyWithNIPRRequest]) (*connect.Response[v1.SyncAgencyWithNIPRResponse], error)
	// StopSyncProducerWithNIPR stops the synchronization process with NIPR for a producer.
	// Use this to prevent further automatic updates from NIPR.
	StopSyncProducerWithNIPR(context.Context, *connect.Request[v1.StopSyncProducerWithNIPRRequest]) (*connect.Response[v1.StopSyncProducerWithNIPRResponse], error)
	// StopSyncAgencyWithNIPR stops the synchronization process with NIPR for an agency.
	// Use this to prevent further automatic updates from NIPR.
	StopSyncAgencyWithNIPR(context.Context, *connect.Request[v1.StopSyncAgencyWithNIPRRequest]) (*connect.Response[v1.StopSyncAgencyWithNIPRResponse], error)
}

// NewProducerServiceClient constructs a client for the producerflow.producer.v1.ProducerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProducerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProducerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	producerServiceMethods := v1.File_producer_v1_producer_proto.Services().ByName("ProducerService").Methods()
	return &producerServiceClient{
		createAgencyOnboardingURL: connect.NewClient[v1.CreateAgencyOnboardingURLRequest, v1.CreateAgencyOnboardingURLResponse](
			httpClient,
			baseURL+ProducerServiceCreateAgencyOnboardingURLProcedure,
			connect.WithSchema(producerServiceMethods.ByName("CreateAgencyOnboardingURL")),
			connect.WithClientOptions(opts...),
		),
		newAgency: connect.NewClient[v1.NewAgencyRequest, v1.NewAgencyResponse](
			httpClient,
			baseURL+ProducerServiceNewAgencyProcedure,
			connect.WithSchema(producerServiceMethods.ByName("NewAgency")),
			connect.WithClientOptions(opts...),
		),
		newProducer: connect.NewClient[v1.NewProducerRequest, v1.NewProducerResponse](
			httpClient,
			baseURL+ProducerServiceNewProducerProcedure,
			connect.WithSchema(producerServiceMethods.ByName("NewProducer")),
			connect.WithClientOptions(opts...),
		),
		newProducers: connect.NewClient[v1.NewProducersRequest, v1.NewProducersResponse](
			httpClient,
			baseURL+ProducerServiceNewProducersProcedure,
			connect.WithSchema(producerServiceMethods.ByName("NewProducers")),
			connect.WithClientOptions(opts...),
		),
		getAgencyAndProducers: connect.NewClient[v1.GetAgencyAndProducersRequest, v1.GetAgencyAndProducersResponse](
			httpClient,
			baseURL+ProducerServiceGetAgencyAndProducersProcedure,
			connect.WithSchema(producerServiceMethods.ByName("GetAgencyAndProducers")),
			connect.WithClientOptions(opts...),
		),
		getProducer: connect.NewClient[v1.GetProducerRequest, v1.GetProducerResponse](
			httpClient,
			baseURL+ProducerServiceGetProducerProcedure,
			connect.WithSchema(producerServiceMethods.ByName("GetProducer")),
			connect.WithClientOptions(opts...),
		),
		getAgencyFiles: connect.NewClient[v1.GetAgencyFilesRequest, v1.GetAgencyFilesResponse](
			httpClient,
			baseURL+ProducerServiceGetAgencyFilesProcedure,
			connect.WithSchema(producerServiceMethods.ByName("GetAgencyFiles")),
			connect.WithClientOptions(opts...),
		),
		updateProducer: connect.NewClient[v1.UpdateProducerRequest, v1.UpdateProducerResponse](
			httpClient,
			baseURL+ProducerServiceUpdateProducerProcedure,
			connect.WithSchema(producerServiceMethods.ByName("UpdateProducer")),
			connect.WithClientOptions(opts...),
		),
		approveProducer: connect.NewClient[v1.ApproveProducerRequest, v1.ApproveProducerResponse](
			httpClient,
			baseURL+ProducerServiceApproveProducerProcedure,
			connect.WithSchema(producerServiceMethods.ByName("ApproveProducer")),
			connect.WithClientOptions(opts...),
		),
		rejectProducer: connect.NewClient[v1.RejectProducerRequest, v1.RejectProducerResponse](
			httpClient,
			baseURL+ProducerServiceRejectProducerProcedure,
			connect.WithSchema(producerServiceMethods.ByName("RejectProducer")),
			connect.WithClientOptions(opts...),
		),
		newContact: connect.NewClient[v1.NewContactRequest, v1.NewContactResponse](
			httpClient,
			baseURL+ProducerServiceNewContactProcedure,
			connect.WithSchema(producerServiceMethods.ByName("NewContact")),
			connect.WithClientOptions(opts...),
		),
		newContacts: connect.NewClient[v1.NewContactsRequest, v1.NewContactsResponse](
			httpClient,
			baseURL+ProducerServiceNewContactsProcedure,
			connect.WithSchema(producerServiceMethods.ByName("NewContacts")),
			connect.WithClientOptions(opts...),
		),
		setExternalID: connect.NewClient[v1.SetExternalIDRequest, v1.SetExternalIDResponse](
			httpClient,
			baseURL+ProducerServiceSetExternalIDProcedure,
			connect.WithSchema(producerServiceMethods.ByName("SetExternalID")),
			connect.WithClientOptions(opts...),
		),
		validateProducerNPN: connect.NewClient[v1.ValidateProducerNPNRequest, v1.ValidateProducerNPNResponse](
			httpClient,
			baseURL+ProducerServiceValidateProducerNPNProcedure,
			connect.WithSchema(producerServiceMethods.ByName("ValidateProducerNPN")),
			connect.WithClientOptions(opts...),
		),
		validateAgencyNPN: connect.NewClient[v1.ValidateAgencyNPNRequest, v1.ValidateAgencyNPNResponse](
			httpClient,
			baseURL+ProducerServiceValidateAgencyNPNProcedure,
			connect.WithSchema(producerServiceMethods.ByName("ValidateAgencyNPN")),
			connect.WithClientOptions(opts...),
		),
		lookupNPNByFEIN: connect.NewClient[v1.LookupNPNByFEINRequest, v1.LookupNPNByFEINResponse](
			httpClient,
			baseURL+ProducerServiceLookupNPNByFEINProcedure,
			connect.WithSchema(producerServiceMethods.ByName("LookupNPNByFEIN")),
			connect.WithClientOptions(opts...),
		),
		resyncProducer: connect.NewClient[v1.ResyncProducerRequest, v1.ResyncProducerResponse](
			httpClient,
			baseURL+ProducerServiceResyncProducerProcedure,
			connect.WithSchema(producerServiceMethods.ByName("ResyncProducer")),
			connect.WithClientOptions(opts...),
		),
		resyncAgency: connect.NewClient[v1.ResyncAgencyRequest, v1.ResyncAgencyResponse](
			httpClient,
			baseURL+ProducerServiceResyncAgencyProcedure,
			connect.WithSchema(producerServiceMethods.ByName("ResyncAgency")),
			connect.WithClientOptions(opts...),
		),
		syncProducerWithNIPR: connect.NewClient[v1.SyncProducerWithNIPRRequest, v1.SyncProducerWithNIPRResponse](
			httpClient,
			baseURL+ProducerServiceSyncProducerWithNIPRProcedure,
			connect.WithSchema(producerServiceMethods.ByName("SyncProducerWithNIPR")),
			connect.WithClientOptions(opts...),
		),
		syncAgencyWithNIPR: connect.NewClient[v1.SyncAgencyWithNIPRRequest, v1.SyncAgencyWithNIPRResponse](
			httpClient,
			baseURL+ProducerServiceSyncAgencyWithNIPRProcedure,
			connect.WithSchema(producerServiceMethods.ByName("SyncAgencyWithNIPR")),
			connect.WithClientOptions(opts...),
		),
		stopSyncProducerWithNIPR: connect.NewClient[v1.StopSyncProducerWithNIPRRequest, v1.StopSyncProducerWithNIPRResponse](
			httpClient,
			baseURL+ProducerServiceStopSyncProducerWithNIPRProcedure,
			connect.WithSchema(producerServiceMethods.ByName("StopSyncProducerWithNIPR")),
			connect.WithClientOptions(opts...),
		),
		stopSyncAgencyWithNIPR: connect.NewClient[v1.StopSyncAgencyWithNIPRRequest, v1.StopSyncAgencyWithNIPRResponse](
			httpClient,
			baseURL+ProducerServiceStopSyncAgencyWithNIPRProcedure,
			connect.WithSchema(producerServiceMethods.ByName("StopSyncAgencyWithNIPR")),
			connect.WithClientOptions(opts...),
		),
	}
}

// producerServiceClient implements ProducerServiceClient.
type producerServiceClient struct {
	createAgencyOnboardingURL *connect.Client[v1.CreateAgencyOnboardingURLRequest, v1.CreateAgencyOnboardingURLResponse]
	newAgency                 *connect.Client[v1.NewAgencyRequest, v1.NewAgencyResponse]
	newProducer               *connect.Client[v1.NewProducerRequest, v1.NewProducerResponse]
	newProducers              *connect.Client[v1.NewProducersRequest, v1.NewProducersResponse]
	getAgencyAndProducers     *connect.Client[v1.GetAgencyAndProducersRequest, v1.GetAgencyAndProducersResponse]
	getProducer               *connect.Client[v1.GetProducerRequest, v1.GetProducerResponse]
	getAgencyFiles            *connect.Client[v1.GetAgencyFilesRequest, v1.GetAgencyFilesResponse]
	updateProducer            *connect.Client[v1.UpdateProducerRequest, v1.UpdateProducerResponse]
	approveProducer           *connect.Client[v1.ApproveProducerRequest, v1.ApproveProducerResponse]
	rejectProducer            *connect.Client[v1.RejectProducerRequest, v1.RejectProducerResponse]
	newContact                *connect.Client[v1.NewContactRequest, v1.NewContactResponse]
	newContacts               *connect.Client[v1.NewContactsRequest, v1.NewContactsResponse]
	setExternalID             *connect.Client[v1.SetExternalIDRequest, v1.SetExternalIDResponse]
	validateProducerNPN       *connect.Client[v1.ValidateProducerNPNRequest, v1.ValidateProducerNPNResponse]
	validateAgencyNPN         *connect.Client[v1.ValidateAgencyNPNRequest, v1.ValidateAgencyNPNResponse]
	lookupNPNByFEIN           *connect.Client[v1.LookupNPNByFEINRequest, v1.LookupNPNByFEINResponse]
	resyncProducer            *connect.Client[v1.ResyncProducerRequest, v1.ResyncProducerResponse]
	resyncAgency              *connect.Client[v1.ResyncAgencyRequest, v1.ResyncAgencyResponse]
	syncProducerWithNIPR      *connect.Client[v1.SyncProducerWithNIPRRequest, v1.SyncProducerWithNIPRResponse]
	syncAgencyWithNIPR        *connect.Client[v1.SyncAgencyWithNIPRRequest, v1.SyncAgencyWithNIPRResponse]
	stopSyncProducerWithNIPR  *connect.Client[v1.StopSyncProducerWithNIPRRequest, v1.StopSyncProducerWithNIPRResponse]
	stopSyncAgencyWithNIPR    *connect.Client[v1.StopSyncAgencyWithNIPRRequest, v1.StopSyncAgencyWithNIPRResponse]
}

// CreateAgencyOnboardingURL calls
// producerflow.producer.v1.ProducerService.CreateAgencyOnboardingURL.
func (c *producerServiceClient) CreateAgencyOnboardingURL(ctx context.Context, req *connect.Request[v1.CreateAgencyOnboardingURLRequest]) (*connect.Response[v1.CreateAgencyOnboardingURLResponse], error) {
	return c.createAgencyOnboardingURL.CallUnary(ctx, req)
}

// NewAgency calls producerflow.producer.v1.ProducerService.NewAgency.
func (c *producerServiceClient) NewAgency(ctx context.Context, req *connect.Request[v1.NewAgencyRequest]) (*connect.Response[v1.NewAgencyResponse], error) {
	return c.newAgency.CallUnary(ctx, req)
}

// NewProducer calls producerflow.producer.v1.ProducerService.NewProducer.
func (c *producerServiceClient) NewProducer(ctx context.Context, req *connect.Request[v1.NewProducerRequest]) (*connect.Response[v1.NewProducerResponse], error) {
	return c.newProducer.CallUnary(ctx, req)
}

// NewProducers calls producerflow.producer.v1.ProducerService.NewProducers.
func (c *producerServiceClient) NewProducers(ctx context.Context, req *connect.Request[v1.NewProducersRequest]) (*connect.Response[v1.NewProducersResponse], error) {
	return c.newProducers.CallUnary(ctx, req)
}

// GetAgencyAndProducers calls producerflow.producer.v1.ProducerService.GetAgencyAndProducers.
func (c *producerServiceClient) GetAgencyAndProducers(ctx context.Context, req *connect.Request[v1.GetAgencyAndProducersRequest]) (*connect.Response[v1.GetAgencyAndProducersResponse], error) {
	return c.getAgencyAndProducers.CallUnary(ctx, req)
}

// GetProducer calls producerflow.producer.v1.ProducerService.GetProducer.
func (c *producerServiceClient) GetProducer(ctx context.Context, req *connect.Request[v1.GetProducerRequest]) (*connect.Response[v1.GetProducerResponse], error) {
	return c.getProducer.CallUnary(ctx, req)
}

// GetAgencyFiles calls producerflow.producer.v1.ProducerService.GetAgencyFiles.
func (c *producerServiceClient) GetAgencyFiles(ctx context.Context, req *connect.Request[v1.GetAgencyFilesRequest]) (*connect.Response[v1.GetAgencyFilesResponse], error) {
	return c.getAgencyFiles.CallUnary(ctx, req)
}

// UpdateProducer calls producerflow.producer.v1.ProducerService.UpdateProducer.
func (c *producerServiceClient) UpdateProducer(ctx context.Context, req *connect.Request[v1.UpdateProducerRequest]) (*connect.Response[v1.UpdateProducerResponse], error) {
	return c.updateProducer.CallUnary(ctx, req)
}

// ApproveProducer calls producerflow.producer.v1.ProducerService.ApproveProducer.
//
// Deprecated: do not use.
func (c *producerServiceClient) ApproveProducer(ctx context.Context, req *connect.Request[v1.ApproveProducerRequest]) (*connect.Response[v1.ApproveProducerResponse], error) {
	return c.approveProducer.CallUnary(ctx, req)
}

// RejectProducer calls producerflow.producer.v1.ProducerService.RejectProducer.
//
// Deprecated: do not use.
func (c *producerServiceClient) RejectProducer(ctx context.Context, req *connect.Request[v1.RejectProducerRequest]) (*connect.Response[v1.RejectProducerResponse], error) {
	return c.rejectProducer.CallUnary(ctx, req)
}

// NewContact calls producerflow.producer.v1.ProducerService.NewContact.
func (c *producerServiceClient) NewContact(ctx context.Context, req *connect.Request[v1.NewContactRequest]) (*connect.Response[v1.NewContactResponse], error) {
	return c.newContact.CallUnary(ctx, req)
}

// NewContacts calls producerflow.producer.v1.ProducerService.NewContacts.
func (c *producerServiceClient) NewContacts(ctx context.Context, req *connect.Request[v1.NewContactsRequest]) (*connect.Response[v1.NewContactsResponse], error) {
	return c.newContacts.CallUnary(ctx, req)
}

// SetExternalID calls producerflow.producer.v1.ProducerService.SetExternalID.
func (c *producerServiceClient) SetExternalID(ctx context.Context, req *connect.Request[v1.SetExternalIDRequest]) (*connect.Response[v1.SetExternalIDResponse], error) {
	return c.setExternalID.CallUnary(ctx, req)
}

// ValidateProducerNPN calls producerflow.producer.v1.ProducerService.ValidateProducerNPN.
func (c *producerServiceClient) ValidateProducerNPN(ctx context.Context, req *connect.Request[v1.ValidateProducerNPNRequest]) (*connect.Response[v1.ValidateProducerNPNResponse], error) {
	return c.validateProducerNPN.CallUnary(ctx, req)
}

// ValidateAgencyNPN calls producerflow.producer.v1.ProducerService.ValidateAgencyNPN.
func (c *producerServiceClient) ValidateAgencyNPN(ctx context.Context, req *connect.Request[v1.ValidateAgencyNPNRequest]) (*connect.Response[v1.ValidateAgencyNPNResponse], error) {
	return c.validateAgencyNPN.CallUnary(ctx, req)
}

// LookupNPNByFEIN calls producerflow.producer.v1.ProducerService.LookupNPNByFEIN.
func (c *producerServiceClient) LookupNPNByFEIN(ctx context.Context, req *connect.Request[v1.LookupNPNByFEINRequest]) (*connect.Response[v1.LookupNPNByFEINResponse], error) {
	return c.lookupNPNByFEIN.CallUnary(ctx, req)
}

// ResyncProducer calls producerflow.producer.v1.ProducerService.ResyncProducer.
func (c *producerServiceClient) ResyncProducer(ctx context.Context, req *connect.Request[v1.ResyncProducerRequest]) (*connect.Response[v1.ResyncProducerResponse], error) {
	return c.resyncProducer.CallUnary(ctx, req)
}

// ResyncAgency calls producerflow.producer.v1.ProducerService.ResyncAgency.
func (c *producerServiceClient) ResyncAgency(ctx context.Context, req *connect.Request[v1.ResyncAgencyRequest]) (*connect.Response[v1.ResyncAgencyResponse], error) {
	return c.resyncAgency.CallUnary(ctx, req)
}

// SyncProducerWithNIPR calls producerflow.producer.v1.ProducerService.SyncProducerWithNIPR.
func (c *producerServiceClient) SyncProducerWithNIPR(ctx context.Context, req *connect.Request[v1.SyncProducerWithNIPRRequest]) (*connect.Response[v1.SyncProducerWithNIPRResponse], error) {
	return c.syncProducerWithNIPR.CallUnary(ctx, req)
}

// SyncAgencyWithNIPR calls producerflow.producer.v1.ProducerService.SyncAgencyWithNIPR.
func (c *producerServiceClient) SyncAgencyWithNIPR(ctx context.Context, req *connect.Request[v1.SyncAgencyWithNIPRRequest]) (*connect.Response[v1.SyncAgencyWithNIPRResponse], error) {
	return c.syncAgencyWithNIPR.CallUnary(ctx, req)
}

// StopSyncProducerWithNIPR calls producerflow.producer.v1.ProducerService.StopSyncProducerWithNIPR.
func (c *producerServiceClient) StopSyncProducerWithNIPR(ctx context.Context, req *connect.Request[v1.StopSyncProducerWithNIPRRequest]) (*connect.Response[v1.StopSyncProducerWithNIPRResponse], error) {
	return c.stopSyncProducerWithNIPR.CallUnary(ctx, req)
}

// StopSyncAgencyWithNIPR calls producerflow.producer.v1.ProducerService.StopSyncAgencyWithNIPR.
func (c *producerServiceClient) StopSyncAgencyWithNIPR(ctx context.Context, req *connect.Request[v1.StopSyncAgencyWithNIPRRequest]) (*connect.Response[v1.StopSyncAgencyWithNIPRResponse], error) {
	return c.stopSyncAgencyWithNIPR.CallUnary(ctx, req)
}

// ProducerServiceHandler is an implementation of the producerflow.producer.v1.ProducerService
// service.
type ProducerServiceHandler interface {
	// CreateAgencyOnboardingURL generates a URL that can be used to onboard a new agency.
	// The URL contains encoded information about the agency defaults and tenant context.
	// Returns a URL string that can be shared with the agency for self-onboarding.
	CreateAgencyOnboardingURL(context.Context, *connect.Request[v1.CreateAgencyOnboardingURLRequest]) (*connect.Response[v1.CreateAgencyOnboardingURLResponse], error)
	// NewAgency creates a new agency, optionally with associated producers.
	// It performs the following validation checks:
	// - Ensures all required fields are present and valid
	// - Checks whether the NPN is already registered
	// - Verifies agency and principal information with NIPR
	//
	// Business rules:
	// - Sole proprietors can't have an agency NPN or additional producers
	// - Regular agencies must provide either an NPN or a FEIN
	//
	// If validation passes, it creates the agency, principal, and any producers.
	// Returns the IDs of the created agency, principal, and producers.
	NewAgency(context.Context, *connect.Request[v1.NewAgencyRequest]) (*connect.Response[v1.NewAgencyResponse], error)
	// NewProducer creates a new producer and associates them with an existing agency.
	// It validates the producer's information and checks that the email is unique.
	// Returns the ID of the created producer.
	NewProducer(context.Context, *connect.Request[v1.NewProducerRequest]) (*connect.Response[v1.NewProducerResponse], error)
	// NewProducers creates multiple producers and associates them with the specified agency.
	// It performs the same validations as NewProducer for each entry.
	// Returns the IDs of all created producers.
	NewProducers(context.Context, *connect.Request[v1.NewProducersRequest]) (*connect.Response[v1.NewProducersResponse], error)
	// GetAgencyAndProducers retrieves details for an agency and all associated producers.
	// Returns the agency information and a list of producers.
	GetAgencyAndProducers(context.Context, *connect.Request[v1.GetAgencyAndProducersRequest]) (*connect.Response[v1.GetAgencyAndProducersResponse], error)
	// GetProducer retrieves detailed information about a specific producer.
	// The producer can be found by ID, NPN, or email.
	// Returns the producer's information, including NIPR data and agency association.
	GetProducer(context.Context, *connect.Request[v1.GetProducerRequest]) (*connect.Response[v1.GetProducerResponse], error)
	// GetAgencyFiles returns URLs for accessing files associated with an agency, such as contracts.
	GetAgencyFiles(context.Context, *connect.Request[v1.GetAgencyFilesRequest]) (*connect.Response[v1.GetAgencyFilesResponse], error)
	// UpdateProducer updates information for an existing producer.
	// Supports updating contact details, background check responses,
	// employment history, and non-uniform licensing questions.
	// Information from NIPR and other third-party sources cannot be updated.
	// Validates email uniqueness if the email is changed.
	UpdateProducer(context.Context, *connect.Request[v1.UpdateProducerRequest]) (*connect.Response[v1.UpdateProducerResponse], error)
	// ApproveProducer changes a producer's onboarding state to APPROVED.
	// This typically happens after all verification steps are complete.
	// This method is deprecated. Use SyncProducerWithNIPR instead.
	//
	// Deprecated: do not use.
	ApproveProducer(context.Context, *connect.Request[v1.ApproveProducerRequest]) (*connect.Response[v1.ApproveProducerResponse], error)
	// RejectProducer changes a producer's onboarding state to REJECTED.
	// An optional reason for rejection can be provided.
	// This method is deprecated. Use StopSyncAgencyWithNIPR instead.
	//
	// Deprecated: do not use.
	RejectProducer(context.Context, *connect.Request[v1.RejectProducerRequest]) (*connect.Response[v1.RejectProducerResponse], error)
	// NewContact creates a new contact associated with an agency.
	// Contacts represent non-producer individuals linked to the agency.
	// Returns the ID of the created contact.
	NewContact(context.Context, *connect.Request[v1.NewContactRequest]) (*connect.Response[v1.NewContactResponse], error)
	// NewContacts creates multiple contacts in a single request.
	// Each contact is associated with the specified agency.
	// Returns the IDs of all created contacts.
	NewContacts(context.Context, *connect.Request[v1.NewContactsRequest]) (*connect.Response[v1.NewContactsResponse], error)
	// SetExternalID sets an external identifier for a producer or contact.
	// Useful for integrating with external systems that use different ID schemes.
	SetExternalID(context.Context, *connect.Request[v1.SetExternalIDRequest]) (*connect.Response[v1.SetExternalIDResponse], error)
	// ValidateProducerNPN checks whether a producer’s National Producer Number (NPN) is valid.
	// It performs a lookup against NIPR and applies internal validation rules.
	// Returns a validity flag and any associated error messages.
	ValidateProducerNPN(context.Context, *connect.Request[v1.ValidateProducerNPNRequest]) (*connect.Response[v1.ValidateProducerNPNResponse], error)
	// ValidateAgencyNPN checks whether an agency’s National Producer Number (NPN) is valid.
	// It performs a lookup against NIPR and applies internal validation rules.
	// Returns a validity flag and any associated error messages.
	ValidateAgencyNPN(context.Context, *connect.Request[v1.ValidateAgencyNPNRequest]) (*connect.Response[v1.ValidateAgencyNPNResponse], error)
	// LookupNPNByFEIN finds an NPN using a Federal Employer Identification Number.
	// Used to help agencies that know their FEIN but not their NPN.
	// Returns the NPN if found or an error message.
	LookupNPNByFEIN(context.Context, *connect.Request[v1.LookupNPNByFEINRequest]) (*connect.Response[v1.LookupNPNByFEINResponse], error)
	// ResyncProducer triggers a manual resynchronization of a producer’s data.
	// This can be used to refresh data after external changes.
	//
	// WARNING: This call counts as an additional NPN lookup for billing purposes.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in extra charges.
	ResyncProducer(context.Context, *connect.Request[v1.ResyncProducerRequest]) (*connect.Response[v1.ResyncProducerResponse], error)
	// ResyncAgency triggers a manual resynchronization of an agency’s data.
	// Similar to ResyncProducer, this can be used to refresh data after external changes.
	//
	// WARNING: This call counts as an additional NPN lookup for billing purposes.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in extra charges.
	ResyncAgency(context.Context, *connect.Request[v1.ResyncAgencyRequest]) (*connect.Response[v1.ResyncAgencyResponse], error)
	// SyncAgencyWithNIPR synchronizes an producer’s data with the NIPR system.
	// Fetches the latest producer information and appointments.
	//
	// WARNING: This call counts as an extra NPN lookup against your billing.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in additional charges.
	SyncProducerWithNIPR(context.Context, *connect.Request[v1.SyncProducerWithNIPRRequest]) (*connect.Response[v1.SyncProducerWithNIPRResponse], error)
	// SyncAgencyWithNIPR synchronizes an agency’s data with the NIPR system.
	// Fetches the latest agency information and appointments.
	//
	// WARNING: This call counts as an extra NPN lookup against your billing.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in additional charges.
	SyncAgencyWithNIPR(context.Context, *connect.Request[v1.SyncAgencyWithNIPRRequest]) (*connect.Response[v1.SyncAgencyWithNIPRResponse], error)
	// StopSyncProducerWithNIPR stops the synchronization process with NIPR for a producer.
	// Use this to prevent further automatic updates from NIPR.
	StopSyncProducerWithNIPR(context.Context, *connect.Request[v1.StopSyncProducerWithNIPRRequest]) (*connect.Response[v1.StopSyncProducerWithNIPRResponse], error)
	// StopSyncAgencyWithNIPR stops the synchronization process with NIPR for an agency.
	// Use this to prevent further automatic updates from NIPR.
	StopSyncAgencyWithNIPR(context.Context, *connect.Request[v1.StopSyncAgencyWithNIPRRequest]) (*connect.Response[v1.StopSyncAgencyWithNIPRResponse], error)
}

// NewProducerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProducerServiceHandler(svc ProducerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	producerServiceMethods := v1.File_producer_v1_producer_proto.Services().ByName("ProducerService").Methods()
	producerServiceCreateAgencyOnboardingURLHandler := connect.NewUnaryHandler(
		ProducerServiceCreateAgencyOnboardingURLProcedure,
		svc.CreateAgencyOnboardingURL,
		connect.WithSchema(producerServiceMethods.ByName("CreateAgencyOnboardingURL")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceNewAgencyHandler := connect.NewUnaryHandler(
		ProducerServiceNewAgencyProcedure,
		svc.NewAgency,
		connect.WithSchema(producerServiceMethods.ByName("NewAgency")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceNewProducerHandler := connect.NewUnaryHandler(
		ProducerServiceNewProducerProcedure,
		svc.NewProducer,
		connect.WithSchema(producerServiceMethods.ByName("NewProducer")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceNewProducersHandler := connect.NewUnaryHandler(
		ProducerServiceNewProducersProcedure,
		svc.NewProducers,
		connect.WithSchema(producerServiceMethods.ByName("NewProducers")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceGetAgencyAndProducersHandler := connect.NewUnaryHandler(
		ProducerServiceGetAgencyAndProducersProcedure,
		svc.GetAgencyAndProducers,
		connect.WithSchema(producerServiceMethods.ByName("GetAgencyAndProducers")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceGetProducerHandler := connect.NewUnaryHandler(
		ProducerServiceGetProducerProcedure,
		svc.GetProducer,
		connect.WithSchema(producerServiceMethods.ByName("GetProducer")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceGetAgencyFilesHandler := connect.NewUnaryHandler(
		ProducerServiceGetAgencyFilesProcedure,
		svc.GetAgencyFiles,
		connect.WithSchema(producerServiceMethods.ByName("GetAgencyFiles")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceUpdateProducerHandler := connect.NewUnaryHandler(
		ProducerServiceUpdateProducerProcedure,
		svc.UpdateProducer,
		connect.WithSchema(producerServiceMethods.ByName("UpdateProducer")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceApproveProducerHandler := connect.NewUnaryHandler(
		ProducerServiceApproveProducerProcedure,
		svc.ApproveProducer,
		connect.WithSchema(producerServiceMethods.ByName("ApproveProducer")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceRejectProducerHandler := connect.NewUnaryHandler(
		ProducerServiceRejectProducerProcedure,
		svc.RejectProducer,
		connect.WithSchema(producerServiceMethods.ByName("RejectProducer")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceNewContactHandler := connect.NewUnaryHandler(
		ProducerServiceNewContactProcedure,
		svc.NewContact,
		connect.WithSchema(producerServiceMethods.ByName("NewContact")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceNewContactsHandler := connect.NewUnaryHandler(
		ProducerServiceNewContactsProcedure,
		svc.NewContacts,
		connect.WithSchema(producerServiceMethods.ByName("NewContacts")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceSetExternalIDHandler := connect.NewUnaryHandler(
		ProducerServiceSetExternalIDProcedure,
		svc.SetExternalID,
		connect.WithSchema(producerServiceMethods.ByName("SetExternalID")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceValidateProducerNPNHandler := connect.NewUnaryHandler(
		ProducerServiceValidateProducerNPNProcedure,
		svc.ValidateProducerNPN,
		connect.WithSchema(producerServiceMethods.ByName("ValidateProducerNPN")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceValidateAgencyNPNHandler := connect.NewUnaryHandler(
		ProducerServiceValidateAgencyNPNProcedure,
		svc.ValidateAgencyNPN,
		connect.WithSchema(producerServiceMethods.ByName("ValidateAgencyNPN")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceLookupNPNByFEINHandler := connect.NewUnaryHandler(
		ProducerServiceLookupNPNByFEINProcedure,
		svc.LookupNPNByFEIN,
		connect.WithSchema(producerServiceMethods.ByName("LookupNPNByFEIN")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceResyncProducerHandler := connect.NewUnaryHandler(
		ProducerServiceResyncProducerProcedure,
		svc.ResyncProducer,
		connect.WithSchema(producerServiceMethods.ByName("ResyncProducer")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceResyncAgencyHandler := connect.NewUnaryHandler(
		ProducerServiceResyncAgencyProcedure,
		svc.ResyncAgency,
		connect.WithSchema(producerServiceMethods.ByName("ResyncAgency")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceSyncProducerWithNIPRHandler := connect.NewUnaryHandler(
		ProducerServiceSyncProducerWithNIPRProcedure,
		svc.SyncProducerWithNIPR,
		connect.WithSchema(producerServiceMethods.ByName("SyncProducerWithNIPR")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceSyncAgencyWithNIPRHandler := connect.NewUnaryHandler(
		ProducerServiceSyncAgencyWithNIPRProcedure,
		svc.SyncAgencyWithNIPR,
		connect.WithSchema(producerServiceMethods.ByName("SyncAgencyWithNIPR")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceStopSyncProducerWithNIPRHandler := connect.NewUnaryHandler(
		ProducerServiceStopSyncProducerWithNIPRProcedure,
		svc.StopSyncProducerWithNIPR,
		connect.WithSchema(producerServiceMethods.ByName("StopSyncProducerWithNIPR")),
		connect.WithHandlerOptions(opts...),
	)
	producerServiceStopSyncAgencyWithNIPRHandler := connect.NewUnaryHandler(
		ProducerServiceStopSyncAgencyWithNIPRProcedure,
		svc.StopSyncAgencyWithNIPR,
		connect.WithSchema(producerServiceMethods.ByName("StopSyncAgencyWithNIPR")),
		connect.WithHandlerOptions(opts...),
	)
	return "/producerflow.producer.v1.ProducerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProducerServiceCreateAgencyOnboardingURLProcedure:
			producerServiceCreateAgencyOnboardingURLHandler.ServeHTTP(w, r)
		case ProducerServiceNewAgencyProcedure:
			producerServiceNewAgencyHandler.ServeHTTP(w, r)
		case ProducerServiceNewProducerProcedure:
			producerServiceNewProducerHandler.ServeHTTP(w, r)
		case ProducerServiceNewProducersProcedure:
			producerServiceNewProducersHandler.ServeHTTP(w, r)
		case ProducerServiceGetAgencyAndProducersProcedure:
			producerServiceGetAgencyAndProducersHandler.ServeHTTP(w, r)
		case ProducerServiceGetProducerProcedure:
			producerServiceGetProducerHandler.ServeHTTP(w, r)
		case ProducerServiceGetAgencyFilesProcedure:
			producerServiceGetAgencyFilesHandler.ServeHTTP(w, r)
		case ProducerServiceUpdateProducerProcedure:
			producerServiceUpdateProducerHandler.ServeHTTP(w, r)
		case ProducerServiceApproveProducerProcedure:
			producerServiceApproveProducerHandler.ServeHTTP(w, r)
		case ProducerServiceRejectProducerProcedure:
			producerServiceRejectProducerHandler.ServeHTTP(w, r)
		case ProducerServiceNewContactProcedure:
			producerServiceNewContactHandler.ServeHTTP(w, r)
		case ProducerServiceNewContactsProcedure:
			producerServiceNewContactsHandler.ServeHTTP(w, r)
		case ProducerServiceSetExternalIDProcedure:
			producerServiceSetExternalIDHandler.ServeHTTP(w, r)
		case ProducerServiceValidateProducerNPNProcedure:
			producerServiceValidateProducerNPNHandler.ServeHTTP(w, r)
		case ProducerServiceValidateAgencyNPNProcedure:
			producerServiceValidateAgencyNPNHandler.ServeHTTP(w, r)
		case ProducerServiceLookupNPNByFEINProcedure:
			producerServiceLookupNPNByFEINHandler.ServeHTTP(w, r)
		case ProducerServiceResyncProducerProcedure:
			producerServiceResyncProducerHandler.ServeHTTP(w, r)
		case ProducerServiceResyncAgencyProcedure:
			producerServiceResyncAgencyHandler.ServeHTTP(w, r)
		case ProducerServiceSyncProducerWithNIPRProcedure:
			producerServiceSyncProducerWithNIPRHandler.ServeHTTP(w, r)
		case ProducerServiceSyncAgencyWithNIPRProcedure:
			producerServiceSyncAgencyWithNIPRHandler.ServeHTTP(w, r)
		case ProducerServiceStopSyncProducerWithNIPRProcedure:
			producerServiceStopSyncProducerWithNIPRHandler.ServeHTTP(w, r)
		case ProducerServiceStopSyncAgencyWithNIPRProcedure:
			producerServiceStopSyncAgencyWithNIPRHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProducerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProducerServiceHandler struct{}

func (UnimplementedProducerServiceHandler) CreateAgencyOnboardingURL(context.Context, *connect.Request[v1.CreateAgencyOnboardingURLRequest]) (*connect.Response[v1.CreateAgencyOnboardingURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.CreateAgencyOnboardingURL is not implemented"))
}

func (UnimplementedProducerServiceHandler) NewAgency(context.Context, *connect.Request[v1.NewAgencyRequest]) (*connect.Response[v1.NewAgencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.NewAgency is not implemented"))
}

func (UnimplementedProducerServiceHandler) NewProducer(context.Context, *connect.Request[v1.NewProducerRequest]) (*connect.Response[v1.NewProducerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.NewProducer is not implemented"))
}

func (UnimplementedProducerServiceHandler) NewProducers(context.Context, *connect.Request[v1.NewProducersRequest]) (*connect.Response[v1.NewProducersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.NewProducers is not implemented"))
}

func (UnimplementedProducerServiceHandler) GetAgencyAndProducers(context.Context, *connect.Request[v1.GetAgencyAndProducersRequest]) (*connect.Response[v1.GetAgencyAndProducersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.GetAgencyAndProducers is not implemented"))
}

func (UnimplementedProducerServiceHandler) GetProducer(context.Context, *connect.Request[v1.GetProducerRequest]) (*connect.Response[v1.GetProducerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.GetProducer is not implemented"))
}

func (UnimplementedProducerServiceHandler) GetAgencyFiles(context.Context, *connect.Request[v1.GetAgencyFilesRequest]) (*connect.Response[v1.GetAgencyFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.GetAgencyFiles is not implemented"))
}

func (UnimplementedProducerServiceHandler) UpdateProducer(context.Context, *connect.Request[v1.UpdateProducerRequest]) (*connect.Response[v1.UpdateProducerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.UpdateProducer is not implemented"))
}

func (UnimplementedProducerServiceHandler) ApproveProducer(context.Context, *connect.Request[v1.ApproveProducerRequest]) (*connect.Response[v1.ApproveProducerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.ApproveProducer is not implemented"))
}

func (UnimplementedProducerServiceHandler) RejectProducer(context.Context, *connect.Request[v1.RejectProducerRequest]) (*connect.Response[v1.RejectProducerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.RejectProducer is not implemented"))
}

func (UnimplementedProducerServiceHandler) NewContact(context.Context, *connect.Request[v1.NewContactRequest]) (*connect.Response[v1.NewContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.NewContact is not implemented"))
}

func (UnimplementedProducerServiceHandler) NewContacts(context.Context, *connect.Request[v1.NewContactsRequest]) (*connect.Response[v1.NewContactsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.NewContacts is not implemented"))
}

func (UnimplementedProducerServiceHandler) SetExternalID(context.Context, *connect.Request[v1.SetExternalIDRequest]) (*connect.Response[v1.SetExternalIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.SetExternalID is not implemented"))
}

func (UnimplementedProducerServiceHandler) ValidateProducerNPN(context.Context, *connect.Request[v1.ValidateProducerNPNRequest]) (*connect.Response[v1.ValidateProducerNPNResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.ValidateProducerNPN is not implemented"))
}

func (UnimplementedProducerServiceHandler) ValidateAgencyNPN(context.Context, *connect.Request[v1.ValidateAgencyNPNRequest]) (*connect.Response[v1.ValidateAgencyNPNResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.ValidateAgencyNPN is not implemented"))
}

func (UnimplementedProducerServiceHandler) LookupNPNByFEIN(context.Context, *connect.Request[v1.LookupNPNByFEINRequest]) (*connect.Response[v1.LookupNPNByFEINResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.LookupNPNByFEIN is not implemented"))
}

func (UnimplementedProducerServiceHandler) ResyncProducer(context.Context, *connect.Request[v1.ResyncProducerRequest]) (*connect.Response[v1.ResyncProducerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.ResyncProducer is not implemented"))
}

func (UnimplementedProducerServiceHandler) ResyncAgency(context.Context, *connect.Request[v1.ResyncAgencyRequest]) (*connect.Response[v1.ResyncAgencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.ResyncAgency is not implemented"))
}

func (UnimplementedProducerServiceHandler) SyncProducerWithNIPR(context.Context, *connect.Request[v1.SyncProducerWithNIPRRequest]) (*connect.Response[v1.SyncProducerWithNIPRResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.SyncProducerWithNIPR is not implemented"))
}

func (UnimplementedProducerServiceHandler) SyncAgencyWithNIPR(context.Context, *connect.Request[v1.SyncAgencyWithNIPRRequest]) (*connect.Response[v1.SyncAgencyWithNIPRResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.SyncAgencyWithNIPR is not implemented"))
}

func (UnimplementedProducerServiceHandler) StopSyncProducerWithNIPR(context.Context, *connect.Request[v1.StopSyncProducerWithNIPRRequest]) (*connect.Response[v1.StopSyncProducerWithNIPRResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.StopSyncProducerWithNIPR is not implemented"))
}

func (UnimplementedProducerServiceHandler) StopSyncAgencyWithNIPR(context.Context, *connect.Request[v1.StopSyncAgencyWithNIPRRequest]) (*connect.Response[v1.StopSyncAgencyWithNIPRResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("producerflow.producer.v1.ProducerService.StopSyncAgencyWithNIPR is not implemented"))
}
