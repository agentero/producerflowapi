// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: producerflow/producer/v1/producer.proto

package producerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProducerService_CreateAgencyOnboardingURL_FullMethodName = "/producerflow.producer.v1.ProducerService/CreateAgencyOnboardingURL"
	ProducerService_NewAgency_FullMethodName                 = "/producerflow.producer.v1.ProducerService/NewAgency"
	ProducerService_NewProducer_FullMethodName               = "/producerflow.producer.v1.ProducerService/NewProducer"
	ProducerService_NewProducers_FullMethodName              = "/producerflow.producer.v1.ProducerService/NewProducers"
	ProducerService_GetAgencyAndProducers_FullMethodName     = "/producerflow.producer.v1.ProducerService/GetAgencyAndProducers"
	ProducerService_GetProducer_FullMethodName               = "/producerflow.producer.v1.ProducerService/GetProducer"
	ProducerService_GetAgencyFiles_FullMethodName            = "/producerflow.producer.v1.ProducerService/GetAgencyFiles"
	ProducerService_UpdateProducer_FullMethodName            = "/producerflow.producer.v1.ProducerService/UpdateProducer"
	ProducerService_ApproveProducer_FullMethodName           = "/producerflow.producer.v1.ProducerService/ApproveProducer"
	ProducerService_RejectProducer_FullMethodName            = "/producerflow.producer.v1.ProducerService/RejectProducer"
	ProducerService_NewContact_FullMethodName                = "/producerflow.producer.v1.ProducerService/NewContact"
	ProducerService_NewContacts_FullMethodName               = "/producerflow.producer.v1.ProducerService/NewContacts"
	ProducerService_SetExternalID_FullMethodName             = "/producerflow.producer.v1.ProducerService/SetExternalID"
	ProducerService_ValidateProducerNPN_FullMethodName       = "/producerflow.producer.v1.ProducerService/ValidateProducerNPN"
	ProducerService_ValidateAgencyNPN_FullMethodName         = "/producerflow.producer.v1.ProducerService/ValidateAgencyNPN"
	ProducerService_LookupNPNByFEIN_FullMethodName           = "/producerflow.producer.v1.ProducerService/LookupNPNByFEIN"
	ProducerService_ResyncProducer_FullMethodName            = "/producerflow.producer.v1.ProducerService/ResyncProducer"
	ProducerService_ResyncAgency_FullMethodName              = "/producerflow.producer.v1.ProducerService/ResyncAgency"
	ProducerService_SyncProducerWithNIPR_FullMethodName      = "/producerflow.producer.v1.ProducerService/SyncProducerWithNIPR"
	ProducerService_SyncAgencyWithNIPR_FullMethodName        = "/producerflow.producer.v1.ProducerService/SyncAgencyWithNIPR"
	ProducerService_StopSyncProducerWithNIPR_FullMethodName  = "/producerflow.producer.v1.ProducerService/StopSyncProducerWithNIPR"
	ProducerService_StopSyncAgencyWithNIPR_FullMethodName    = "/producerflow.producer.v1.ProducerService/StopSyncAgencyWithNIPR"
)

// ProducerServiceClient is the client API for ProducerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProducerService provides a comprehensive API for managing insurance producers
// and agencies, including onboarding, data synchronization, and integration with
// external systems like NIPR for license verification.
type ProducerServiceClient interface {
	// CreateAgencyOnboardingURL generates a URL that can be used to onboard a new agency.
	// The URL contains encoded information about the agency defaults and tenant context.
	// Returns a URL string that can be shared with the agency for self-onboarding.
	CreateAgencyOnboardingURL(ctx context.Context, in *CreateAgencyOnboardingURLRequest, opts ...grpc.CallOption) (*CreateAgencyOnboardingURLResponse, error)
	// NewAgency creates a new agency, optionally with associated producers.
	// It performs the following validation checks:
	// - Ensures all required fields are present and valid
	// - Checks whether the NPN is already registered
	// - Verifies agency and principal information with NIPR
	//
	// Business rules:
	// - Sole proprietors can't have an agency NPN or additional producers
	// - Regular agencies must provide either an NPN or a FEIN
	//
	// If validation passes, it creates the agency, principal, and any producers.
	// Returns the IDs of the created agency, principal, and producers.
	NewAgency(ctx context.Context, in *NewAgencyRequest, opts ...grpc.CallOption) (*NewAgencyResponse, error)
	// NewProducer creates a new producer and associates them with an existing agency.
	// It validates the producer's information and checks that the email is unique.
	// Returns the ID of the created producer.
	NewProducer(ctx context.Context, in *NewProducerRequest, opts ...grpc.CallOption) (*NewProducerResponse, error)
	// NewProducers creates multiple producers and associates them with the specified agency.
	// It performs the same validations as NewProducer for each entry.
	// Returns the IDs of all created producers.
	NewProducers(ctx context.Context, in *NewProducersRequest, opts ...grpc.CallOption) (*NewProducersResponse, error)
	// GetAgencyAndProducers retrieves details for an agency and all associated producers.
	// Returns the agency information and a list of producers.
	GetAgencyAndProducers(ctx context.Context, in *GetAgencyAndProducersRequest, opts ...grpc.CallOption) (*GetAgencyAndProducersResponse, error)
	// GetProducer retrieves detailed information about a specific producer.
	// The producer can be found by ID, NPN, or email.
	// Returns the producer's information, including NIPR data and agency association.
	GetProducer(ctx context.Context, in *GetProducerRequest, opts ...grpc.CallOption) (*GetProducerResponse, error)
	// GetAgencyFiles returns URLs for accessing files associated with an agency, such as contracts.
	GetAgencyFiles(ctx context.Context, in *GetAgencyFilesRequest, opts ...grpc.CallOption) (*GetAgencyFilesResponse, error)
	// UpdateProducer updates information for an existing producer.
	// Supports updating contact details, background check responses,
	// employment history, and non-uniform licensing questions.
	// Information from NIPR and other third-party sources cannot be updated.
	// Validates email uniqueness if the email is changed.
	UpdateProducer(ctx context.Context, in *UpdateProducerRequest, opts ...grpc.CallOption) (*UpdateProducerResponse, error)
	// Deprecated: Do not use.
	// ApproveProducer changes a producer's onboarding state to APPROVED.
	// This typically happens after all verification steps are complete.
	// This method is deprecated. Use SyncProducerWithNIPR instead.
	ApproveProducer(ctx context.Context, in *ApproveProducerRequest, opts ...grpc.CallOption) (*ApproveProducerResponse, error)
	// Deprecated: Do not use.
	// RejectProducer changes a producer's onboarding state to REJECTED.
	// An optional reason for rejection can be provided.
	// This method is deprecated. Use StopSyncAgencyWithNIPR instead.
	RejectProducer(ctx context.Context, in *RejectProducerRequest, opts ...grpc.CallOption) (*RejectProducerResponse, error)
	// NewContact creates a new contact associated with an agency.
	// Contacts represent non-producer individuals linked to the agency.
	// Returns the ID of the created contact.
	NewContact(ctx context.Context, in *NewContactRequest, opts ...grpc.CallOption) (*NewContactResponse, error)
	// NewContacts creates multiple contacts in a single request.
	// Each contact is associated with the specified agency.
	// Returns the IDs of all created contacts.
	NewContacts(ctx context.Context, in *NewContactsRequest, opts ...grpc.CallOption) (*NewContactsResponse, error)
	// SetExternalID sets an external identifier for a producer or contact.
	// Useful for integrating with external systems that use different ID schemes.
	SetExternalID(ctx context.Context, in *SetExternalIDRequest, opts ...grpc.CallOption) (*SetExternalIDResponse, error)
	// ValidateProducerNPN checks whether a producer’s National Producer Number (NPN) is valid.
	// It performs a lookup against NIPR and applies internal validation rules.
	// Returns a validity flag and any associated error messages.
	ValidateProducerNPN(ctx context.Context, in *ValidateProducerNPNRequest, opts ...grpc.CallOption) (*ValidateProducerNPNResponse, error)
	// ValidateAgencyNPN checks whether an agency’s National Producer Number (NPN) is valid.
	// It performs a lookup against NIPR and applies internal validation rules.
	// Returns a validity flag and any associated error messages.
	ValidateAgencyNPN(ctx context.Context, in *ValidateAgencyNPNRequest, opts ...grpc.CallOption) (*ValidateAgencyNPNResponse, error)
	// LookupNPNByFEIN finds an NPN using a Federal Employer Identification Number.
	// Used to help agencies that know their FEIN but not their NPN.
	// Returns the NPN if found or an error message.
	LookupNPNByFEIN(ctx context.Context, in *LookupNPNByFEINRequest, opts ...grpc.CallOption) (*LookupNPNByFEINResponse, error)
	// ResyncProducer triggers a manual resynchronization of a producer’s data.
	// This can be used to refresh data after external changes.
	//
	// WARNING: This call counts as an additional NPN lookup for billing purposes.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in extra charges.
	ResyncProducer(ctx context.Context, in *ResyncProducerRequest, opts ...grpc.CallOption) (*ResyncProducerResponse, error)
	// ResyncAgency triggers a manual resynchronization of an agency’s data.
	// Similar to ResyncProducer, this can be used to refresh data after external changes.
	//
	// WARNING: This call counts as an additional NPN lookup for billing purposes.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in extra charges.
	ResyncAgency(ctx context.Context, in *ResyncAgencyRequest, opts ...grpc.CallOption) (*ResyncAgencyResponse, error)
	// SyncAgencyWithNIPR synchronizes an producer’s data with the NIPR system.
	// Fetches the latest producer information and appointments.
	//
	// WARNING: This call counts as an extra NPN lookup against your billing.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in additional charges.
	SyncProducerWithNIPR(ctx context.Context, in *SyncProducerWithNIPRRequest, opts ...grpc.CallOption) (*SyncProducerWithNIPRResponse, error)
	// SyncAgencyWithNIPR synchronizes an agency’s data with the NIPR system.
	// Fetches the latest agency information and appointments.
	//
	// WARNING: This call counts as an extra NPN lookup against your billing.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in additional charges.
	SyncAgencyWithNIPR(ctx context.Context, in *SyncAgencyWithNIPRRequest, opts ...grpc.CallOption) (*SyncAgencyWithNIPRResponse, error)
	// StopSyncProducerWithNIPR stops the synchronization process with NIPR for a producer.
	// Use this to prevent further automatic updates from NIPR.
	StopSyncProducerWithNIPR(ctx context.Context, in *StopSyncProducerWithNIPRRequest, opts ...grpc.CallOption) (*StopSyncProducerWithNIPRResponse, error)
	// StopSyncAgencyWithNIPR stops the synchronization process with NIPR for an agency.
	// Use this to prevent further automatic updates from NIPR.
	StopSyncAgencyWithNIPR(ctx context.Context, in *StopSyncAgencyWithNIPRRequest, opts ...grpc.CallOption) (*StopSyncAgencyWithNIPRResponse, error)
}

type producerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProducerServiceClient(cc grpc.ClientConnInterface) ProducerServiceClient {
	return &producerServiceClient{cc}
}

func (c *producerServiceClient) CreateAgencyOnboardingURL(ctx context.Context, in *CreateAgencyOnboardingURLRequest, opts ...grpc.CallOption) (*CreateAgencyOnboardingURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgencyOnboardingURLResponse)
	err := c.cc.Invoke(ctx, ProducerService_CreateAgencyOnboardingURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) NewAgency(ctx context.Context, in *NewAgencyRequest, opts ...grpc.CallOption) (*NewAgencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewAgencyResponse)
	err := c.cc.Invoke(ctx, ProducerService_NewAgency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) NewProducer(ctx context.Context, in *NewProducerRequest, opts ...grpc.CallOption) (*NewProducerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewProducerResponse)
	err := c.cc.Invoke(ctx, ProducerService_NewProducer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) NewProducers(ctx context.Context, in *NewProducersRequest, opts ...grpc.CallOption) (*NewProducersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewProducersResponse)
	err := c.cc.Invoke(ctx, ProducerService_NewProducers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) GetAgencyAndProducers(ctx context.Context, in *GetAgencyAndProducersRequest, opts ...grpc.CallOption) (*GetAgencyAndProducersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgencyAndProducersResponse)
	err := c.cc.Invoke(ctx, ProducerService_GetAgencyAndProducers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) GetProducer(ctx context.Context, in *GetProducerRequest, opts ...grpc.CallOption) (*GetProducerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProducerResponse)
	err := c.cc.Invoke(ctx, ProducerService_GetProducer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) GetAgencyFiles(ctx context.Context, in *GetAgencyFilesRequest, opts ...grpc.CallOption) (*GetAgencyFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgencyFilesResponse)
	err := c.cc.Invoke(ctx, ProducerService_GetAgencyFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) UpdateProducer(ctx context.Context, in *UpdateProducerRequest, opts ...grpc.CallOption) (*UpdateProducerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProducerResponse)
	err := c.cc.Invoke(ctx, ProducerService_UpdateProducer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *producerServiceClient) ApproveProducer(ctx context.Context, in *ApproveProducerRequest, opts ...grpc.CallOption) (*ApproveProducerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveProducerResponse)
	err := c.cc.Invoke(ctx, ProducerService_ApproveProducer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *producerServiceClient) RejectProducer(ctx context.Context, in *RejectProducerRequest, opts ...grpc.CallOption) (*RejectProducerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectProducerResponse)
	err := c.cc.Invoke(ctx, ProducerService_RejectProducer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) NewContact(ctx context.Context, in *NewContactRequest, opts ...grpc.CallOption) (*NewContactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewContactResponse)
	err := c.cc.Invoke(ctx, ProducerService_NewContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) NewContacts(ctx context.Context, in *NewContactsRequest, opts ...grpc.CallOption) (*NewContactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewContactsResponse)
	err := c.cc.Invoke(ctx, ProducerService_NewContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) SetExternalID(ctx context.Context, in *SetExternalIDRequest, opts ...grpc.CallOption) (*SetExternalIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetExternalIDResponse)
	err := c.cc.Invoke(ctx, ProducerService_SetExternalID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) ValidateProducerNPN(ctx context.Context, in *ValidateProducerNPNRequest, opts ...grpc.CallOption) (*ValidateProducerNPNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateProducerNPNResponse)
	err := c.cc.Invoke(ctx, ProducerService_ValidateProducerNPN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) ValidateAgencyNPN(ctx context.Context, in *ValidateAgencyNPNRequest, opts ...grpc.CallOption) (*ValidateAgencyNPNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAgencyNPNResponse)
	err := c.cc.Invoke(ctx, ProducerService_ValidateAgencyNPN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) LookupNPNByFEIN(ctx context.Context, in *LookupNPNByFEINRequest, opts ...grpc.CallOption) (*LookupNPNByFEINResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupNPNByFEINResponse)
	err := c.cc.Invoke(ctx, ProducerService_LookupNPNByFEIN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) ResyncProducer(ctx context.Context, in *ResyncProducerRequest, opts ...grpc.CallOption) (*ResyncProducerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResyncProducerResponse)
	err := c.cc.Invoke(ctx, ProducerService_ResyncProducer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) ResyncAgency(ctx context.Context, in *ResyncAgencyRequest, opts ...grpc.CallOption) (*ResyncAgencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResyncAgencyResponse)
	err := c.cc.Invoke(ctx, ProducerService_ResyncAgency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) SyncProducerWithNIPR(ctx context.Context, in *SyncProducerWithNIPRRequest, opts ...grpc.CallOption) (*SyncProducerWithNIPRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncProducerWithNIPRResponse)
	err := c.cc.Invoke(ctx, ProducerService_SyncProducerWithNIPR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) SyncAgencyWithNIPR(ctx context.Context, in *SyncAgencyWithNIPRRequest, opts ...grpc.CallOption) (*SyncAgencyWithNIPRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncAgencyWithNIPRResponse)
	err := c.cc.Invoke(ctx, ProducerService_SyncAgencyWithNIPR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) StopSyncProducerWithNIPR(ctx context.Context, in *StopSyncProducerWithNIPRRequest, opts ...grpc.CallOption) (*StopSyncProducerWithNIPRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSyncProducerWithNIPRResponse)
	err := c.cc.Invoke(ctx, ProducerService_StopSyncProducerWithNIPR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) StopSyncAgencyWithNIPR(ctx context.Context, in *StopSyncAgencyWithNIPRRequest, opts ...grpc.CallOption) (*StopSyncAgencyWithNIPRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSyncAgencyWithNIPRResponse)
	err := c.cc.Invoke(ctx, ProducerService_StopSyncAgencyWithNIPR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProducerServiceServer is the server API for ProducerService service.
// All implementations must embed UnimplementedProducerServiceServer
// for forward compatibility.
//
// ProducerService provides a comprehensive API for managing insurance producers
// and agencies, including onboarding, data synchronization, and integration with
// external systems like NIPR for license verification.
type ProducerServiceServer interface {
	// CreateAgencyOnboardingURL generates a URL that can be used to onboard a new agency.
	// The URL contains encoded information about the agency defaults and tenant context.
	// Returns a URL string that can be shared with the agency for self-onboarding.
	CreateAgencyOnboardingURL(context.Context, *CreateAgencyOnboardingURLRequest) (*CreateAgencyOnboardingURLResponse, error)
	// NewAgency creates a new agency, optionally with associated producers.
	// It performs the following validation checks:
	// - Ensures all required fields are present and valid
	// - Checks whether the NPN is already registered
	// - Verifies agency and principal information with NIPR
	//
	// Business rules:
	// - Sole proprietors can't have an agency NPN or additional producers
	// - Regular agencies must provide either an NPN or a FEIN
	//
	// If validation passes, it creates the agency, principal, and any producers.
	// Returns the IDs of the created agency, principal, and producers.
	NewAgency(context.Context, *NewAgencyRequest) (*NewAgencyResponse, error)
	// NewProducer creates a new producer and associates them with an existing agency.
	// It validates the producer's information and checks that the email is unique.
	// Returns the ID of the created producer.
	NewProducer(context.Context, *NewProducerRequest) (*NewProducerResponse, error)
	// NewProducers creates multiple producers and associates them with the specified agency.
	// It performs the same validations as NewProducer for each entry.
	// Returns the IDs of all created producers.
	NewProducers(context.Context, *NewProducersRequest) (*NewProducersResponse, error)
	// GetAgencyAndProducers retrieves details for an agency and all associated producers.
	// Returns the agency information and a list of producers.
	GetAgencyAndProducers(context.Context, *GetAgencyAndProducersRequest) (*GetAgencyAndProducersResponse, error)
	// GetProducer retrieves detailed information about a specific producer.
	// The producer can be found by ID, NPN, or email.
	// Returns the producer's information, including NIPR data and agency association.
	GetProducer(context.Context, *GetProducerRequest) (*GetProducerResponse, error)
	// GetAgencyFiles returns URLs for accessing files associated with an agency, such as contracts.
	GetAgencyFiles(context.Context, *GetAgencyFilesRequest) (*GetAgencyFilesResponse, error)
	// UpdateProducer updates information for an existing producer.
	// Supports updating contact details, background check responses,
	// employment history, and non-uniform licensing questions.
	// Information from NIPR and other third-party sources cannot be updated.
	// Validates email uniqueness if the email is changed.
	UpdateProducer(context.Context, *UpdateProducerRequest) (*UpdateProducerResponse, error)
	// Deprecated: Do not use.
	// ApproveProducer changes a producer's onboarding state to APPROVED.
	// This typically happens after all verification steps are complete.
	// This method is deprecated. Use SyncProducerWithNIPR instead.
	ApproveProducer(context.Context, *ApproveProducerRequest) (*ApproveProducerResponse, error)
	// Deprecated: Do not use.
	// RejectProducer changes a producer's onboarding state to REJECTED.
	// An optional reason for rejection can be provided.
	// This method is deprecated. Use StopSyncAgencyWithNIPR instead.
	RejectProducer(context.Context, *RejectProducerRequest) (*RejectProducerResponse, error)
	// NewContact creates a new contact associated with an agency.
	// Contacts represent non-producer individuals linked to the agency.
	// Returns the ID of the created contact.
	NewContact(context.Context, *NewContactRequest) (*NewContactResponse, error)
	// NewContacts creates multiple contacts in a single request.
	// Each contact is associated with the specified agency.
	// Returns the IDs of all created contacts.
	NewContacts(context.Context, *NewContactsRequest) (*NewContactsResponse, error)
	// SetExternalID sets an external identifier for a producer or contact.
	// Useful for integrating with external systems that use different ID schemes.
	SetExternalID(context.Context, *SetExternalIDRequest) (*SetExternalIDResponse, error)
	// ValidateProducerNPN checks whether a producer’s National Producer Number (NPN) is valid.
	// It performs a lookup against NIPR and applies internal validation rules.
	// Returns a validity flag and any associated error messages.
	ValidateProducerNPN(context.Context, *ValidateProducerNPNRequest) (*ValidateProducerNPNResponse, error)
	// ValidateAgencyNPN checks whether an agency’s National Producer Number (NPN) is valid.
	// It performs a lookup against NIPR and applies internal validation rules.
	// Returns a validity flag and any associated error messages.
	ValidateAgencyNPN(context.Context, *ValidateAgencyNPNRequest) (*ValidateAgencyNPNResponse, error)
	// LookupNPNByFEIN finds an NPN using a Federal Employer Identification Number.
	// Used to help agencies that know their FEIN but not their NPN.
	// Returns the NPN if found or an error message.
	LookupNPNByFEIN(context.Context, *LookupNPNByFEINRequest) (*LookupNPNByFEINResponse, error)
	// ResyncProducer triggers a manual resynchronization of a producer’s data.
	// This can be used to refresh data after external changes.
	//
	// WARNING: This call counts as an additional NPN lookup for billing purposes.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in extra charges.
	ResyncProducer(context.Context, *ResyncProducerRequest) (*ResyncProducerResponse, error)
	// ResyncAgency triggers a manual resynchronization of an agency’s data.
	// Similar to ResyncProducer, this can be used to refresh data after external changes.
	//
	// WARNING: This call counts as an additional NPN lookup for billing purposes.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in extra charges.
	ResyncAgency(context.Context, *ResyncAgencyRequest) (*ResyncAgencyResponse, error)
	// SyncAgencyWithNIPR synchronizes an producer’s data with the NIPR system.
	// Fetches the latest producer information and appointments.
	//
	// WARNING: This call counts as an extra NPN lookup against your billing.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in additional charges.
	SyncProducerWithNIPR(context.Context, *SyncProducerWithNIPRRequest) (*SyncProducerWithNIPRResponse, error)
	// SyncAgencyWithNIPR synchronizes an agency’s data with the NIPR system.
	// Fetches the latest agency information and appointments.
	//
	// WARNING: This call counts as an extra NPN lookup against your billing.
	// Most billing plans are based on unique NPNs per month, so using this
	// method may result in additional charges.
	SyncAgencyWithNIPR(context.Context, *SyncAgencyWithNIPRRequest) (*SyncAgencyWithNIPRResponse, error)
	// StopSyncProducerWithNIPR stops the synchronization process with NIPR for a producer.
	// Use this to prevent further automatic updates from NIPR.
	StopSyncProducerWithNIPR(context.Context, *StopSyncProducerWithNIPRRequest) (*StopSyncProducerWithNIPRResponse, error)
	// StopSyncAgencyWithNIPR stops the synchronization process with NIPR for an agency.
	// Use this to prevent further automatic updates from NIPR.
	StopSyncAgencyWithNIPR(context.Context, *StopSyncAgencyWithNIPRRequest) (*StopSyncAgencyWithNIPRResponse, error)
	mustEmbedUnimplementedProducerServiceServer()
}

// UnimplementedProducerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProducerServiceServer struct{}

func (UnimplementedProducerServiceServer) CreateAgencyOnboardingURL(context.Context, *CreateAgencyOnboardingURLRequest) (*CreateAgencyOnboardingURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgencyOnboardingURL not implemented")
}
func (UnimplementedProducerServiceServer) NewAgency(context.Context, *NewAgencyRequest) (*NewAgencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAgency not implemented")
}
func (UnimplementedProducerServiceServer) NewProducer(context.Context, *NewProducerRequest) (*NewProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewProducer not implemented")
}
func (UnimplementedProducerServiceServer) NewProducers(context.Context, *NewProducersRequest) (*NewProducersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewProducers not implemented")
}
func (UnimplementedProducerServiceServer) GetAgencyAndProducers(context.Context, *GetAgencyAndProducersRequest) (*GetAgencyAndProducersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgencyAndProducers not implemented")
}
func (UnimplementedProducerServiceServer) GetProducer(context.Context, *GetProducerRequest) (*GetProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducer not implemented")
}
func (UnimplementedProducerServiceServer) GetAgencyFiles(context.Context, *GetAgencyFilesRequest) (*GetAgencyFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgencyFiles not implemented")
}
func (UnimplementedProducerServiceServer) UpdateProducer(context.Context, *UpdateProducerRequest) (*UpdateProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProducer not implemented")
}
func (UnimplementedProducerServiceServer) ApproveProducer(context.Context, *ApproveProducerRequest) (*ApproveProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveProducer not implemented")
}
func (UnimplementedProducerServiceServer) RejectProducer(context.Context, *RejectProducerRequest) (*RejectProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectProducer not implemented")
}
func (UnimplementedProducerServiceServer) NewContact(context.Context, *NewContactRequest) (*NewContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewContact not implemented")
}
func (UnimplementedProducerServiceServer) NewContacts(context.Context, *NewContactsRequest) (*NewContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewContacts not implemented")
}
func (UnimplementedProducerServiceServer) SetExternalID(context.Context, *SetExternalIDRequest) (*SetExternalIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExternalID not implemented")
}
func (UnimplementedProducerServiceServer) ValidateProducerNPN(context.Context, *ValidateProducerNPNRequest) (*ValidateProducerNPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProducerNPN not implemented")
}
func (UnimplementedProducerServiceServer) ValidateAgencyNPN(context.Context, *ValidateAgencyNPNRequest) (*ValidateAgencyNPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAgencyNPN not implemented")
}
func (UnimplementedProducerServiceServer) LookupNPNByFEIN(context.Context, *LookupNPNByFEINRequest) (*LookupNPNByFEINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupNPNByFEIN not implemented")
}
func (UnimplementedProducerServiceServer) ResyncProducer(context.Context, *ResyncProducerRequest) (*ResyncProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncProducer not implemented")
}
func (UnimplementedProducerServiceServer) ResyncAgency(context.Context, *ResyncAgencyRequest) (*ResyncAgencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncAgency not implemented")
}
func (UnimplementedProducerServiceServer) SyncProducerWithNIPR(context.Context, *SyncProducerWithNIPRRequest) (*SyncProducerWithNIPRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncProducerWithNIPR not implemented")
}
func (UnimplementedProducerServiceServer) SyncAgencyWithNIPR(context.Context, *SyncAgencyWithNIPRRequest) (*SyncAgencyWithNIPRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAgencyWithNIPR not implemented")
}
func (UnimplementedProducerServiceServer) StopSyncProducerWithNIPR(context.Context, *StopSyncProducerWithNIPRRequest) (*StopSyncProducerWithNIPRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSyncProducerWithNIPR not implemented")
}
func (UnimplementedProducerServiceServer) StopSyncAgencyWithNIPR(context.Context, *StopSyncAgencyWithNIPRRequest) (*StopSyncAgencyWithNIPRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSyncAgencyWithNIPR not implemented")
}
func (UnimplementedProducerServiceServer) mustEmbedUnimplementedProducerServiceServer() {}
func (UnimplementedProducerServiceServer) testEmbeddedByValue()                         {}

// UnsafeProducerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProducerServiceServer will
// result in compilation errors.
type UnsafeProducerServiceServer interface {
	mustEmbedUnimplementedProducerServiceServer()
}

func RegisterProducerServiceServer(s grpc.ServiceRegistrar, srv ProducerServiceServer) {
	// If the following call pancis, it indicates UnimplementedProducerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProducerService_ServiceDesc, srv)
}

func _ProducerService_CreateAgencyOnboardingURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgencyOnboardingURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).CreateAgencyOnboardingURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_CreateAgencyOnboardingURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).CreateAgencyOnboardingURL(ctx, req.(*CreateAgencyOnboardingURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_NewAgency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAgencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).NewAgency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_NewAgency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).NewAgency(ctx, req.(*NewAgencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_NewProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).NewProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_NewProducer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).NewProducer(ctx, req.(*NewProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_NewProducers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProducersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).NewProducers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_NewProducers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).NewProducers(ctx, req.(*NewProducersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_GetAgencyAndProducers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgencyAndProducersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).GetAgencyAndProducers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_GetAgencyAndProducers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).GetAgencyAndProducers(ctx, req.(*GetAgencyAndProducersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_GetProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).GetProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_GetProducer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).GetProducer(ctx, req.(*GetProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_GetAgencyFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgencyFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).GetAgencyFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_GetAgencyFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).GetAgencyFiles(ctx, req.(*GetAgencyFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_UpdateProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).UpdateProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_UpdateProducer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).UpdateProducer(ctx, req.(*UpdateProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_ApproveProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).ApproveProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_ApproveProducer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).ApproveProducer(ctx, req.(*ApproveProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_RejectProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).RejectProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_RejectProducer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).RejectProducer(ctx, req.(*RejectProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_NewContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).NewContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_NewContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).NewContact(ctx, req.(*NewContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_NewContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).NewContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_NewContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).NewContacts(ctx, req.(*NewContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_SetExternalID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExternalIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).SetExternalID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_SetExternalID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).SetExternalID(ctx, req.(*SetExternalIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_ValidateProducerNPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProducerNPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).ValidateProducerNPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_ValidateProducerNPN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).ValidateProducerNPN(ctx, req.(*ValidateProducerNPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_ValidateAgencyNPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAgencyNPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).ValidateAgencyNPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_ValidateAgencyNPN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).ValidateAgencyNPN(ctx, req.(*ValidateAgencyNPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_LookupNPNByFEIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupNPNByFEINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).LookupNPNByFEIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_LookupNPNByFEIN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).LookupNPNByFEIN(ctx, req.(*LookupNPNByFEINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_ResyncProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResyncProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).ResyncProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_ResyncProducer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).ResyncProducer(ctx, req.(*ResyncProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_ResyncAgency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResyncAgencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).ResyncAgency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_ResyncAgency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).ResyncAgency(ctx, req.(*ResyncAgencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_SyncProducerWithNIPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncProducerWithNIPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).SyncProducerWithNIPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_SyncProducerWithNIPR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).SyncProducerWithNIPR(ctx, req.(*SyncProducerWithNIPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_SyncAgencyWithNIPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAgencyWithNIPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).SyncAgencyWithNIPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_SyncAgencyWithNIPR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).SyncAgencyWithNIPR(ctx, req.(*SyncAgencyWithNIPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_StopSyncProducerWithNIPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSyncProducerWithNIPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).StopSyncProducerWithNIPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_StopSyncProducerWithNIPR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).StopSyncProducerWithNIPR(ctx, req.(*StopSyncProducerWithNIPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_StopSyncAgencyWithNIPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSyncAgencyWithNIPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).StopSyncAgencyWithNIPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProducerService_StopSyncAgencyWithNIPR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).StopSyncAgencyWithNIPR(ctx, req.(*StopSyncAgencyWithNIPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProducerService_ServiceDesc is the grpc.ServiceDesc for ProducerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProducerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "producerflow.producer.v1.ProducerService",
	HandlerType: (*ProducerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAgencyOnboardingURL",
			Handler:    _ProducerService_CreateAgencyOnboardingURL_Handler,
		},
		{
			MethodName: "NewAgency",
			Handler:    _ProducerService_NewAgency_Handler,
		},
		{
			MethodName: "NewProducer",
			Handler:    _ProducerService_NewProducer_Handler,
		},
		{
			MethodName: "NewProducers",
			Handler:    _ProducerService_NewProducers_Handler,
		},
		{
			MethodName: "GetAgencyAndProducers",
			Handler:    _ProducerService_GetAgencyAndProducers_Handler,
		},
		{
			MethodName: "GetProducer",
			Handler:    _ProducerService_GetProducer_Handler,
		},
		{
			MethodName: "GetAgencyFiles",
			Handler:    _ProducerService_GetAgencyFiles_Handler,
		},
		{
			MethodName: "UpdateProducer",
			Handler:    _ProducerService_UpdateProducer_Handler,
		},
		{
			MethodName: "ApproveProducer",
			Handler:    _ProducerService_ApproveProducer_Handler,
		},
		{
			MethodName: "RejectProducer",
			Handler:    _ProducerService_RejectProducer_Handler,
		},
		{
			MethodName: "NewContact",
			Handler:    _ProducerService_NewContact_Handler,
		},
		{
			MethodName: "NewContacts",
			Handler:    _ProducerService_NewContacts_Handler,
		},
		{
			MethodName: "SetExternalID",
			Handler:    _ProducerService_SetExternalID_Handler,
		},
		{
			MethodName: "ValidateProducerNPN",
			Handler:    _ProducerService_ValidateProducerNPN_Handler,
		},
		{
			MethodName: "ValidateAgencyNPN",
			Handler:    _ProducerService_ValidateAgencyNPN_Handler,
		},
		{
			MethodName: "LookupNPNByFEIN",
			Handler:    _ProducerService_LookupNPNByFEIN_Handler,
		},
		{
			MethodName: "ResyncProducer",
			Handler:    _ProducerService_ResyncProducer_Handler,
		},
		{
			MethodName: "ResyncAgency",
			Handler:    _ProducerService_ResyncAgency_Handler,
		},
		{
			MethodName: "SyncProducerWithNIPR",
			Handler:    _ProducerService_SyncProducerWithNIPR_Handler,
		},
		{
			MethodName: "SyncAgencyWithNIPR",
			Handler:    _ProducerService_SyncAgencyWithNIPR_Handler,
		},
		{
			MethodName: "StopSyncProducerWithNIPR",
			Handler:    _ProducerService_StopSyncProducerWithNIPR_Handler,
		},
		{
			MethodName: "StopSyncAgencyWithNIPR",
			Handler:    _ProducerService_StopSyncAgencyWithNIPR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "producerflow/producer/v1/producer.proto",
}
