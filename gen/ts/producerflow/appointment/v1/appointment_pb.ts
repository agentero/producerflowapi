// @generated by protoc-gen-es v2.6.1 with parameter "target=ts,import_extension=none"
// @generated from file producerflow/appointment/v1/appointment.proto (package producerflow.appointment.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file producerflow/appointment/v1/appointment.proto.
 */
export const file_producerflow_appointment_v1_appointment: GenFile = /*@__PURE__*/
  fileDesc("Ci1wcm9kdWNlcmZsb3cvYXBwb2ludG1lbnQvdjEvYXBwb2ludG1lbnQucHJvdG8SG3Byb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MSJVChlSZXF1ZXN0QXBwb2ludG1lbnRSZXF1ZXN0EhsKCmxpY2Vuc2VfaWQYASABKAlCB7pIBHICEAESGwoKY2Fycmllcl9pZBgCIAEoCUIHukgEcgIQASKcAQoaUmVxdWVzdEFwcG9pbnRtZW50UmVzcG9uc2USFgoOYXBwb2ludG1lbnRfaWQYASABKAkSSAoRcHJvY2Vzc2luZ19zdGF0dXMYAiABKA4yLS5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuUHJvY2Vzc2luZ1N0YXR1cxIcChRub3RfZWxpZ2libGVfcmVhc29ucxgDIAMoCSI4ChVHZXRBcHBvaW50bWVudFJlcXVlc3QSHwoOYXBwb2ludG1lbnRfaWQYASABKAlCB7pIBHICEAEiVwoWR2V0QXBwb2ludG1lbnRSZXNwb25zZRI9CgthcHBvaW50bWVudBgBIAEoCzIoLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5BcHBvaW50bWVudCK7AQoXTGlzdEFwcG9pbnRtZW50c1JlcXVlc3QSSAoRcHJvY2Vzc2luZ19zdGF0dXMYASADKA4yLS5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuUHJvY2Vzc2luZ1N0YXR1cxIfCgtwcm9kdWNlcl9pZBgCIAEoCUIIukgFcgOwAQFIABIdCglhZ2VuY3lfaWQYAyABKAlCCLpIBXIDsAEBSABCFgoNbGljZW5zZV9vd25lchIFukgCCAEicwoYTGlzdEFwcG9pbnRtZW50c1Jlc3BvbnNlEj4KDGFwcG9pbnRtZW50cxgBIAMoCzIoLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5BcHBvaW50bWVudBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiiQEKG1Rlcm1pbmF0ZUFwcG9pbnRtZW50UmVxdWVzdBIgCg5hcHBvaW50bWVudF9pZBgBIAEoCUIIukgFcgOwAQESSAoGcmVhc29uGAIgASgOMi4ucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLlRlcm1pbmF0aW9uUmVhc29uQgi6SAWCAQIQASIvChxUZXJtaW5hdGVBcHBvaW50bWVudFJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgicQobTGlzdEVsaWdpYmxlTGljZW5zZXNSZXF1ZXN0Eh8KC3Byb2R1Y2VyX2lkGAEgASgJQgi6SAVyA7ABAUgAEh0KCWFnZW5jeV9pZBgCIAEoCUIIukgFcgOwAQFIAEISCglhcHBsaWNhbnQSBbpIAggBIlYKHExpc3RFbGlnaWJsZUxpY2Vuc2VzUmVzcG9uc2USNgoIbGljZW5zZXMYASADKAsyJC5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuTGljZW5zZSI4ChlHZXRBcHBvaW50bWVudEZlZXNSZXF1ZXN0EhsKCmxpY2Vuc2VfaWQYASABKAlCB7pIBHICEAEiMgoaR2V0QXBwb2ludG1lbnRGZWVzUmVzcG9uc2USFAoMZmVlX2luX2NlbnRzGAEgASgDIjgKGUdldFRlcm1pbmF0aW9uRmVlc1JlcXVlc3QSGwoKbGljZW5zZV9pZBgBIAEoCUIHukgEcgIQASIyChpHZXRUZXJtaW5hdGlvbkZlZXNSZXNwb25zZRIUCgxmZWVfaW5fY2VudHMYASABKAMiHwodR2V0QXBwb2ludGFibGVDYXJyaWVyc1JlcXVlc3QiWAoeR2V0QXBwb2ludGFibGVDYXJyaWVyc1Jlc3BvbnNlEjYKCGNhcnJpZXJzGAEgAygLMiQucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkNhcnJpZXIiRgoHQ2FycmllchISCgpjYXJyaWVyX2lkGAEgASgJEgwKBG5hbWUYAiABKAkSCwoDbnBuGAMgASgJEgwKBGZlaW4YBCABKAkikAQKC0FwcG9pbnRtZW50EhYKDmFwcG9pbnRtZW50X2lkGAEgASgJEjUKB2xpY2Vuc2UYAiABKAsyJC5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuTGljZW5zZRIMCgRuYW1lGAMgASgJEhEKCWFnZW5jeV9pZBgEIAEoCRIYCgtwcm9kdWNlcl9pZBgFIAEoCUgAiAEBEg8KB2NhcnJpZXIYBiABKAkSRgoQYXBwb2ludG1lbnRfdHlwZRgHIAEoDjIsLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5BcHBvaW50bWVudFR5cGUSSAoRcHJvY2Vzc2luZ19zdGF0dXMYCCABKA4yLS5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuUHJvY2Vzc2luZ1N0YXR1cxIQCghjb21tZW50cxgJIAEoCRIyCg5lZmZlY3RpdmVfZGF0ZRgKIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOQoQdGVybWluYXRpb25fZGF0ZRgLIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAYgBARIuCgp1cGRhdGVkX2F0GAwgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIOCgxfcHJvZHVjZXJfaWRCEwoRX3Rlcm1pbmF0aW9uX2RhdGUirAEKB0xpY2Vuc2USEgoKbGljZW5zZV9pZBgBIAEoCRIWCg5saWNlbnNlX251bWJlchgCIAEoCRIfCgtwcm9kdWNlcl9pZBgDIAEoCUIIukgFcgOwAQFIABIdCglhZ2VuY3lfaWQYBCABKAlCCLpIBXIDsAEBSAASDQoFc3RhdGUYBSABKAkSFQoNbGljZW5zZV9jbGFzcxgGIAEoCUIPCg1saWNlbnNlX293bmVyIjgKHUxpc3RUZXJtaW5hdGlvblJlYXNvbnNSZXF1ZXN0EhcKBXN0YXRlGAEgASgJQgi6SAVyA5gBAiJtCh5MaXN0VGVybWluYXRpb25SZWFzb25zUmVzcG9uc2USSwoTdGVybWluYXRpb25fcmVhc29ucxgBIAMoDjIuLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5UZXJtaW5hdGlvblJlYXNvbiriAQoQUHJvY2Vzc2luZ1N0YXR1cxIhCh1QUk9DRVNTSU5HX1NUQVRVU19VTlNQRUNJRklFRBAAEiEKHVBST0NFU1NJTkdfU1RBVFVTX0lOX1BST0dSRVNTEAESHwobUFJPQ0VTU0lOR19TVEFUVVNfQVBQT0lOVEVEEAISIAocUFJPQ0VTU0lOR19TVEFUVVNfVEVSTUlOQVRFRBADEh4KGlBST0NFU1NJTkdfU1RBVFVTX1JFSkVDVEVEEAQSJQohUFJPQ0VTU0lOR19TVEFUVVNfTUlTU0lOR19MSUNFTlNFEAUqlAEKD0FwcG9pbnRtZW50VHlwZRIgChxBUFBPSU5UTUVOVF9UWVBFX1VOU1BFQ0lGSUVEEAASHQoZQVBQT0lOVE1FTlRfVFlQRV9SRUdJU1RSWRABEh0KGUFQUE9JTlRNRU5UX1RZUEVfVVBfRlJPTlQQAhIhCh1BUFBPSU5UTUVOVF9UWVBFX0pVU1RfSU5fVElNRRADKsEFChFUZXJtaW5hdGlvblJlYXNvbhIiCh5URVJNSU5BVElPTl9SRUFTT05fVU5TUEVDSUZJRUQQABIsCihURVJNSU5BVElPTl9SRUFTT05fVk9MVU5UQVJZX1RFUk1JTkFUSU9OEAESLAooVEVSTUlOQVRJT05fUkVBU09OX0lOQURFUVVBVEVfUFJPRFVDVElPThACEjEKLVRFUk1JTkFUSU9OX1JFQVNPTl9DQU5DRUxMRURfQllfR0VORVJBTF9BR0VOVBADEhwKGFRFUk1JTkFUSU9OX1JFQVNPTl9ERUFUSBAEEjUKMVRFUk1JTkFUSU9OX1JFQVNPTl9DT01QQU5ZX0RFRlVOQ1RfT1JfTElRVUlEQVRJT04QBRIrCidURVJNSU5BVElPTl9SRUFTT05fQ09NUEFOWV9JTkRFQlRFRE5FU1MQBhIwCixURVJNSU5BVElPTl9SRUFTT05fUE9PUl9QT0xJQ1lIT0xERVJfU0VSVklDRRAHEiIKHlRFUk1JTkFUSU9OX1JFQVNPTl9BR0VOVF9NT1ZFRBAIEikKJVRFUk1JTkFUSU9OX1JFQVNPTl9BUFBPSU5URURfSU5fRVJST1IQCRIgChxURVJNSU5BVElPTl9SRUFTT05fQ0FOQ0VMTEVEEAoSKgomVEVSTUlOQVRJT05fUkVBU09OX0NBTkNFTExFRF9GT1JfQ0FVU0UQCxIlCiFURVJNSU5BVElPTl9SRUFTT05fQ09NUEFOWV9NRVJHRVIQDBIeChpURVJNSU5BVElPTl9SRUFTT05fUkVWT0tFRBANEi8KK1RFUk1JTkFUSU9OX1JFQVNPTl9TVVNQRU5ERURfRk9SX0NPTVBMSUFOQ0UQDhIwCixURVJNSU5BVElPTl9SRUFTT05fUkVRVUVTVF9SRUdVTEFUT1JZX1JFVklFVxAPMuwJChJBcHBvaW50bWVudFNlcnZpY2USeQoOR2V0QXBwb2ludG1lbnQSMi5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuR2V0QXBwb2ludG1lbnRSZXF1ZXN0GjMucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldEFwcG9pbnRtZW50UmVzcG9uc2UShQEKEkdldEFwcG9pbnRtZW50RmVlcxI2LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5HZXRBcHBvaW50bWVudEZlZXNSZXF1ZXN0GjcucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldEFwcG9pbnRtZW50RmVlc1Jlc3BvbnNlEpEBChZHZXRBcHBvaW50YWJsZUNhcnJpZXJzEjoucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldEFwcG9pbnRhYmxlQ2FycmllcnNSZXF1ZXN0GjsucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldEFwcG9pbnRhYmxlQ2FycmllcnNSZXNwb25zZRKFAQoSR2V0VGVybWluYXRpb25GZWVzEjYucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldFRlcm1pbmF0aW9uRmVlc1JlcXVlc3QaNy5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuR2V0VGVybWluYXRpb25GZWVzUmVzcG9uc2USfwoQTGlzdEFwcG9pbnRtZW50cxI0LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5MaXN0QXBwb2ludG1lbnRzUmVxdWVzdBo1LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5MaXN0QXBwb2ludG1lbnRzUmVzcG9uc2USiwEKFExpc3RFbGlnaWJsZUxpY2Vuc2VzEjgucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkxpc3RFbGlnaWJsZUxpY2Vuc2VzUmVxdWVzdBo5LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5MaXN0RWxpZ2libGVMaWNlbnNlc1Jlc3BvbnNlEoUBChJSZXF1ZXN0QXBwb2ludG1lbnQSNi5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuUmVxdWVzdEFwcG9pbnRtZW50UmVxdWVzdBo3LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5SZXF1ZXN0QXBwb2ludG1lbnRSZXNwb25zZRKLAQoUVGVybWluYXRlQXBwb2ludG1lbnQSOC5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuVGVybWluYXRlQXBwb2ludG1lbnRSZXF1ZXN0GjkucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLlRlcm1pbmF0ZUFwcG9pbnRtZW50UmVzcG9uc2USkQEKFkxpc3RUZXJtaW5hdGlvblJlYXNvbnMSOi5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuTGlzdFRlcm1pbmF0aW9uUmVhc29uc1JlcXVlc3QaOy5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuTGlzdFRlcm1pbmF0aW9uUmVhc29uc1Jlc3BvbnNlQpsCCh9jb20ucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxQhBBcHBvaW50bWVudFByb3RvUAFaWGdpdGh1Yi5jb20vcHJvZHVjZXJmbG93L3Byb2R1Y2VyZmxvd2FwaS9nZW4vZ28vcHJvZHVjZXJmbG93L2FwcG9pbnRtZW50L3YxO2FwcG9pbnRtZW50djGiAgNQQViqAhtQcm9kdWNlcmZsb3cuQXBwb2ludG1lbnQuVjHKAhtQcm9kdWNlcmZsb3dcQXBwb2ludG1lbnRcVjHiAidQcm9kdWNlcmZsb3dcQXBwb2ludG1lbnRcVjFcR1BCTWV0YWRhdGHqAh1Qcm9kdWNlcmZsb3c6OkFwcG9pbnRtZW50OjpWMWIGcHJvdG8z", [file_buf_validate_validate, file_google_protobuf_timestamp]);

/**
 * Request to create a new appointment.
 *
 * @generated from message producerflow.appointment.v1.RequestAppointmentRequest
 */
export type RequestAppointmentRequest = Message<"producerflow.appointment.v1.RequestAppointmentRequest"> & {
  /**
   * Required. The ID of the license to appoint.
   *
   * @generated from field: string license_id = 1;
   */
  licenseId: string;

  /**
   * Required. The ID of the carrier to appoint the license with.
   *
   * @generated from field: string carrier_id = 2;
   */
  carrierId: string;
};

/**
 * Describes the message producerflow.appointment.v1.RequestAppointmentRequest.
 * Use `create(RequestAppointmentRequestSchema)` to create a new message.
 */
export const RequestAppointmentRequestSchema: GenMessage<RequestAppointmentRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 0);

/**
 * @generated from message producerflow.appointment.v1.RequestAppointmentResponse
 */
export type RequestAppointmentResponse = Message<"producerflow.appointment.v1.RequestAppointmentResponse"> & {
  /**
   * The ID of the created appointment.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;

  /**
   * Processing status of the appointment request.
   *
   * @generated from field: producerflow.appointment.v1.ProcessingStatus processing_status = 2;
   */
  processingStatus: ProcessingStatus;

  /**
   * If the appointment was rejected or ineligible, these reasons explain why.
   *
   * @generated from field: repeated string not_eligible_reasons = 3;
   */
  notEligibleReasons: string[];
};

/**
 * Describes the message producerflow.appointment.v1.RequestAppointmentResponse.
 * Use `create(RequestAppointmentResponseSchema)` to create a new message.
 */
export const RequestAppointmentResponseSchema: GenMessage<RequestAppointmentResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 1);

/**
 * Request to retrieve an appointment by ID.
 *
 * @generated from message producerflow.appointment.v1.GetAppointmentRequest
 */
export type GetAppointmentRequest = Message<"producerflow.appointment.v1.GetAppointmentRequest"> & {
  /**
   * Required. The ID of the appointment to retrieve.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentRequest.
 * Use `create(GetAppointmentRequestSchema)` to create a new message.
 */
export const GetAppointmentRequestSchema: GenMessage<GetAppointmentRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 2);

/**
 * @generated from message producerflow.appointment.v1.GetAppointmentResponse
 */
export type GetAppointmentResponse = Message<"producerflow.appointment.v1.GetAppointmentResponse"> & {
  /**
   * The appointment details.
   *
   * @generated from field: producerflow.appointment.v1.Appointment appointment = 1;
   */
  appointment?: Appointment;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentResponse.
 * Use `create(GetAppointmentResponseSchema)` to create a new message.
 */
export const GetAppointmentResponseSchema: GenMessage<GetAppointmentResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 3);

/**
 * Request to list appointments, optionally filtered by processing status.
 *
 * @generated from message producerflow.appointment.v1.ListAppointmentsRequest
 */
export type ListAppointmentsRequest = Message<"producerflow.appointment.v1.ListAppointmentsRequest"> & {
  /**
   * Optional. Filter results by processing status.
   *
   * @generated from field: repeated producerflow.appointment.v1.ProcessingStatus processing_status = 1;
   */
  processingStatus: ProcessingStatus[];

  /**
   * Optional. Filter results by license owner.
   *
   * @generated from oneof producerflow.appointment.v1.ListAppointmentsRequest.license_owner
   */
  licenseOwner: {
    /**
     * @generated from field: string producer_id = 2;
     */
    value: string;
    case: "producerId";
  } | {
    /**
     * @generated from field: string agency_id = 3;
     */
    value: string;
    case: "agencyId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message producerflow.appointment.v1.ListAppointmentsRequest.
 * Use `create(ListAppointmentsRequestSchema)` to create a new message.
 */
export const ListAppointmentsRequestSchema: GenMessage<ListAppointmentsRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 4);

/**
 * @generated from message producerflow.appointment.v1.ListAppointmentsResponse
 */
export type ListAppointmentsResponse = Message<"producerflow.appointment.v1.ListAppointmentsResponse"> & {
  /**
   * List of appointments.
   *
   * @generated from field: repeated producerflow.appointment.v1.Appointment appointments = 1;
   */
  appointments: Appointment[];

  /**
   * Token for fetching the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message producerflow.appointment.v1.ListAppointmentsResponse.
 * Use `create(ListAppointmentsResponseSchema)` to create a new message.
 */
export const ListAppointmentsResponseSchema: GenMessage<ListAppointmentsResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 5);

/**
 * Request to terminate an appointment.
 *
 * @generated from message producerflow.appointment.v1.TerminateAppointmentRequest
 */
export type TerminateAppointmentRequest = Message<"producerflow.appointment.v1.TerminateAppointmentRequest"> & {
  /**
   * ID of the appointment to terminate.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;

  /**
   * Reason for termination. This must be a valid termination reason
   * for the state where the license is issued. Call ListTerminationReasons
   * first to get the list of valid reasons for the specific state.
   *
   * @generated from field: producerflow.appointment.v1.TerminationReason reason = 2;
   */
  reason: TerminationReason;
};

/**
 * Describes the message producerflow.appointment.v1.TerminateAppointmentRequest.
 * Use `create(TerminateAppointmentRequestSchema)` to create a new message.
 */
export const TerminateAppointmentRequestSchema: GenMessage<TerminateAppointmentRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 6);

/**
 * @generated from message producerflow.appointment.v1.TerminateAppointmentResponse
 */
export type TerminateAppointmentResponse = Message<"producerflow.appointment.v1.TerminateAppointmentResponse"> & {
  /**
   * Indicates whether the termination request was successfully submitted to NIPR.
   * This does not indicate that the appointment has been terminated, only that
   * the request has been accepted for processing. The actual termination will
   * be processed asynchronously by NIPR, and you will be notified via webhook
   * when the process completes.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message producerflow.appointment.v1.TerminateAppointmentResponse.
 * Use `create(TerminateAppointmentResponseSchema)` to create a new message.
 */
export const TerminateAppointmentResponseSchema: GenMessage<TerminateAppointmentResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 7);

/**
 * Request to retrieve a list of licenses that are eligible to be appointed.
 *
 * @generated from message producerflow.appointment.v1.ListEligibleLicensesRequest
 */
export type ListEligibleLicensesRequest = Message<"producerflow.appointment.v1.ListEligibleLicensesRequest"> & {
  /**
   * The applicant is the producer or agency with licenses eligible to be appointed.
   *
   * @generated from oneof producerflow.appointment.v1.ListEligibleLicensesRequest.applicant
   */
  applicant: {
    /**
     * @generated from field: string producer_id = 1;
     */
    value: string;
    case: "producerId";
  } | {
    /**
     * @generated from field: string agency_id = 2;
     */
    value: string;
    case: "agencyId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message producerflow.appointment.v1.ListEligibleLicensesRequest.
 * Use `create(ListEligibleLicensesRequestSchema)` to create a new message.
 */
export const ListEligibleLicensesRequestSchema: GenMessage<ListEligibleLicensesRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 8);

/**
 * @generated from message producerflow.appointment.v1.ListEligibleLicensesResponse
 */
export type ListEligibleLicensesResponse = Message<"producerflow.appointment.v1.ListEligibleLicensesResponse"> & {
  /**
   * List of licenses that are eligible to be appointed.
   *
   * @generated from field: repeated producerflow.appointment.v1.License licenses = 1;
   */
  licenses: License[];
};

/**
 * Describes the message producerflow.appointment.v1.ListEligibleLicensesResponse.
 * Use `create(ListEligibleLicensesResponseSchema)` to create a new message.
 */
export const ListEligibleLicensesResponseSchema: GenMessage<ListEligibleLicensesResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 9);

/**
 * Request to get appointment fees.
 *
 * @generated from message producerflow.appointment.v1.GetAppointmentFeesRequest
 */
export type GetAppointmentFeesRequest = Message<"producerflow.appointment.v1.GetAppointmentFeesRequest"> & {
  /**
   * Required. The ID of the license to get the appointment fee for.
   *
   * @generated from field: string license_id = 1;
   */
  licenseId: string;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentFeesRequest.
 * Use `create(GetAppointmentFeesRequestSchema)` to create a new message.
 */
export const GetAppointmentFeesRequestSchema: GenMessage<GetAppointmentFeesRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 10);

/**
 * @generated from message producerflow.appointment.v1.GetAppointmentFeesResponse
 */
export type GetAppointmentFeesResponse = Message<"producerflow.appointment.v1.GetAppointmentFeesResponse"> & {
  /**
   * Total fee for the appointment in cents.
   *
   * @generated from field: int64 fee_in_cents = 1;
   */
  feeInCents: bigint;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentFeesResponse.
 * Use `create(GetAppointmentFeesResponseSchema)` to create a new message.
 */
export const GetAppointmentFeesResponseSchema: GenMessage<GetAppointmentFeesResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 11);

/**
 * Request to get termination fees.
 *
 * @generated from message producerflow.appointment.v1.GetTerminationFeesRequest
 */
export type GetTerminationFeesRequest = Message<"producerflow.appointment.v1.GetTerminationFeesRequest"> & {
  /**
   * Required. The ID of the license to get the termination fee for.
   *
   * @generated from field: string license_id = 1;
   */
  licenseId: string;
};

/**
 * Describes the message producerflow.appointment.v1.GetTerminationFeesRequest.
 * Use `create(GetTerminationFeesRequestSchema)` to create a new message.
 */
export const GetTerminationFeesRequestSchema: GenMessage<GetTerminationFeesRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 12);

/**
 * @generated from message producerflow.appointment.v1.GetTerminationFeesResponse
 */
export type GetTerminationFeesResponse = Message<"producerflow.appointment.v1.GetTerminationFeesResponse"> & {
  /**
   * Total fee for the termination in cents.
   *
   * @generated from field: int64 fee_in_cents = 1;
   */
  feeInCents: bigint;
};

/**
 * Describes the message producerflow.appointment.v1.GetTerminationFeesResponse.
 * Use `create(GetTerminationFeesResponseSchema)` to create a new message.
 */
export const GetTerminationFeesResponseSchema: GenMessage<GetTerminationFeesResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 13);

/**
 * @generated from message producerflow.appointment.v1.GetAppointableCarriersRequest
 */
export type GetAppointableCarriersRequest = Message<"producerflow.appointment.v1.GetAppointableCarriersRequest"> & {
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointableCarriersRequest.
 * Use `create(GetAppointableCarriersRequestSchema)` to create a new message.
 */
export const GetAppointableCarriersRequestSchema: GenMessage<GetAppointableCarriersRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 14);

/**
 * @generated from message producerflow.appointment.v1.GetAppointableCarriersResponse
 */
export type GetAppointableCarriersResponse = Message<"producerflow.appointment.v1.GetAppointableCarriersResponse"> & {
  /**
   * The list of carriers that are available to be appointed.
   *
   * @generated from field: repeated producerflow.appointment.v1.Carrier carriers = 1;
   */
  carriers: Carrier[];
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointableCarriersResponse.
 * Use `create(GetAppointableCarriersResponseSchema)` to create a new message.
 */
export const GetAppointableCarriersResponseSchema: GenMessage<GetAppointableCarriersResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 15);

/**
 * Represents a carrier that is available to be appointed.
 *
 * @generated from message producerflow.appointment.v1.Carrier
 */
export type Carrier = Message<"producerflow.appointment.v1.Carrier"> & {
  /**
   * The ID of the carrier.
   *
   * @generated from field: string carrier_id = 1;
   */
  carrierId: string;

  /**
   * The name of the carrier.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The NPN of the carrier.
   *
   * @generated from field: string npn = 3;
   */
  npn: string;

  /**
   * The state of the carrier.
   *
   * @generated from field: string fein = 4;
   */
  fein: string;
};

/**
 * Describes the message producerflow.appointment.v1.Carrier.
 * Use `create(CarrierSchema)` to create a new message.
 */
export const CarrierSchema: GenMessage<Carrier> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 16);

/**
 * Represents an appointment for a license.
 *
 * @generated from message producerflow.appointment.v1.Appointment
 */
export type Appointment = Message<"producerflow.appointment.v1.Appointment"> & {
  /**
   * Unique identifier for the appointment.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;

  /**
   * Information about the license being appointed.
   *
   * @generated from field: producerflow.appointment.v1.License license = 2;
   */
  license?: License;

  /**
   * The license number of the license being appointed.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * The id of the agency that is appointed.
   *
   * @generated from field: string agency_id = 4;
   */
  agencyId: string;

  /**
   * The id of the producer that is appointed, if any.
   *
   * @generated from field: optional string producer_id = 5;
   */
  producerId?: string;

  /**
   * The name of the carrier to which the license is appointed.
   *
   * @generated from field: string carrier = 6;
   */
  carrier: string;

  /**
   * Type of appointment (e.g., up-front, registry).
   *
   * @generated from field: producerflow.appointment.v1.AppointmentType appointment_type = 7;
   */
  appointmentType: AppointmentType;

  /**
   * Processing status of the appointment (e.g., in progress, appointed).
   *
   * @generated from field: producerflow.appointment.v1.ProcessingStatus processing_status = 8;
   */
  processingStatus: ProcessingStatus;

  /**
   * Optional comments or notes related to the appointment.
   *
   * @generated from field: string comments = 9;
   */
  comments: string;

  /**
   * Timestamp of the last update to the appointment.
   *
   * @generated from field: google.protobuf.Timestamp effective_date = 10;
   */
  effectiveDate?: Timestamp;

  /**
   * Timestamp of the termination of the appointment.
   *
   * @generated from field: optional google.protobuf.Timestamp termination_date = 11;
   */
  terminationDate?: Timestamp;

  /**
   * Timestamp of the last update to the appointment.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 12;
   */
  updatedAt?: Timestamp;
};

/**
 * Describes the message producerflow.appointment.v1.Appointment.
 * Use `create(AppointmentSchema)` to create a new message.
 */
export const AppointmentSchema: GenMessage<Appointment> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 17);

/**
 * @generated from message producerflow.appointment.v1.License
 */
export type License = Message<"producerflow.appointment.v1.License"> & {
  /**
   * The ID of the license.
   *
   * @generated from field: string license_id = 1;
   */
  licenseId: string;

  /**
   * The license number.
   *
   * @generated from field: string license_number = 2;
   */
  licenseNumber: string;

  /**
   * The owner of the license, it can be an agency or a producer.
   *
   * @generated from oneof producerflow.appointment.v1.License.license_owner
   */
  licenseOwner: {
    /**
     * @generated from field: string producer_id = 3;
     */
    value: string;
    case: "producerId";
  } | {
    /**
     * @generated from field: string agency_id = 4;
     */
    value: string;
    case: "agencyId";
  } | { case: undefined; value?: undefined };

  /**
   * The two-letter state code of the license.
   *
   * @generated from field: string state = 5;
   */
  state: string;

  /**
   * The license class.
   *
   * @generated from field: string license_class = 6;
   */
  licenseClass: string;
};

/**
 * Describes the message producerflow.appointment.v1.License.
 * Use `create(LicenseSchema)` to create a new message.
 */
export const LicenseSchema: GenMessage<License> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 18);

/**
 * @generated from message producerflow.appointment.v1.ListTerminationReasonsRequest
 */
export type ListTerminationReasonsRequest = Message<"producerflow.appointment.v1.ListTerminationReasonsRequest"> & {
  /**
   * Required. The two-letter state code of the license for which you want to retrieve
   * valid termination reasons. Different states may have different sets of valid
   * termination reasons accepted by NIPR.
   *
   * @generated from field: string state = 1;
   */
  state: string;
};

/**
 * Describes the message producerflow.appointment.v1.ListTerminationReasonsRequest.
 * Use `create(ListTerminationReasonsRequestSchema)` to create a new message.
 */
export const ListTerminationReasonsRequestSchema: GenMessage<ListTerminationReasonsRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 19);

/**
 * @generated from message producerflow.appointment.v1.ListTerminationReasonsResponse
 */
export type ListTerminationReasonsResponse = Message<"producerflow.appointment.v1.ListTerminationReasonsResponse"> & {
  /**
   * The list of valid termination reasons for the specified state.
   * These reasons can be used when calling TerminateAppointment for licenses
   * issued in this state.
   *
   * @generated from field: repeated producerflow.appointment.v1.TerminationReason termination_reasons = 1;
   */
  terminationReasons: TerminationReason[];
};

/**
 * Describes the message producerflow.appointment.v1.ListTerminationReasonsResponse.
 * Use `create(ListTerminationReasonsResponseSchema)` to create a new message.
 */
export const ListTerminationReasonsResponseSchema: GenMessage<ListTerminationReasonsResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 20);

/**
 * Processing status of the appointment.
 *
 * @generated from enum producerflow.appointment.v1.ProcessingStatus
 */
export enum ProcessingStatus {
  /**
   * @generated from enum value: PROCESSING_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROCESSING_STATUS_IN_PROGRESS = 1;
   */
  IN_PROGRESS = 1,

  /**
   * @generated from enum value: PROCESSING_STATUS_APPOINTED = 2;
   */
  APPOINTED = 2,

  /**
   * @generated from enum value: PROCESSING_STATUS_TERMINATED = 3;
   */
  TERMINATED = 3,

  /**
   * @generated from enum value: PROCESSING_STATUS_REJECTED = 4;
   */
  REJECTED = 4,

  /**
   * @generated from enum value: PROCESSING_STATUS_MISSING_LICENSE = 5;
   */
  MISSING_LICENSE = 5,
}

/**
 * Describes the enum producerflow.appointment.v1.ProcessingStatus.
 */
export const ProcessingStatusSchema: GenEnum<ProcessingStatus> = /*@__PURE__*/
  enumDesc(file_producerflow_appointment_v1_appointment, 0);

/**
 * Type of appointment.
 *
 * @generated from enum producerflow.appointment.v1.AppointmentType
 */
export enum AppointmentType {
  /**
   * @generated from enum value: APPOINTMENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: APPOINTMENT_TYPE_REGISTRY = 1;
   */
  REGISTRY = 1,

  /**
   * @generated from enum value: APPOINTMENT_TYPE_UP_FRONT = 2;
   */
  UP_FRONT = 2,

  /**
   * @generated from enum value: APPOINTMENT_TYPE_JUST_IN_TIME = 3;
   */
  JUST_IN_TIME = 3,
}

/**
 * Describes the enum producerflow.appointment.v1.AppointmentType.
 */
export const AppointmentTypeSchema: GenEnum<AppointmentType> = /*@__PURE__*/
  enumDesc(file_producerflow_appointment_v1_appointment, 1);

/**
 * TerminationReason represents the reason for the termination of an appointment.
 * These reasons correspond to NIPR's valid termination codes and vary by state.
 * Use ListTerminationReasons to get the valid reasons for a specific state
 * before terminating an appointment.
 *
 * Reference: https://pdb.nipr.com/Gateway/ValidTerms
 *
 * @generated from enum producerflow.appointment.v1.TerminationReason
 */
export enum TerminationReason {
  /**
   * @generated from enum value: TERMINATION_REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TERMINATION_REASON_VOLUNTARY_TERMINATION = 1;
   */
  VOLUNTARY_TERMINATION = 1,

  /**
   * @generated from enum value: TERMINATION_REASON_INADEQUATE_PRODUCTION = 2;
   */
  INADEQUATE_PRODUCTION = 2,

  /**
   * @generated from enum value: TERMINATION_REASON_CANCELLED_BY_GENERAL_AGENT = 3;
   */
  CANCELLED_BY_GENERAL_AGENT = 3,

  /**
   * @generated from enum value: TERMINATION_REASON_DEATH = 4;
   */
  DEATH = 4,

  /**
   * @generated from enum value: TERMINATION_REASON_COMPANY_DEFUNCT_OR_LIQUIDATION = 5;
   */
  COMPANY_DEFUNCT_OR_LIQUIDATION = 5,

  /**
   * @generated from enum value: TERMINATION_REASON_COMPANY_INDEBTEDNESS = 6;
   */
  COMPANY_INDEBTEDNESS = 6,

  /**
   * @generated from enum value: TERMINATION_REASON_POOR_POLICYHOLDER_SERVICE = 7;
   */
  POOR_POLICYHOLDER_SERVICE = 7,

  /**
   * @generated from enum value: TERMINATION_REASON_AGENT_MOVED = 8;
   */
  AGENT_MOVED = 8,

  /**
   * @generated from enum value: TERMINATION_REASON_APPOINTED_IN_ERROR = 9;
   */
  APPOINTED_IN_ERROR = 9,

  /**
   * @generated from enum value: TERMINATION_REASON_CANCELLED = 10;
   */
  CANCELLED = 10,

  /**
   * @generated from enum value: TERMINATION_REASON_CANCELLED_FOR_CAUSE = 11;
   */
  CANCELLED_FOR_CAUSE = 11,

  /**
   * @generated from enum value: TERMINATION_REASON_COMPANY_MERGER = 12;
   */
  COMPANY_MERGER = 12,

  /**
   * @generated from enum value: TERMINATION_REASON_REVOKED = 13;
   */
  REVOKED = 13,

  /**
   * @generated from enum value: TERMINATION_REASON_SUSPENDED_FOR_COMPLIANCE = 14;
   */
  SUSPENDED_FOR_COMPLIANCE = 14,

  /**
   * @generated from enum value: TERMINATION_REASON_REQUEST_REGULATORY_REVIEW = 15;
   */
  REQUEST_REGULATORY_REVIEW = 15,
}

/**
 * Describes the enum producerflow.appointment.v1.TerminationReason.
 */
export const TerminationReasonSchema: GenEnum<TerminationReason> = /*@__PURE__*/
  enumDesc(file_producerflow_appointment_v1_appointment, 2);

/**
 * AppointmentService manages license appointments through NIPR.
 *
 * The appointment flow in NIPR is as follows:
 * 1. A new appointment (or termination) is requested for a license number.
 * 2. Some time later, NIPR processes the request and returns the final result.
 *
 * Since NIPR does not return results immediately, RequestAppointment and TerminateAppointment
 * RPCs will return a processing status of IN_PROGRESS if the request is accepted by NIPR.
 * When the appointment is finally processed by NIPR, ProducerFlow will notify via a webhook of
 * the final result. Also, any call from this point on to ListAppointments or GetAppointment will
 * also return the final result.
 *
 * Any call to this service must be authenticated using an API key in the request headers. The API key
 * can be found in the ProducerFlow API key section of the ProducerFlow UI and it identifies the tenant
 * that is making the request.
 *
 * @generated from service producerflow.appointment.v1.AppointmentService
 */
export const AppointmentService: GenService<{
  /**
   * Retrieves the details of an appointment by its ID.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetAppointment
   */
  getAppointment: {
    methodKind: "unary";
    input: typeof GetAppointmentRequestSchema;
    output: typeof GetAppointmentResponseSchema;
  },
  /**
   * Retrieves the total fees associated with requesting an appointment for the given license.
   * Fee amounts are represented as integer values in cents. E.g. $10.34 is sent as 1034.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetAppointmentFees
   */
  getAppointmentFees: {
    methodKind: "unary";
    input: typeof GetAppointmentFeesRequestSchema;
    output: typeof GetAppointmentFeesResponseSchema;
  },
  /**
   * Retrieves the carriers that are available to appoint licenses for the tenant.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetAppointableCarriers
   */
  getAppointableCarriers: {
    methodKind: "unary";
    input: typeof GetAppointableCarriersRequestSchema;
    output: typeof GetAppointableCarriersResponseSchema;
  },
  /**
   * Retrieves the total fees associated with terminating an appointment for the given license.
   * Fee amounts are represented as integer values in cents. E.g. $10.34 is sent as 1034.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetTerminationFees
   */
  getTerminationFees: {
    methodKind: "unary";
    input: typeof GetTerminationFeesRequestSchema;
    output: typeof GetTerminationFeesResponseSchema;
  },
  /**
   * Lists appointments for the tenant, optionally filtered by processing status.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.ListAppointments
   */
  listAppointments: {
    methodKind: "unary";
    input: typeof ListAppointmentsRequestSchema;
    output: typeof ListAppointmentsResponseSchema;
  },
  /**
   * Returns a list of licenses that are eligible to be appointed.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.ListEligibleLicenses
   */
  listEligibleLicenses: {
    methodKind: "unary";
    input: typeof ListEligibleLicensesRequestSchema;
    output: typeof ListEligibleLicensesResponseSchema;
  },
  /**
   * Requests a new appointment for a license that is eligible to be appointed. The simpler way
   * to do this is to call ListEligibleLicenses to get a list of licenses that are eligible to be
   * appointed. Then, call RequestAppointment for the licenses in the list that you want to appoint.
   *
   * If the request is accepted by NIPR, the appointment will have IN_PROGRESS processing status.
   * If rejected, it will have REJECTED status and reasons will be provided in not_eligible_reasons.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.RequestAppointment
   */
  requestAppointment: {
    methodKind: "unary";
    input: typeof RequestAppointmentRequestSchema;
    output: typeof RequestAppointmentResponseSchema;
  },
  /**
   * Terminates an existing appointment, permanently ending the relationship between
   * the license holder and the carrier.
   *
   * Before calling this method, you must:
   * 1. Ensure the appointment exists and is in APPOINTED status
   * 2. Call ListTerminationReasons to get valid termination reasons for the license's state
   * 3. Select an appropriate termination reason from the state-specific list
   *
   * The termination process works as follows:
   * - The request is submitted to NIPR for processing
   * - Once NIPR completes processing, the status becomes TERMINATED
   * - If rejected by NIPR, the appointment remains in its current status
   *
   * Important considerations:
   * - Termination is permanent and cannot be undone
   * - Termination reasons must be valid for the specific state where the license is issued
   * - Some terminations may incur fees (check GetTerminationFees first)
   * - You will receive webhook notifications when the termination is processed by NIPR
   *
   * The response indicates whether the termination request was successfully submitted,
   * not whether the actual termination was completed (since NIPR processes asynchronously).
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.TerminateAppointment
   */
  terminateAppointment: {
    methodKind: "unary";
    input: typeof TerminateAppointmentRequestSchema;
    output: typeof TerminateAppointmentResponseSchema;
  },
  /**
   * Lists the valid termination reasons for appointments in a specific state.
   *
   * When terminating an appointment, you must provide a valid termination reason that is
   * accepted by NIPR for the state where the license is issued. Termination reasons vary
   * by state, so you should call this method first to retrieve the list of valid reasons
   * before calling TerminateAppointment.
   *
   * The termination reasons returned are based on NIPR's valid termination codes for the
   * specified state. Each reason corresponds to a specific business scenario for why an
   * appointment might be terminated (e.g., voluntary termination, inadequate production,
   * company merger, etc.).
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.ListTerminationReasons
   */
  listTerminationReasons: {
    methodKind: "unary";
    input: typeof ListTerminationReasonsRequestSchema;
    output: typeof ListTerminationReasonsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_producerflow_appointment_v1_appointment, 0);

