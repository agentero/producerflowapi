// @generated by protoc-gen-es v2.5.2 with parameter "target=ts,import_extension=none"
// @generated from file producerflow/appointment/v1/appointment.proto (package producerflow.appointment.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file producerflow/appointment/v1/appointment.proto.
 */
export const file_producerflow_appointment_v1_appointment: GenFile = /*@__PURE__*/
  fileDesc("Ci1wcm9kdWNlcmZsb3cvYXBwb2ludG1lbnQvdjEvYXBwb2ludG1lbnQucHJvdG8SG3Byb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MSI8ChlSZXF1ZXN0QXBwb2ludG1lbnRSZXF1ZXN0Eh8KDmxpY2Vuc2VfbnVtYmVyGAEgASgJQge6SARyAhABIpwBChpSZXF1ZXN0QXBwb2ludG1lbnRSZXNwb25zZRIWCg5hcHBvaW50bWVudF9pZBgBIAEoCRJIChFwcm9jZXNzaW5nX3N0YXR1cxgCIAEoDjItLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5Qcm9jZXNzaW5nU3RhdHVzEhwKFG5vdF9lbGlnaWJsZV9yZWFzb25zGAMgAygJIjgKFUdldEFwcG9pbnRtZW50UmVxdWVzdBIfCg5hcHBvaW50bWVudF9pZBgBIAEoCUIHukgEcgIQASJXChZHZXRBcHBvaW50bWVudFJlc3BvbnNlEj0KC2FwcG9pbnRtZW50GAEgASgLMigucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkFwcG9pbnRtZW50IpUBChdMaXN0QXBwb2ludG1lbnRzUmVxdWVzdBJIChFwcm9jZXNzaW5nX3N0YXR1cxgBIAMoDjItLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5Qcm9jZXNzaW5nU3RhdHVzEhwKCXBhZ2Vfc2l6ZRgCIAEoBUIJukgGGgQYZCgBEhIKCnBhZ2VfdG9rZW4YAyABKAkicwoYTGlzdEFwcG9pbnRtZW50c1Jlc3BvbnNlEj4KDGFwcG9pbnRtZW50cxgBIAMoCzIoLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5BcHBvaW50bWVudBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiVwobVGVybWluYXRlQXBwb2ludG1lbnRSZXF1ZXN0Eh8KDmFwcG9pbnRtZW50X2lkGAEgASgJQge6SARyAhABEhcKBnJlYXNvbhgCIAEoCUIHukgEcgIQASIvChxUZXJtaW5hdGVBcHBvaW50bWVudFJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgiRQoiQ2hlY2tBcHBvaW50bWVudEVsaWdpYmlsaXR5UmVxdWVzdBIfCg5saWNlbnNlX251bWJlchgBIAEoCUIHukgEcgIQASJDCiNDaGVja0FwcG9pbnRtZW50RWxpZ2liaWxpdHlSZXNwb25zZRIcChRub3RfZWxpZ2libGVfcmVhc29ucxgBIAMoCSI8ChlHZXRBcHBvaW50bWVudEZlZXNSZXF1ZXN0Eh8KDmxpY2Vuc2VfbnVtYmVyGAEgASgJQge6SARyAhABIjIKGkdldEFwcG9pbnRtZW50RmVlc1Jlc3BvbnNlEhQKDGZlZV9pbl9jZW50cxgBIAEoAyI8ChlHZXRUZXJtaW5hdGlvbkZlZXNSZXF1ZXN0Eh8KDmFwcG9pbnRtZW50X2lkGAEgASgJQge6SARyAhABIjIKGkdldFRlcm1pbmF0aW9uRmVlc1Jlc3BvbnNlEhQKDGZlZV9pbl9jZW50cxgBIAEoAyLvAwoLQXBwb2ludG1lbnQSFgoOYXBwb2ludG1lbnRfaWQYASABKAkSFgoObGljZW5zZV9udW1iZXIYAiABKAkSRgoQYXBwb2ludG1lbnRfdHlwZRgDIAEoDjIsLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5BcHBvaW50bWVudFR5cGUSSgoSZWxpZ2liaWxpdHlfc3RhdHVzGAQgASgOMi4ucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkVsaWdpYmlsaXR5U3RhdHVzEkgKEXByb2Nlc3Npbmdfc3RhdHVzGAUgASgOMi0ucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLlByb2Nlc3NpbmdTdGF0dXMSHAoUbm90X2VsaWdpYmxlX3JlYXNvbnMYBiADKAkSEAoIY29tbWVudHMYByABKAkSIAoYYXBwb2ludG1lbnRfZmVlX2luX2NlbnRzGAggASgDEiAKGHRlcm1pbmF0aW9uX2ZlZV9pbl9jZW50cxgJIAEoAxIuCgpjcmVhdGVkX2F0GAogASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgp1cGRhdGVkX2F0GAsgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCp7ChFFbGlnaWJpbGl0eVN0YXR1cxIiCh5FTElHSUJJTElUWV9TVEFUVVNfVU5TUEVDSUZJRUQQABIfChtFTElHSUJJTElUWV9TVEFUVVNfRUxJR0lCTEUQARIhCh1FTElHSUJJTElUWV9TVEFUVVNfSU5FTElHSUJMRRACKuIBChBQcm9jZXNzaW5nU3RhdHVzEiEKHVBST0NFU1NJTkdfU1RBVFVTX1VOU1BFQ0lGSUVEEAASIQodUFJPQ0VTU0lOR19TVEFUVVNfSU5fUFJPR1JFU1MQARIfChtQUk9DRVNTSU5HX1NUQVRVU19BUFBPSU5URUQQAhIgChxQUk9DRVNTSU5HX1NUQVRVU19URVJNSU5BVEVEEAMSHgoaUFJPQ0VTU0lOR19TVEFUVVNfUkVKRUNURUQQBBIlCiFQUk9DRVNTSU5HX1NUQVRVU19NSVNTSU5HX0xJQ0VOU0UQBSqUAQoPQXBwb2ludG1lbnRUeXBlEiAKHEFQUE9JTlRNRU5UX1RZUEVfVU5TUEVDSUZJRUQQABIdChlBUFBPSU5UTUVOVF9UWVBFX1JFR0lTVFJZEAESHQoZQVBQT0lOVE1FTlRfVFlQRV9VUF9GUk9OVBACEiEKHUFQUE9JTlRNRU5UX1RZUEVfSlVTVF9JTl9USU1FEAMy2QcKEkFwcG9pbnRtZW50U2VydmljZRKFAQoSUmVxdWVzdEFwcG9pbnRtZW50EjYucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLlJlcXVlc3RBcHBvaW50bWVudFJlcXVlc3QaNy5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuUmVxdWVzdEFwcG9pbnRtZW50UmVzcG9uc2USeQoOR2V0QXBwb2ludG1lbnQSMi5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuR2V0QXBwb2ludG1lbnRSZXF1ZXN0GjMucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldEFwcG9pbnRtZW50UmVzcG9uc2USfwoQTGlzdEFwcG9pbnRtZW50cxI0LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5MaXN0QXBwb2ludG1lbnRzUmVxdWVzdBo1LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5MaXN0QXBwb2ludG1lbnRzUmVzcG9uc2USiwEKFFRlcm1pbmF0ZUFwcG9pbnRtZW50EjgucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLlRlcm1pbmF0ZUFwcG9pbnRtZW50UmVxdWVzdBo5LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5UZXJtaW5hdGVBcHBvaW50bWVudFJlc3BvbnNlEqABChtDaGVja0FwcG9pbnRtZW50RWxpZ2liaWxpdHkSPy5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuQ2hlY2tBcHBvaW50bWVudEVsaWdpYmlsaXR5UmVxdWVzdBpALnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5DaGVja0FwcG9pbnRtZW50RWxpZ2liaWxpdHlSZXNwb25zZRKFAQoSR2V0QXBwb2ludG1lbnRGZWVzEjYucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldEFwcG9pbnRtZW50RmVlc1JlcXVlc3QaNy5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuR2V0QXBwb2ludG1lbnRGZWVzUmVzcG9uc2UShQEKEkdldFRlcm1pbmF0aW9uRmVlcxI2LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5HZXRUZXJtaW5hdGlvbkZlZXNSZXF1ZXN0GjcucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldFRlcm1pbmF0aW9uRmVlc1Jlc3BvbnNlQpcCCh9jb20ucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxQhBBcHBvaW50bWVudFByb3RvUAFaVGdpdGh1Yi5jb20vYWdlbnRlcm8vcHJvZHVjZXJmbG93YXBpL2dlbi9nby9wcm9kdWNlcmZsb3cvYXBwb2ludG1lbnQvdjE7YXBwb2ludG1lbnR2MaICA1BBWKoCG1Byb2R1Y2VyZmxvdy5BcHBvaW50bWVudC5WMcoCG1Byb2R1Y2VyZmxvd1xBcHBvaW50bWVudFxWMeICJ1Byb2R1Y2VyZmxvd1xBcHBvaW50bWVudFxWMVxHUEJNZXRhZGF0YeoCHVByb2R1Y2VyZmxvdzo6QXBwb2ludG1lbnQ6OlYxYgZwcm90bzM", [file_buf_validate_validate, file_google_protobuf_timestamp]);

/**
 * Request to create a new appointment.
 *
 * @generated from message producerflow.appointment.v1.RequestAppointmentRequest
 */
export type RequestAppointmentRequest = Message<"producerflow.appointment.v1.RequestAppointmentRequest"> & {
  /**
   * Required. License number to appoint.
   *
   * @generated from field: string license_number = 1;
   */
  licenseNumber: string;
};

/**
 * Describes the message producerflow.appointment.v1.RequestAppointmentRequest.
 * Use `create(RequestAppointmentRequestSchema)` to create a new message.
 */
export const RequestAppointmentRequestSchema: GenMessage<RequestAppointmentRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 0);

/**
 * @generated from message producerflow.appointment.v1.RequestAppointmentResponse
 */
export type RequestAppointmentResponse = Message<"producerflow.appointment.v1.RequestAppointmentResponse"> & {
  /**
   * The ID of the created appointment.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;

  /**
   * Processing status of the appointment request.
   *
   * @generated from field: producerflow.appointment.v1.ProcessingStatus processing_status = 2;
   */
  processingStatus: ProcessingStatus;

  /**
   * If the appointment was rejected or ineligible, these reasons explain why.
   *
   * @generated from field: repeated string not_eligible_reasons = 3;
   */
  notEligibleReasons: string[];
};

/**
 * Describes the message producerflow.appointment.v1.RequestAppointmentResponse.
 * Use `create(RequestAppointmentResponseSchema)` to create a new message.
 */
export const RequestAppointmentResponseSchema: GenMessage<RequestAppointmentResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 1);

/**
 * Request to retrieve an appointment by ID.
 *
 * @generated from message producerflow.appointment.v1.GetAppointmentRequest
 */
export type GetAppointmentRequest = Message<"producerflow.appointment.v1.GetAppointmentRequest"> & {
  /**
   * Required. The ID of the appointment to retrieve.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentRequest.
 * Use `create(GetAppointmentRequestSchema)` to create a new message.
 */
export const GetAppointmentRequestSchema: GenMessage<GetAppointmentRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 2);

/**
 * @generated from message producerflow.appointment.v1.GetAppointmentResponse
 */
export type GetAppointmentResponse = Message<"producerflow.appointment.v1.GetAppointmentResponse"> & {
  /**
   * The appointment details.
   *
   * @generated from field: producerflow.appointment.v1.Appointment appointment = 1;
   */
  appointment?: Appointment;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentResponse.
 * Use `create(GetAppointmentResponseSchema)` to create a new message.
 */
export const GetAppointmentResponseSchema: GenMessage<GetAppointmentResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 3);

/**
 * Request to list appointments, optionally filtered by processing status.
 *
 * @generated from message producerflow.appointment.v1.ListAppointmentsRequest
 */
export type ListAppointmentsRequest = Message<"producerflow.appointment.v1.ListAppointmentsRequest"> & {
  /**
   * Optional. Filter results by processing status.
   *
   * @generated from field: repeated producerflow.appointment.v1.ProcessingStatus processing_status = 1;
   */
  processingStatus: ProcessingStatus[];

  /**
   * Optional. Maximum number of results to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Token for fetching the next page.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message producerflow.appointment.v1.ListAppointmentsRequest.
 * Use `create(ListAppointmentsRequestSchema)` to create a new message.
 */
export const ListAppointmentsRequestSchema: GenMessage<ListAppointmentsRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 4);

/**
 * @generated from message producerflow.appointment.v1.ListAppointmentsResponse
 */
export type ListAppointmentsResponse = Message<"producerflow.appointment.v1.ListAppointmentsResponse"> & {
  /**
   * List of appointments.
   *
   * @generated from field: repeated producerflow.appointment.v1.Appointment appointments = 1;
   */
  appointments: Appointment[];

  /**
   * Token for fetching the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message producerflow.appointment.v1.ListAppointmentsResponse.
 * Use `create(ListAppointmentsResponseSchema)` to create a new message.
 */
export const ListAppointmentsResponseSchema: GenMessage<ListAppointmentsResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 5);

/**
 * Request to terminate an appointment.
 *
 * @generated from message producerflow.appointment.v1.TerminateAppointmentRequest
 */
export type TerminateAppointmentRequest = Message<"producerflow.appointment.v1.TerminateAppointmentRequest"> & {
  /**
   * Required. ID of the appointment to terminate.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;

  /**
   * Required. Reason for termination.
   *
   * @generated from field: string reason = 2;
   */
  reason: string;
};

/**
 * Describes the message producerflow.appointment.v1.TerminateAppointmentRequest.
 * Use `create(TerminateAppointmentRequestSchema)` to create a new message.
 */
export const TerminateAppointmentRequestSchema: GenMessage<TerminateAppointmentRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 6);

/**
 * @generated from message producerflow.appointment.v1.TerminateAppointmentResponse
 */
export type TerminateAppointmentResponse = Message<"producerflow.appointment.v1.TerminateAppointmentResponse"> & {
  /**
   * Indicates whether the termination was successful.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message producerflow.appointment.v1.TerminateAppointmentResponse.
 * Use `create(TerminateAppointmentResponseSchema)` to create a new message.
 */
export const TerminateAppointmentResponseSchema: GenMessage<TerminateAppointmentResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 7);

/**
 * Request to check appointment eligibility for a license.
 *
 * @generated from message producerflow.appointment.v1.CheckAppointmentEligibilityRequest
 */
export type CheckAppointmentEligibilityRequest = Message<"producerflow.appointment.v1.CheckAppointmentEligibilityRequest"> & {
  /**
   * Required. License number to check.
   *
   * @generated from field: string license_number = 1;
   */
  licenseNumber: string;
};

/**
 * Describes the message producerflow.appointment.v1.CheckAppointmentEligibilityRequest.
 * Use `create(CheckAppointmentEligibilityRequestSchema)` to create a new message.
 */
export const CheckAppointmentEligibilityRequestSchema: GenMessage<CheckAppointmentEligibilityRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 8);

/**
 * @generated from message producerflow.appointment.v1.CheckAppointmentEligibilityResponse
 */
export type CheckAppointmentEligibilityResponse = Message<"producerflow.appointment.v1.CheckAppointmentEligibilityResponse"> & {
  /**
   * If not eligible, reasons will be returned.
   *
   * @generated from field: repeated string not_eligible_reasons = 1;
   */
  notEligibleReasons: string[];
};

/**
 * Describes the message producerflow.appointment.v1.CheckAppointmentEligibilityResponse.
 * Use `create(CheckAppointmentEligibilityResponseSchema)` to create a new message.
 */
export const CheckAppointmentEligibilityResponseSchema: GenMessage<CheckAppointmentEligibilityResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 9);

/**
 * Request to get appointment fees.
 *
 * @generated from message producerflow.appointment.v1.GetAppointmentFeesRequest
 */
export type GetAppointmentFeesRequest = Message<"producerflow.appointment.v1.GetAppointmentFeesRequest"> & {
  /**
   * Required. License number to appoint.
   *
   * @generated from field: string license_number = 1;
   */
  licenseNumber: string;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentFeesRequest.
 * Use `create(GetAppointmentFeesRequestSchema)` to create a new message.
 */
export const GetAppointmentFeesRequestSchema: GenMessage<GetAppointmentFeesRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 10);

/**
 * @generated from message producerflow.appointment.v1.GetAppointmentFeesResponse
 */
export type GetAppointmentFeesResponse = Message<"producerflow.appointment.v1.GetAppointmentFeesResponse"> & {
  /**
   * Total fee for the appointment in cents.
   *
   * @generated from field: int64 fee_in_cents = 1;
   */
  feeInCents: bigint;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentFeesResponse.
 * Use `create(GetAppointmentFeesResponseSchema)` to create a new message.
 */
export const GetAppointmentFeesResponseSchema: GenMessage<GetAppointmentFeesResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 11);

/**
 * Request to get termination fees.
 *
 * @generated from message producerflow.appointment.v1.GetTerminationFeesRequest
 */
export type GetTerminationFeesRequest = Message<"producerflow.appointment.v1.GetTerminationFeesRequest"> & {
  /**
   * Required. Appointment ID.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;
};

/**
 * Describes the message producerflow.appointment.v1.GetTerminationFeesRequest.
 * Use `create(GetTerminationFeesRequestSchema)` to create a new message.
 */
export const GetTerminationFeesRequestSchema: GenMessage<GetTerminationFeesRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 12);

/**
 * @generated from message producerflow.appointment.v1.GetTerminationFeesResponse
 */
export type GetTerminationFeesResponse = Message<"producerflow.appointment.v1.GetTerminationFeesResponse"> & {
  /**
   * Total fee for the termination in cents.
   *
   * @generated from field: int64 fee_in_cents = 1;
   */
  feeInCents: bigint;
};

/**
 * Describes the message producerflow.appointment.v1.GetTerminationFeesResponse.
 * Use `create(GetTerminationFeesResponseSchema)` to create a new message.
 */
export const GetTerminationFeesResponseSchema: GenMessage<GetTerminationFeesResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 13);

/**
 * Represents an appointment for a license.
 *
 * @generated from message producerflow.appointment.v1.Appointment
 */
export type Appointment = Message<"producerflow.appointment.v1.Appointment"> & {
  /**
   * Unique identifier for the appointment.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;

  /**
   * The license number associated with the appointment.
   *
   * @generated from field: string license_number = 2;
   */
  licenseNumber: string;

  /**
   * Type of appointment (e.g., up-front, registry).
   *
   * @generated from field: producerflow.appointment.v1.AppointmentType appointment_type = 3;
   */
  appointmentType: AppointmentType;

  /**
   * Eligibility status of the appointment (e.g., eligible, ineligible).
   *
   * @generated from field: producerflow.appointment.v1.EligibilityStatus eligibility_status = 4;
   */
  eligibilityStatus: EligibilityStatus;

  /**
   * Processing status of the appointment (e.g., in progress, appointed).
   *
   * @generated from field: producerflow.appointment.v1.ProcessingStatus processing_status = 5;
   */
  processingStatus: ProcessingStatus;

  /**
   * If ineligible or rejected, reasons will be listed here.
   *
   * @generated from field: repeated string not_eligible_reasons = 6;
   */
  notEligibleReasons: string[];

  /**
   * Optional comments or notes related to the appointment.
   *
   * @generated from field: string comments = 7;
   */
  comments: string;

  /**
   * Total appointment fee in cents.
   *
   * @generated from field: int64 appointment_fee_in_cents = 8;
   */
  appointmentFeeInCents: bigint;

  /**
   * Total termination fee in cents, if terminated or eligible for termination.
   *
   * @generated from field: int64 termination_fee_in_cents = 9;
   */
  terminationFeeInCents: bigint;

  /**
   * Timestamp when the appointment was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp;

  /**
   * Timestamp of the last update to the appointment.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 11;
   */
  updatedAt?: Timestamp;
};

/**
 * Describes the message producerflow.appointment.v1.Appointment.
 * Use `create(AppointmentSchema)` to create a new message.
 */
export const AppointmentSchema: GenMessage<Appointment> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 14);

/**
 * Eligibility status of the appointment.
 *
 * @generated from enum producerflow.appointment.v1.EligibilityStatus
 */
export enum EligibilityStatus {
  /**
   * @generated from enum value: ELIGIBILITY_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ELIGIBILITY_STATUS_ELIGIBLE = 1;
   */
  ELIGIBLE = 1,

  /**
   * @generated from enum value: ELIGIBILITY_STATUS_INELIGIBLE = 2;
   */
  INELIGIBLE = 2,
}

/**
 * Describes the enum producerflow.appointment.v1.EligibilityStatus.
 */
export const EligibilityStatusSchema: GenEnum<EligibilityStatus> = /*@__PURE__*/
  enumDesc(file_producerflow_appointment_v1_appointment, 0);

/**
 * Processing status of the appointment.
 *
 * @generated from enum producerflow.appointment.v1.ProcessingStatus
 */
export enum ProcessingStatus {
  /**
   * @generated from enum value: PROCESSING_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROCESSING_STATUS_IN_PROGRESS = 1;
   */
  IN_PROGRESS = 1,

  /**
   * @generated from enum value: PROCESSING_STATUS_APPOINTED = 2;
   */
  APPOINTED = 2,

  /**
   * @generated from enum value: PROCESSING_STATUS_TERMINATED = 3;
   */
  TERMINATED = 3,

  /**
   * @generated from enum value: PROCESSING_STATUS_REJECTED = 4;
   */
  REJECTED = 4,

  /**
   * @generated from enum value: PROCESSING_STATUS_MISSING_LICENSE = 5;
   */
  MISSING_LICENSE = 5,
}

/**
 * Describes the enum producerflow.appointment.v1.ProcessingStatus.
 */
export const ProcessingStatusSchema: GenEnum<ProcessingStatus> = /*@__PURE__*/
  enumDesc(file_producerflow_appointment_v1_appointment, 1);

/**
 * Type of appointment.
 *
 * @generated from enum producerflow.appointment.v1.AppointmentType
 */
export enum AppointmentType {
  /**
   * @generated from enum value: APPOINTMENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: APPOINTMENT_TYPE_REGISTRY = 1;
   */
  REGISTRY = 1,

  /**
   * @generated from enum value: APPOINTMENT_TYPE_UP_FRONT = 2;
   */
  UP_FRONT = 2,

  /**
   * @generated from enum value: APPOINTMENT_TYPE_JUST_IN_TIME = 3;
   */
  JUST_IN_TIME = 3,
}

/**
 * Describes the enum producerflow.appointment.v1.AppointmentType.
 */
export const AppointmentTypeSchema: GenEnum<AppointmentType> = /*@__PURE__*/
  enumDesc(file_producerflow_appointment_v1_appointment, 2);

/**
 * AppointmentService manages license appointments through NIPR.
 *
 * The appointment flow in NIPR is as follows:
 * 1. A new appointment (or termination) is requested for a license number.
 * 2. Some time later, NIPR processes the request and returns the final result.
 *
 * Since NIPR does not return results immediately, RequestAppointment and TerminateAppointment
 * RPCs will return a processing status of IN_PROGRESS if the request is accepted by NIPR.
 * When the appointment is finally processed by NIPR, ProducerFlow will notify via a webhook of
 * the final result. Also, any call from this point on to ListAppointments or GetAppointment will
 * also return the final result.
 *
 * Any call to this service must be authenticated using an API key in the request headers.
 *
 * @generated from service producerflow.appointment.v1.AppointmentService
 */
export const AppointmentService: GenService<{
  /**
   * Requests a new appointment for the specified license number.
   * The caller must verify that the license and the producer are eligible for appointment.
   * If the request is accepted by NIPR, the appointment will have IN_PROGRESS processing status.
   * If rejected, it will have REJECTED status and reasons will be provided in not_eligible_reasons.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.RequestAppointment
   */
  requestAppointment: {
    methodKind: "unary";
    input: typeof RequestAppointmentRequestSchema;
    output: typeof RequestAppointmentResponseSchema;
  },
  /**
   * Retrieves the details of an appointment by its ID.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetAppointment
   */
  getAppointment: {
    methodKind: "unary";
    input: typeof GetAppointmentRequestSchema;
    output: typeof GetAppointmentResponseSchema;
  },
  /**
   * Lists appointments for the tenant, optionally filtered by processing status.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.ListAppointments
   */
  listAppointments: {
    methodKind: "unary";
    input: typeof ListAppointmentsRequestSchema;
    output: typeof ListAppointmentsResponseSchema;
  },
  /**
   * Terminates an existing appointment by ID, providing a reason.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.TerminateAppointment
   */
  terminateAppointment: {
    methodKind: "unary";
    input: typeof TerminateAppointmentRequestSchema;
    output: typeof TerminateAppointmentResponseSchema;
  },
  /**
   * Checks whether a license is eligible for appointment.
   * If not eligible, a list of reasons is provided.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.CheckAppointmentEligibility
   */
  checkAppointmentEligibility: {
    methodKind: "unary";
    input: typeof CheckAppointmentEligibilityRequestSchema;
    output: typeof CheckAppointmentEligibilityResponseSchema;
  },
  /**
   * Retrieves the total fees associated with requesting an appointment. Fee amounts are represented
   * as integer values in cents. E.g. $10.34 is sent as 1034.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetAppointmentFees
   */
  getAppointmentFees: {
    methodKind: "unary";
    input: typeof GetAppointmentFeesRequestSchema;
    output: typeof GetAppointmentFeesResponseSchema;
  },
  /**
   * Retrieves the total fees associated with terminating an appointment. Fee amounts are represented
   * as integer values in cents. E.g. $10.34 is sent as 1034.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetTerminationFees
   */
  getTerminationFees: {
    methodKind: "unary";
    input: typeof GetTerminationFeesRequestSchema;
    output: typeof GetTerminationFeesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_producerflow_appointment_v1_appointment, 0);

