// @generated by protoc-gen-es v2.5.2 with parameter "target=ts,import_extension=none"
// @generated from file producerflow/appointment/v1/appointment.proto (package producerflow.appointment.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file producerflow/appointment/v1/appointment.proto.
 */
export const file_producerflow_appointment_v1_appointment: GenFile = /*@__PURE__*/
  fileDesc("Ci1wcm9kdWNlcmZsb3cvYXBwb2ludG1lbnQvdjEvYXBwb2ludG1lbnQucHJvdG8SG3Byb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MSJVChlSZXF1ZXN0QXBwb2ludG1lbnRSZXF1ZXN0EhsKCmxpY2Vuc2VfaWQYASABKAlCB7pIBHICEAESGwoKY2Fycmllcl9pZBgCIAEoCUIHukgEcgIQASKcAQoaUmVxdWVzdEFwcG9pbnRtZW50UmVzcG9uc2USFgoOYXBwb2ludG1lbnRfaWQYASABKAkSSAoRcHJvY2Vzc2luZ19zdGF0dXMYAiABKA4yLS5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuUHJvY2Vzc2luZ1N0YXR1cxIcChRub3RfZWxpZ2libGVfcmVhc29ucxgDIAMoCSI4ChVHZXRBcHBvaW50bWVudFJlcXVlc3QSHwoOYXBwb2ludG1lbnRfaWQYASABKAlCB7pIBHICEAEiVwoWR2V0QXBwb2ludG1lbnRSZXNwb25zZRI9CgthcHBvaW50bWVudBgBIAEoCzIoLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5BcHBvaW50bWVudCKVAQoXTGlzdEFwcG9pbnRtZW50c1JlcXVlc3QSSAoRcHJvY2Vzc2luZ19zdGF0dXMYASADKA4yLS5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuUHJvY2Vzc2luZ1N0YXR1cxIcCglwYWdlX3NpemUYAiABKAVCCbpIBhoEGGQoARISCgpwYWdlX3Rva2VuGAMgASgJInMKGExpc3RBcHBvaW50bWVudHNSZXNwb25zZRI+CgxhcHBvaW50bWVudHMYASADKAsyKC5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuQXBwb2ludG1lbnQSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIlcKG1Rlcm1pbmF0ZUFwcG9pbnRtZW50UmVxdWVzdBIfCg5hcHBvaW50bWVudF9pZBgBIAEoCUIHukgEcgIQARIXCgZyZWFzb24YAiABKAlCB7pIBHICEAEiLwocVGVybWluYXRlQXBwb2ludG1lbnRSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIInEKG0xpc3RFbGlnaWJsZUxpY2Vuc2VzUmVxdWVzdBIfCgtwcm9kdWNlcl9pZBgBIAEoCUIIukgFcgOwAQFIABIdCglhZ2VuY3lfaWQYAiABKAlCCLpIBXIDsAEBSABCEgoJYXBwbGljYW50EgW6SAIIASJWChxMaXN0RWxpZ2libGVMaWNlbnNlc1Jlc3BvbnNlEjYKCGxpY2Vuc2VzGAEgAygLMiQucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkxpY2Vuc2UiPAoZR2V0QXBwb2ludG1lbnRGZWVzUmVxdWVzdBIfCg5saWNlbnNlX251bWJlchgBIAEoCUIHukgEcgIQASIyChpHZXRBcHBvaW50bWVudEZlZXNSZXNwb25zZRIUCgxmZWVfaW5fY2VudHMYASABKAMiPAoZR2V0VGVybWluYXRpb25GZWVzUmVxdWVzdBIfCg5hcHBvaW50bWVudF9pZBgBIAEoCUIHukgEcgIQASIyChpHZXRUZXJtaW5hdGlvbkZlZXNSZXNwb25zZRIUCgxmZWVfaW5fY2VudHMYASABKAMiFAoSR2V0Q2FycmllcnNSZXF1ZXN0Ik0KE0dldENhcnJpZXJzUmVzcG9uc2USNgoIY2FycmllcnMYASADKAsyJC5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuQ2FycmllciJGCgdDYXJyaWVyEhIKCmNhcnJpZXJfaWQYASABKAkSDAoEbmFtZRgCIAEoCRILCgNucG4YAyABKAkSDAoEZmVpbhgEIAEoCSKOBAoLQXBwb2ludG1lbnQSFgoOYXBwb2ludG1lbnRfaWQYASABKAkSNQoHbGljZW5zZRgCIAEoCzIkLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5MaWNlbnNlEkYKEGFwcG9pbnRtZW50X3R5cGUYBCABKA4yLC5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuQXBwb2ludG1lbnRUeXBlEkoKEmVsaWdpYmlsaXR5X3N0YXR1cxgFIAEoDjIuLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5FbGlnaWJpbGl0eVN0YXR1cxJIChFwcm9jZXNzaW5nX3N0YXR1cxgGIAEoDjItLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5Qcm9jZXNzaW5nU3RhdHVzEhwKFG5vdF9lbGlnaWJsZV9yZWFzb25zGAcgAygJEhAKCGNvbW1lbnRzGAggASgJEiAKGGFwcG9pbnRtZW50X2ZlZV9pbl9jZW50cxgJIAEoAxIgChh0ZXJtaW5hdGlvbl9mZWVfaW5fY2VudHMYCiABKAMSLgoKY3JlYXRlZF9hdBgLIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKdXBkYXRlZF9hdBgMIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAirAEKB0xpY2Vuc2USEgoKbGljZW5zZV9pZBgBIAEoCRIWCg5saWNlbnNlX251bWJlchgCIAEoCRIfCgtwcm9kdWNlcl9pZBgDIAEoCUIIukgFcgOwAQFIABIdCglhZ2VuY3lfaWQYBCABKAlCCLpIBXIDsAEBSAASDQoFc3RhdGUYBSABKAkSFQoNbGljZW5zZV9jbGFzcxgGIAEoCUIPCg1saWNlbnNlX293bmVyKnsKEUVsaWdpYmlsaXR5U3RhdHVzEiIKHkVMSUdJQklMSVRZX1NUQVRVU19VTlNQRUNJRklFRBAAEh8KG0VMSUdJQklMSVRZX1NUQVRVU19FTElHSUJMRRABEiEKHUVMSUdJQklMSVRZX1NUQVRVU19JTkVMSUdJQkxFEAIq4gEKEFByb2Nlc3NpbmdTdGF0dXMSIQodUFJPQ0VTU0lOR19TVEFUVVNfVU5TUEVDSUZJRUQQABIhCh1QUk9DRVNTSU5HX1NUQVRVU19JTl9QUk9HUkVTUxABEh8KG1BST0NFU1NJTkdfU1RBVFVTX0FQUE9JTlRFRBACEiAKHFBST0NFU1NJTkdfU1RBVFVTX1RFUk1JTkFURUQQAxIeChpQUk9DRVNTSU5HX1NUQVRVU19SRUpFQ1RFRBAEEiUKIVBST0NFU1NJTkdfU1RBVFVTX01JU1NJTkdfTElDRU5TRRAFKpQBCg9BcHBvaW50bWVudFR5cGUSIAocQVBQT0lOVE1FTlRfVFlQRV9VTlNQRUNJRklFRBAAEh0KGUFQUE9JTlRNRU5UX1RZUEVfUkVHSVNUUlkQARIdChlBUFBPSU5UTUVOVF9UWVBFX1VQX0ZST05UEAISIQodQVBQT0lOVE1FTlRfVFlQRV9KVVNUX0lOX1RJTUUQAzK2CAoSQXBwb2ludG1lbnRTZXJ2aWNlEnkKDkdldEFwcG9pbnRtZW50EjIucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldEFwcG9pbnRtZW50UmVxdWVzdBozLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5HZXRBcHBvaW50bWVudFJlc3BvbnNlEoUBChJHZXRBcHBvaW50bWVudEZlZXMSNi5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuR2V0QXBwb2ludG1lbnRGZWVzUmVxdWVzdBo3LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5HZXRBcHBvaW50bWVudEZlZXNSZXNwb25zZRJwCgtHZXRDYXJyaWVycxIvLnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5HZXRDYXJyaWVyc1JlcXVlc3QaMC5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuR2V0Q2FycmllcnNSZXNwb25zZRKFAQoSR2V0VGVybWluYXRpb25GZWVzEjYucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkdldFRlcm1pbmF0aW9uRmVlc1JlcXVlc3QaNy5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuR2V0VGVybWluYXRpb25GZWVzUmVzcG9uc2USfwoQTGlzdEFwcG9pbnRtZW50cxI0LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5MaXN0QXBwb2ludG1lbnRzUmVxdWVzdBo1LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5MaXN0QXBwb2ludG1lbnRzUmVzcG9uc2USiwEKFExpc3RFbGlnaWJsZUxpY2Vuc2VzEjgucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLkxpc3RFbGlnaWJsZUxpY2Vuc2VzUmVxdWVzdBo5LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5MaXN0RWxpZ2libGVMaWNlbnNlc1Jlc3BvbnNlEoUBChJSZXF1ZXN0QXBwb2ludG1lbnQSNi5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuUmVxdWVzdEFwcG9pbnRtZW50UmVxdWVzdBo3LnByb2R1Y2VyZmxvdy5hcHBvaW50bWVudC52MS5SZXF1ZXN0QXBwb2ludG1lbnRSZXNwb25zZRKLAQoUVGVybWluYXRlQXBwb2ludG1lbnQSOC5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjEuVGVybWluYXRlQXBwb2ludG1lbnRSZXF1ZXN0GjkucHJvZHVjZXJmbG93LmFwcG9pbnRtZW50LnYxLlRlcm1pbmF0ZUFwcG9pbnRtZW50UmVzcG9uc2VClwIKH2NvbS5wcm9kdWNlcmZsb3cuYXBwb2ludG1lbnQudjFCEEFwcG9pbnRtZW50UHJvdG9QAVpUZ2l0aHViLmNvbS9hZ2VudGVyby9wcm9kdWNlcmZsb3dhcGkvZ2VuL2dvL3Byb2R1Y2VyZmxvdy9hcHBvaW50bWVudC92MTthcHBvaW50bWVudHYxogIDUEFYqgIbUHJvZHVjZXJmbG93LkFwcG9pbnRtZW50LlYxygIbUHJvZHVjZXJmbG93XEFwcG9pbnRtZW50XFYx4gInUHJvZHVjZXJmbG93XEFwcG9pbnRtZW50XFYxXEdQQk1ldGFkYXRh6gIdUHJvZHVjZXJmbG93OjpBcHBvaW50bWVudDo6VjFiBnByb3RvMw", [file_buf_validate_validate, file_google_protobuf_timestamp]);

/**
 * Request to create a new appointment.
 *
 * @generated from message producerflow.appointment.v1.RequestAppointmentRequest
 */
export type RequestAppointmentRequest = Message<"producerflow.appointment.v1.RequestAppointmentRequest"> & {
  /**
   * Required. The ID of the license to appoint.
   *
   * @generated from field: string license_id = 1;
   */
  licenseId: string;

  /**
   * Required. The ID of the carrier to appoint the license with.
   *
   * @generated from field: string carrier_id = 2;
   */
  carrierId: string;
};

/**
 * Describes the message producerflow.appointment.v1.RequestAppointmentRequest.
 * Use `create(RequestAppointmentRequestSchema)` to create a new message.
 */
export const RequestAppointmentRequestSchema: GenMessage<RequestAppointmentRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 0);

/**
 * @generated from message producerflow.appointment.v1.RequestAppointmentResponse
 */
export type RequestAppointmentResponse = Message<"producerflow.appointment.v1.RequestAppointmentResponse"> & {
  /**
   * The ID of the created appointment.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;

  /**
   * Processing status of the appointment request.
   *
   * @generated from field: producerflow.appointment.v1.ProcessingStatus processing_status = 2;
   */
  processingStatus: ProcessingStatus;

  /**
   * If the appointment was rejected or ineligible, these reasons explain why.
   *
   * @generated from field: repeated string not_eligible_reasons = 3;
   */
  notEligibleReasons: string[];
};

/**
 * Describes the message producerflow.appointment.v1.RequestAppointmentResponse.
 * Use `create(RequestAppointmentResponseSchema)` to create a new message.
 */
export const RequestAppointmentResponseSchema: GenMessage<RequestAppointmentResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 1);

/**
 * Request to retrieve an appointment by ID.
 *
 * @generated from message producerflow.appointment.v1.GetAppointmentRequest
 */
export type GetAppointmentRequest = Message<"producerflow.appointment.v1.GetAppointmentRequest"> & {
  /**
   * Required. The ID of the appointment to retrieve.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentRequest.
 * Use `create(GetAppointmentRequestSchema)` to create a new message.
 */
export const GetAppointmentRequestSchema: GenMessage<GetAppointmentRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 2);

/**
 * @generated from message producerflow.appointment.v1.GetAppointmentResponse
 */
export type GetAppointmentResponse = Message<"producerflow.appointment.v1.GetAppointmentResponse"> & {
  /**
   * The appointment details.
   *
   * @generated from field: producerflow.appointment.v1.Appointment appointment = 1;
   */
  appointment?: Appointment;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentResponse.
 * Use `create(GetAppointmentResponseSchema)` to create a new message.
 */
export const GetAppointmentResponseSchema: GenMessage<GetAppointmentResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 3);

/**
 * Request to list appointments, optionally filtered by processing status.
 *
 * @generated from message producerflow.appointment.v1.ListAppointmentsRequest
 */
export type ListAppointmentsRequest = Message<"producerflow.appointment.v1.ListAppointmentsRequest"> & {
  /**
   * Optional. Filter results by processing status.
   *
   * @generated from field: repeated producerflow.appointment.v1.ProcessingStatus processing_status = 1;
   */
  processingStatus: ProcessingStatus[];

  /**
   * Optional. Maximum number of results to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Token for fetching the next page.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message producerflow.appointment.v1.ListAppointmentsRequest.
 * Use `create(ListAppointmentsRequestSchema)` to create a new message.
 */
export const ListAppointmentsRequestSchema: GenMessage<ListAppointmentsRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 4);

/**
 * @generated from message producerflow.appointment.v1.ListAppointmentsResponse
 */
export type ListAppointmentsResponse = Message<"producerflow.appointment.v1.ListAppointmentsResponse"> & {
  /**
   * List of appointments.
   *
   * @generated from field: repeated producerflow.appointment.v1.Appointment appointments = 1;
   */
  appointments: Appointment[];

  /**
   * Token for fetching the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message producerflow.appointment.v1.ListAppointmentsResponse.
 * Use `create(ListAppointmentsResponseSchema)` to create a new message.
 */
export const ListAppointmentsResponseSchema: GenMessage<ListAppointmentsResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 5);

/**
 * Request to terminate an appointment.
 *
 * @generated from message producerflow.appointment.v1.TerminateAppointmentRequest
 */
export type TerminateAppointmentRequest = Message<"producerflow.appointment.v1.TerminateAppointmentRequest"> & {
  /**
   * Required. ID of the appointment to terminate.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;

  /**
   * Required. Reason for termination.
   *
   * @generated from field: string reason = 2;
   */
  reason: string;
};

/**
 * Describes the message producerflow.appointment.v1.TerminateAppointmentRequest.
 * Use `create(TerminateAppointmentRequestSchema)` to create a new message.
 */
export const TerminateAppointmentRequestSchema: GenMessage<TerminateAppointmentRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 6);

/**
 * @generated from message producerflow.appointment.v1.TerminateAppointmentResponse
 */
export type TerminateAppointmentResponse = Message<"producerflow.appointment.v1.TerminateAppointmentResponse"> & {
  /**
   * Indicates whether the termination was successful.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message producerflow.appointment.v1.TerminateAppointmentResponse.
 * Use `create(TerminateAppointmentResponseSchema)` to create a new message.
 */
export const TerminateAppointmentResponseSchema: GenMessage<TerminateAppointmentResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 7);

/**
 * Request to retrieve a list of licenses that are eligible to be appointed.
 *
 * @generated from message producerflow.appointment.v1.ListEligibleLicensesRequest
 */
export type ListEligibleLicensesRequest = Message<"producerflow.appointment.v1.ListEligibleLicensesRequest"> & {
  /**
   * The applicant is the producer or agency with licenses eligible to be appointed.
   *
   * @generated from oneof producerflow.appointment.v1.ListEligibleLicensesRequest.applicant
   */
  applicant: {
    /**
     * @generated from field: string producer_id = 1;
     */
    value: string;
    case: "producerId";
  } | {
    /**
     * @generated from field: string agency_id = 2;
     */
    value: string;
    case: "agencyId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message producerflow.appointment.v1.ListEligibleLicensesRequest.
 * Use `create(ListEligibleLicensesRequestSchema)` to create a new message.
 */
export const ListEligibleLicensesRequestSchema: GenMessage<ListEligibleLicensesRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 8);

/**
 * @generated from message producerflow.appointment.v1.ListEligibleLicensesResponse
 */
export type ListEligibleLicensesResponse = Message<"producerflow.appointment.v1.ListEligibleLicensesResponse"> & {
  /**
   * List of licenses that are eligible to be appointed.
   *
   * @generated from field: repeated producerflow.appointment.v1.License licenses = 1;
   */
  licenses: License[];
};

/**
 * Describes the message producerflow.appointment.v1.ListEligibleLicensesResponse.
 * Use `create(ListEligibleLicensesResponseSchema)` to create a new message.
 */
export const ListEligibleLicensesResponseSchema: GenMessage<ListEligibleLicensesResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 9);

/**
 * Request to get appointment fees.
 *
 * @generated from message producerflow.appointment.v1.GetAppointmentFeesRequest
 */
export type GetAppointmentFeesRequest = Message<"producerflow.appointment.v1.GetAppointmentFeesRequest"> & {
  /**
   * Required. License number to appoint.
   *
   * @generated from field: string license_number = 1;
   */
  licenseNumber: string;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentFeesRequest.
 * Use `create(GetAppointmentFeesRequestSchema)` to create a new message.
 */
export const GetAppointmentFeesRequestSchema: GenMessage<GetAppointmentFeesRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 10);

/**
 * @generated from message producerflow.appointment.v1.GetAppointmentFeesResponse
 */
export type GetAppointmentFeesResponse = Message<"producerflow.appointment.v1.GetAppointmentFeesResponse"> & {
  /**
   * Total fee for the appointment in cents.
   *
   * @generated from field: int64 fee_in_cents = 1;
   */
  feeInCents: bigint;
};

/**
 * Describes the message producerflow.appointment.v1.GetAppointmentFeesResponse.
 * Use `create(GetAppointmentFeesResponseSchema)` to create a new message.
 */
export const GetAppointmentFeesResponseSchema: GenMessage<GetAppointmentFeesResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 11);

/**
 * Request to get termination fees.
 *
 * @generated from message producerflow.appointment.v1.GetTerminationFeesRequest
 */
export type GetTerminationFeesRequest = Message<"producerflow.appointment.v1.GetTerminationFeesRequest"> & {
  /**
   * Required. Appointment ID.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;
};

/**
 * Describes the message producerflow.appointment.v1.GetTerminationFeesRequest.
 * Use `create(GetTerminationFeesRequestSchema)` to create a new message.
 */
export const GetTerminationFeesRequestSchema: GenMessage<GetTerminationFeesRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 12);

/**
 * @generated from message producerflow.appointment.v1.GetTerminationFeesResponse
 */
export type GetTerminationFeesResponse = Message<"producerflow.appointment.v1.GetTerminationFeesResponse"> & {
  /**
   * Total fee for the termination in cents.
   *
   * @generated from field: int64 fee_in_cents = 1;
   */
  feeInCents: bigint;
};

/**
 * Describes the message producerflow.appointment.v1.GetTerminationFeesResponse.
 * Use `create(GetTerminationFeesResponseSchema)` to create a new message.
 */
export const GetTerminationFeesResponseSchema: GenMessage<GetTerminationFeesResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 13);

/**
 * @generated from message producerflow.appointment.v1.GetCarriersRequest
 */
export type GetCarriersRequest = Message<"producerflow.appointment.v1.GetCarriersRequest"> & {
};

/**
 * Describes the message producerflow.appointment.v1.GetCarriersRequest.
 * Use `create(GetCarriersRequestSchema)` to create a new message.
 */
export const GetCarriersRequestSchema: GenMessage<GetCarriersRequest> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 14);

/**
 * @generated from message producerflow.appointment.v1.GetCarriersResponse
 */
export type GetCarriersResponse = Message<"producerflow.appointment.v1.GetCarriersResponse"> & {
  /**
   * The list of carriers that are available to be appointed.
   *
   * @generated from field: repeated producerflow.appointment.v1.Carrier carriers = 1;
   */
  carriers: Carrier[];
};

/**
 * Describes the message producerflow.appointment.v1.GetCarriersResponse.
 * Use `create(GetCarriersResponseSchema)` to create a new message.
 */
export const GetCarriersResponseSchema: GenMessage<GetCarriersResponse> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 15);

/**
 * Represents a carrier that is available to be appointed.
 *
 * @generated from message producerflow.appointment.v1.Carrier
 */
export type Carrier = Message<"producerflow.appointment.v1.Carrier"> & {
  /**
   * The ID of the carrier.
   *
   * @generated from field: string carrier_id = 1;
   */
  carrierId: string;

  /**
   * The name of the carrier.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The NPN of the carrier.
   *
   * @generated from field: string npn = 3;
   */
  npn: string;

  /**
   * The state of the carrier.
   *
   * @generated from field: string fein = 4;
   */
  fein: string;
};

/**
 * Describes the message producerflow.appointment.v1.Carrier.
 * Use `create(CarrierSchema)` to create a new message.
 */
export const CarrierSchema: GenMessage<Carrier> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 16);

/**
 * Represents an appointment for a license.
 *
 * @generated from message producerflow.appointment.v1.Appointment
 */
export type Appointment = Message<"producerflow.appointment.v1.Appointment"> & {
  /**
   * Unique identifier for the appointment.
   *
   * @generated from field: string appointment_id = 1;
   */
  appointmentId: string;

  /**
   * The license number of the license being appointed.
   *
   * @generated from field: producerflow.appointment.v1.License license = 2;
   */
  license?: License;

  /**
   * Type of appointment (e.g., up-front, registry).
   *
   * @generated from field: producerflow.appointment.v1.AppointmentType appointment_type = 4;
   */
  appointmentType: AppointmentType;

  /**
   * Eligibility status of the appointment (e.g., eligible, ineligible).
   *
   * @generated from field: producerflow.appointment.v1.EligibilityStatus eligibility_status = 5;
   */
  eligibilityStatus: EligibilityStatus;

  /**
   * Processing status of the appointment (e.g., in progress, appointed).
   *
   * @generated from field: producerflow.appointment.v1.ProcessingStatus processing_status = 6;
   */
  processingStatus: ProcessingStatus;

  /**
   * If ineligible or rejected, reasons will be listed here.
   *
   * @generated from field: repeated string not_eligible_reasons = 7;
   */
  notEligibleReasons: string[];

  /**
   * Optional comments or notes related to the appointment.
   *
   * @generated from field: string comments = 8;
   */
  comments: string;

  /**
   * Total appointment fee in cents.
   *
   * @generated from field: int64 appointment_fee_in_cents = 9;
   */
  appointmentFeeInCents: bigint;

  /**
   * Total termination fee in cents, if terminated or eligible for termination.
   *
   * @generated from field: int64 termination_fee_in_cents = 10;
   */
  terminationFeeInCents: bigint;

  /**
   * Timestamp when the appointment was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 11;
   */
  createdAt?: Timestamp;

  /**
   * Timestamp of the last update to the appointment.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 12;
   */
  updatedAt?: Timestamp;
};

/**
 * Describes the message producerflow.appointment.v1.Appointment.
 * Use `create(AppointmentSchema)` to create a new message.
 */
export const AppointmentSchema: GenMessage<Appointment> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 17);

/**
 * @generated from message producerflow.appointment.v1.License
 */
export type License = Message<"producerflow.appointment.v1.License"> & {
  /**
   * The ID of the license.
   *
   * @generated from field: string license_id = 1;
   */
  licenseId: string;

  /**
   * The license number.
   *
   * @generated from field: string license_number = 2;
   */
  licenseNumber: string;

  /**
   * The owner of the license, it can be an agency or a producer.
   *
   * @generated from oneof producerflow.appointment.v1.License.license_owner
   */
  licenseOwner: {
    /**
     * @generated from field: string producer_id = 3;
     */
    value: string;
    case: "producerId";
  } | {
    /**
     * @generated from field: string agency_id = 4;
     */
    value: string;
    case: "agencyId";
  } | { case: undefined; value?: undefined };

  /**
   * The two-letter state code of the license.
   *
   * @generated from field: string state = 5;
   */
  state: string;

  /**
   * The license class.
   *
   * @generated from field: string license_class = 6;
   */
  licenseClass: string;
};

/**
 * Describes the message producerflow.appointment.v1.License.
 * Use `create(LicenseSchema)` to create a new message.
 */
export const LicenseSchema: GenMessage<License> = /*@__PURE__*/
  messageDesc(file_producerflow_appointment_v1_appointment, 18);

/**
 * Eligibility status of the appointment.
 *
 * @generated from enum producerflow.appointment.v1.EligibilityStatus
 */
export enum EligibilityStatus {
  /**
   * @generated from enum value: ELIGIBILITY_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ELIGIBILITY_STATUS_ELIGIBLE = 1;
   */
  ELIGIBLE = 1,

  /**
   * @generated from enum value: ELIGIBILITY_STATUS_INELIGIBLE = 2;
   */
  INELIGIBLE = 2,
}

/**
 * Describes the enum producerflow.appointment.v1.EligibilityStatus.
 */
export const EligibilityStatusSchema: GenEnum<EligibilityStatus> = /*@__PURE__*/
  enumDesc(file_producerflow_appointment_v1_appointment, 0);

/**
 * Processing status of the appointment.
 *
 * @generated from enum producerflow.appointment.v1.ProcessingStatus
 */
export enum ProcessingStatus {
  /**
   * @generated from enum value: PROCESSING_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROCESSING_STATUS_IN_PROGRESS = 1;
   */
  IN_PROGRESS = 1,

  /**
   * @generated from enum value: PROCESSING_STATUS_APPOINTED = 2;
   */
  APPOINTED = 2,

  /**
   * @generated from enum value: PROCESSING_STATUS_TERMINATED = 3;
   */
  TERMINATED = 3,

  /**
   * @generated from enum value: PROCESSING_STATUS_REJECTED = 4;
   */
  REJECTED = 4,

  /**
   * @generated from enum value: PROCESSING_STATUS_MISSING_LICENSE = 5;
   */
  MISSING_LICENSE = 5,
}

/**
 * Describes the enum producerflow.appointment.v1.ProcessingStatus.
 */
export const ProcessingStatusSchema: GenEnum<ProcessingStatus> = /*@__PURE__*/
  enumDesc(file_producerflow_appointment_v1_appointment, 1);

/**
 * Type of appointment.
 *
 * @generated from enum producerflow.appointment.v1.AppointmentType
 */
export enum AppointmentType {
  /**
   * @generated from enum value: APPOINTMENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: APPOINTMENT_TYPE_REGISTRY = 1;
   */
  REGISTRY = 1,

  /**
   * @generated from enum value: APPOINTMENT_TYPE_UP_FRONT = 2;
   */
  UP_FRONT = 2,

  /**
   * @generated from enum value: APPOINTMENT_TYPE_JUST_IN_TIME = 3;
   */
  JUST_IN_TIME = 3,
}

/**
 * Describes the enum producerflow.appointment.v1.AppointmentType.
 */
export const AppointmentTypeSchema: GenEnum<AppointmentType> = /*@__PURE__*/
  enumDesc(file_producerflow_appointment_v1_appointment, 2);

/**
 * AppointmentService manages license appointments through NIPR.
 *
 * The appointment flow in NIPR is as follows:
 * 1. A new appointment (or termination) is requested for a license number.
 * 2. Some time later, NIPR processes the request and returns the final result.
 *
 * Since NIPR does not return results immediately, RequestAppointment and TerminateAppointment
 * RPCs will return a processing status of IN_PROGRESS if the request is accepted by NIPR.
 * When the appointment is finally processed by NIPR, ProducerFlow will notify via a webhook of
 * the final result. Also, any call from this point on to ListAppointments or GetAppointment will
 * also return the final result.
 *
 * Any call to this service must be authenticated using an API key in the request headers. The API key
 * can be found in the ProducerFlow API key section of the ProducerFlow UI and it identifies the tenant
 * that is making the request.
 *
 * @generated from service producerflow.appointment.v1.AppointmentService
 */
export const AppointmentService: GenService<{
  /**
   * Retrieves the details of an appointment by its ID.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetAppointment
   */
  getAppointment: {
    methodKind: "unary";
    input: typeof GetAppointmentRequestSchema;
    output: typeof GetAppointmentResponseSchema;
  },
  /**
   * Retrieves the total fees associated with requesting an appointment. Fee amounts are represented
   * as integer values in cents. E.g. $10.34 is sent as 1034.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetAppointmentFees
   */
  getAppointmentFees: {
    methodKind: "unary";
    input: typeof GetAppointmentFeesRequestSchema;
    output: typeof GetAppointmentFeesResponseSchema;
  },
  /**
   * Retrieves the carriers that are available to appoint licenses for the tenant.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetCarriers
   */
  getCarriers: {
    methodKind: "unary";
    input: typeof GetCarriersRequestSchema;
    output: typeof GetCarriersResponseSchema;
  },
  /**
   * Retrieves the total fees associated with terminating an appointment. Fee amounts are represented
   * as integer values in cents. E.g. $10.34 is sent as 1034.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.GetTerminationFees
   */
  getTerminationFees: {
    methodKind: "unary";
    input: typeof GetTerminationFeesRequestSchema;
    output: typeof GetTerminationFeesResponseSchema;
  },
  /**
   * Lists appointments for the tenant, optionally filtered by processing status.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.ListAppointments
   */
  listAppointments: {
    methodKind: "unary";
    input: typeof ListAppointmentsRequestSchema;
    output: typeof ListAppointmentsResponseSchema;
  },
  /**
   * Returns a list of licenses that are eligible to be appointed.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.ListEligibleLicenses
   */
  listEligibleLicenses: {
    methodKind: "unary";
    input: typeof ListEligibleLicensesRequestSchema;
    output: typeof ListEligibleLicensesResponseSchema;
  },
  /**
   * Requests a new appointment for a license that is eligible to be appointed. The simpler way
   * to do this is to call ListEligibleLicenses to get a list of licenses that are eligible to be
   * appointed. Then, call RequestAppointment for the licenses in the list that you want to appoint.
   *
   * If the request is accepted by NIPR, the appointment will have IN_PROGRESS processing status.
   * If rejected, it will have REJECTED status and reasons will be provided in not_eligible_reasons.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.RequestAppointment
   */
  requestAppointment: {
    methodKind: "unary";
    input: typeof RequestAppointmentRequestSchema;
    output: typeof RequestAppointmentResponseSchema;
  },
  /**
   * Terminates an existing appointment by ID, providing a reason.
   *
   * @generated from rpc producerflow.appointment.v1.AppointmentService.TerminateAppointment
   */
  terminateAppointment: {
    methodKind: "unary";
    input: typeof TerminateAppointmentRequestSchema;
    output: typeof TerminateAppointmentResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_producerflow_appointment_v1_appointment, 0);

