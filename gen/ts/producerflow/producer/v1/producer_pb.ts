// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file producerflow/producer/v1/producer.proto (package producerflow.producer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { DayOfWeek } from "../../../google/type/dayofweek_pb";
import { TimeOfDay } from "../../../google/type/timeofday_pb";

/**
 * EntityType defines the business entity type for an agency.
 *
 * @generated from enum producerflow.producer.v1.EntityType
 */
export enum EntityType {
  /**
   * Default unspecified value. Do not use.
   *
   * @generated from enum value: ENTITY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * An individual producer operating as their own agency.
   * For this type, an agency NPN is not allowed, and additional producers are not supported.
   *
   * @generated from enum value: ENTITY_TYPE_SOLE_PROPRIETOR = 1;
   */
  SOLE_PROPRIETOR = 1,

  /**
   * A standard insurance agency that can have multiple producers.
   * For this type, either NPN or FEIN is required.
   *
   * @generated from enum value: ENTITY_TYPE_AGENCY = 2;
   */
  AGENCY = 2,

  /**
   * Ask during onboarding because the entity type is not known when the agency onboarding url is created.
   * The UI will ask the user to select the entity type.
   *
   * @generated from enum value: ENTITY_TYPE_ASK_DURING_ONBOARDING = 3;
   */
  ASK_DURING_ONBOARDING = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(EntityType)
proto3.util.setEnumType(EntityType, "producerflow.producer.v1.EntityType", [
  { no: 0, name: "ENTITY_TYPE_UNSPECIFIED" },
  { no: 1, name: "ENTITY_TYPE_SOLE_PROPRIETOR" },
  { no: 2, name: "ENTITY_TYPE_AGENCY" },
  { no: 3, name: "ENTITY_TYPE_ASK_DURING_ONBOARDING" },
]);

/**
 * ProducerOnboardingState defines the possible states in the producer onboarding workflow.
 * This enum is deprecated and should not be used in new code.
 *
 * @generated from enum producerflow.producer.v1.ProducerOnboardingState
 * @deprecated
 */
export enum ProducerOnboardingState {
  /**
   * @generated from enum value: PRODUCER_ONBOARDING_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The producer has been added to the agency and is awaiting approval from the tenant.
   *
   * @generated from enum value: PRODUCER_ONBOARDING_STATE_NEW = 1;
   */
  NEW = 1,

  /**
   * The producer has been approved by the tenant.
   *
   * @generated from enum value: PRODUCER_ONBOARDING_STATE_APPROVED_BY_TENANT = 2;
   */
  APPROVED_BY_TENANT = 2,

  /**
   * The producer has been rejected by the tenant.
   *
   * @generated from enum value: PRODUCER_ONBOARDING_STATE_REJECTED_BY_TENANT = 3;
   */
  REJECTED_BY_TENANT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ProducerOnboardingState)
proto3.util.setEnumType(ProducerOnboardingState, "producerflow.producer.v1.ProducerOnboardingState", [
  { no: 0, name: "PRODUCER_ONBOARDING_STATE_UNSPECIFIED" },
  { no: 1, name: "PRODUCER_ONBOARDING_STATE_NEW" },
  { no: 2, name: "PRODUCER_ONBOARDING_STATE_APPROVED_BY_TENANT" },
  { no: 3, name: "PRODUCER_ONBOARDING_STATE_REJECTED_BY_TENANT" },
]);

/**
 * Address represents a physical location with standard address components.
 * Used for mailing, physical, and invoicing addresses throughout the API.
 *
 * @generated from message producerflow.producer.v1.Address
 */
export class Address extends Message<Address> {
  /**
   * Street address including house/building number and street name
   *
   * @generated from field: string street = 1;
   */
  street = "";

  /**
   * City of the address
   *
   * @generated from field: string city = 2;
   */
  city = "";

  /**
   * State of the address
   *
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * Zip code of the address
   *
   * @generated from field: string zip = 4;
   */
  zip = "";

  /**
   * County of the address
   *
   * @generated from field: string county = 5;
   */
  county = "";

  constructor(data?: PartialMessage<Address>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Address";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "street", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "zip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "county", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Address {
    return new Address().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJsonString(jsonString, options);
  }

  static equals(a: Address | PlainMessage<Address> | undefined, b: Address | PlainMessage<Address> | undefined): boolean {
    return proto3.util.equals(Address, a, b);
  }
}

/**
 * CreateAgencyOnboardingURLRequest contains information needed to generate
 * an agency onboarding URL. This includes basic agency information and defaults.
 *
 * @generated from message producerflow.producer.v1.CreateAgencyOnboardingURLRequest
 */
export class CreateAgencyOnboardingURLRequest extends Message<CreateAgencyOnboardingURLRequest> {
  /**
   * @generated from field: producerflow.producer.v1.CreateAgencyOnboardingURLRequest.Agency agency = 1;
   */
  agency?: CreateAgencyOnboardingURLRequest_Agency;

  constructor(data?: PartialMessage<CreateAgencyOnboardingURLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.CreateAgencyOnboardingURLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency", kind: "message", T: CreateAgencyOnboardingURLRequest_Agency },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAgencyOnboardingURLRequest {
    return new CreateAgencyOnboardingURLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAgencyOnboardingURLRequest {
    return new CreateAgencyOnboardingURLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAgencyOnboardingURLRequest {
    return new CreateAgencyOnboardingURLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAgencyOnboardingURLRequest | PlainMessage<CreateAgencyOnboardingURLRequest> | undefined, b: CreateAgencyOnboardingURLRequest | PlainMessage<CreateAgencyOnboardingURLRequest> | undefined): boolean {
    return proto3.util.equals(CreateAgencyOnboardingURLRequest, a, b);
  }
}

/**
 * Agency contains the information about the agency to be onboarded
 *
 * @generated from message producerflow.producer.v1.CreateAgencyOnboardingURLRequest.Agency
 */
export class CreateAgencyOnboardingURLRequest_Agency extends Message<CreateAgencyOnboardingURLRequest_Agency> {
  /**
   * Name of the agency
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Entity type of the agency: Sole Proprietor, Agency or Ask during onboarding
   *
   * @generated from field: producerflow.producer.v1.EntityType entity_type = 2;
   */
  entityType = EntityType.UNSPECIFIED;

  /**
   * Tenant agency id is a unique identifier for the agency used by the tenant
   * this is used to identify the agency in the tenant system not in the producerflow system
   *
   * @generated from field: string tenant_agency_id = 3;
   */
  tenantAgencyId = "";

  /**
   * DocuSign template id is the id of the docusign template used to send the contract to the agency
   *
   * @generated from field: string docusign_template_id = 4;
   */
  docusignTemplateId = "";

  /**
   * FEIN (Federal Employer Identification Number) of the agency
   *
   * @generated from field: string fein = 5;
   */
  fein = "";

  /**
   * Email of the agency
   *
   * @generated from field: string email = 6;
   */
  email = "";

  /**
   * Phone of the agency
   *
   * @generated from field: string phone = 7;
   */
  phone = "";

  /**
   * Fax of the agency
   *
   * @generated from field: string fax = 8;
   */
  fax = "";

  /**
   * Website of the agency
   *
   * @generated from field: string website = 9;
   */
  website = "";

  /**
   * NPN of the agency. Note that if the entity type is Sole Proprietor the NPN will be ignored
   *
   * @generated from field: string npn = 10;
   */
  npn = "";

  /**
   * Mailing address of the agency
   *
   * @generated from field: producerflow.producer.v1.Address mailing_address = 11;
   */
  mailingAddress?: Address;

  /**
   * Physical address of the agency
   *
   * @generated from field: producerflow.producer.v1.Address physical_address = 12;
   */
  physicalAddress?: Address;

  /**
   * Invoicing address of the agency
   *
   * @generated from field: producerflow.producer.v1.Address invoicing_address = 13;
   */
  invoicingAddress?: Address;

  /**
   * @generated from field: producerflow.producer.v1.CreateAgencyOnboardingURLRequest.Agency.Principal principal = 14;
   */
  principal?: CreateAgencyOnboardingURLRequest_Agency_Principal;

  constructor(data?: PartialMessage<CreateAgencyOnboardingURLRequest_Agency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.CreateAgencyOnboardingURLRequest.Agency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_type", kind: "enum", T: proto3.getEnumType(EntityType) },
    { no: 3, name: "tenant_agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "docusign_template_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "fein", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "fax", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "mailing_address", kind: "message", T: Address },
    { no: 12, name: "physical_address", kind: "message", T: Address },
    { no: 13, name: "invoicing_address", kind: "message", T: Address },
    { no: 14, name: "principal", kind: "message", T: CreateAgencyOnboardingURLRequest_Agency_Principal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAgencyOnboardingURLRequest_Agency {
    return new CreateAgencyOnboardingURLRequest_Agency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAgencyOnboardingURLRequest_Agency {
    return new CreateAgencyOnboardingURLRequest_Agency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAgencyOnboardingURLRequest_Agency {
    return new CreateAgencyOnboardingURLRequest_Agency().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAgencyOnboardingURLRequest_Agency | PlainMessage<CreateAgencyOnboardingURLRequest_Agency> | undefined, b: CreateAgencyOnboardingURLRequest_Agency | PlainMessage<CreateAgencyOnboardingURLRequest_Agency> | undefined): boolean {
    return proto3.util.equals(CreateAgencyOnboardingURLRequest_Agency, a, b);
  }
}

/**
 * Principal is the person responsible for the agency
 *
 * @generated from message producerflow.producer.v1.CreateAgencyOnboardingURLRequest.Agency.Principal
 */
export class CreateAgencyOnboardingURLRequest_Agency_Principal extends Message<CreateAgencyOnboardingURLRequest_Agency_Principal> {
  /**
   * Tenant ID of the principal
   *
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * First name of the principal
   *
   * @generated from field: string first_name = 2;
   */
  firstName = "";

  /**
   * Last name of the principal
   *
   * @generated from field: string last_name = 3;
   */
  lastName = "";

  /**
   * Middle name of the principal
   *
   * @generated from field: string middle_name = 4;
   */
  middleName = "";

  /**
   * Email of the principal
   *
   * @generated from field: string email = 5;
   */
  email = "";

  /**
   * Phone of the principal
   *
   * @generated from field: string phone = 6;
   */
  phone = "";

  /**
   * NPN of the principal
   *
   * @generated from field: string npn = 7;
   */
  npn = "";

  /**
   * Address of the principal
   *
   * @generated from field: producerflow.producer.v1.Address address = 8;
   */
  address?: Address;

  constructor(data?: PartialMessage<CreateAgencyOnboardingURLRequest_Agency_Principal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.CreateAgencyOnboardingURLRequest.Agency.Principal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "middle_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "address", kind: "message", T: Address },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAgencyOnboardingURLRequest_Agency_Principal {
    return new CreateAgencyOnboardingURLRequest_Agency_Principal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAgencyOnboardingURLRequest_Agency_Principal {
    return new CreateAgencyOnboardingURLRequest_Agency_Principal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAgencyOnboardingURLRequest_Agency_Principal {
    return new CreateAgencyOnboardingURLRequest_Agency_Principal().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAgencyOnboardingURLRequest_Agency_Principal | PlainMessage<CreateAgencyOnboardingURLRequest_Agency_Principal> | undefined, b: CreateAgencyOnboardingURLRequest_Agency_Principal | PlainMessage<CreateAgencyOnboardingURLRequest_Agency_Principal> | undefined): boolean {
    return proto3.util.equals(CreateAgencyOnboardingURLRequest_Agency_Principal, a, b);
  }
}

/**
 * CreateAgencyOnboardingURLResponse contains the generated URL for agency onboarding
 *
 * @generated from message producerflow.producer.v1.CreateAgencyOnboardingURLResponse
 */
export class CreateAgencyOnboardingURLResponse extends Message<CreateAgencyOnboardingURLResponse> {
  /**
   * URL that can be shared with the agency for self-onboarding
   *
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<CreateAgencyOnboardingURLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.CreateAgencyOnboardingURLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAgencyOnboardingURLResponse {
    return new CreateAgencyOnboardingURLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAgencyOnboardingURLResponse {
    return new CreateAgencyOnboardingURLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAgencyOnboardingURLResponse {
    return new CreateAgencyOnboardingURLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAgencyOnboardingURLResponse | PlainMessage<CreateAgencyOnboardingURLResponse> | undefined, b: CreateAgencyOnboardingURLResponse | PlainMessage<CreateAgencyOnboardingURLResponse> | undefined): boolean {
    return proto3.util.equals(CreateAgencyOnboardingURLResponse, a, b);
  }
}

/**
 * NewAgencyRequest contains complete information for creating a new agency
 *
 * @generated from message producerflow.producer.v1.NewAgencyRequest
 */
export class NewAgencyRequest extends Message<NewAgencyRequest> {
  /**
   * @generated from field: producerflow.producer.v1.NewAgencyRequest.Agency agency = 1;
   */
  agency?: NewAgencyRequest_Agency;

  /**
   * Determines if the agency should be auto approved.
   *
   * @generated from field: bool auto_approve = 2 [deprecated = true];
   * @deprecated
   */
  autoApprove = false;

  constructor(data?: PartialMessage<NewAgencyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewAgencyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency", kind: "message", T: NewAgencyRequest_Agency },
    { no: 2, name: "auto_approve", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAgencyRequest {
    return new NewAgencyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAgencyRequest {
    return new NewAgencyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAgencyRequest {
    return new NewAgencyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewAgencyRequest | PlainMessage<NewAgencyRequest> | undefined, b: NewAgencyRequest | PlainMessage<NewAgencyRequest> | undefined): boolean {
    return proto3.util.equals(NewAgencyRequest, a, b);
  }
}

/**
 * Agency contains all information about the agency to be created
 *
 * @generated from message producerflow.producer.v1.NewAgencyRequest.Agency
 */
export class NewAgencyRequest_Agency extends Message<NewAgencyRequest_Agency> {
  /**
   * The name of the agency.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The email address of the agency.
   *
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * National Producer Number for the agency
   * Required for ENTITY_TYPE_AGENCY if FEIN is not provided
   * Not allowed for ENTITY_TYPE_SOLE_PROPRIETOR
   *
   * @generated from field: string npn = 3;
   */
  npn = "";

  /**
   * The phone number of the agency.
   *
   * @generated from field: string phone = 5;
   */
  phone = "";

  /**
   * The website of the agency.
   *
   * @generated from field: string website = 6;
   */
  website = "";

  /**
   * Information about the agency's principal.
   * This is a required field as each agency must have a principal.
   *
   * @generated from field: producerflow.producer.v1.NewAgencyRequest.Agency.Principal principal = 7;
   */
  principal?: NewAgencyRequest_Agency_Principal;

  /**
   * @generated from field: producerflow.producer.v1.NewAgencyRequest.Agency.BankAccount bank_account = 9;
   */
  bankAccount?: NewAgencyRequest_Agency_BankAccount;

  /**
   * @generated from field: producerflow.producer.v1.NewAgencyRequest.Agency.EOInfo eo_info = 10;
   */
  eoInfo?: NewAgencyRequest_Agency_EOInfo;

  /**
   * @generated from field: producerflow.producer.v1.NewAgencyRequest.Agency.BusinessHours business_hours = 11;
   */
  businessHours?: NewAgencyRequest_Agency_BusinessHours;

  /**
   * List of producers associated with the agency
   *
   * @generated from field: repeated producerflow.producer.v1.NewProducer producers = 12;
   */
  producers: NewProducer[] = [];

  /**
   * @generated from field: repeated producerflow.producer.v1.NewAgencyRequest.Agency.PointOfContact points_of_contact = 13;
   */
  pointsOfContact: NewAgencyRequest_Agency_PointOfContact[] = [];

  /**
   * RootOrganizationID represents the ID of the root organization that the agency belongs to.
   * An example of a root organization is an Aggregator (Like AgencyHero) or an Agency Network.
   * We currently don't support multiple levels of organizations or agencies.
   * Agencies are not always part of an organization, so this field is optional.
   *
   * @generated from field: optional string root_organization_id = 14;
   */
  rootOrganizationId?: string;

  /**
   * EntityType represents the type of business entity for an agency.
   *
   * @generated from field: producerflow.producer.v1.EntityType entity_type = 15;
   */
  entityType = EntityType.UNSPECIFIED;

  /**
   * FEIN represents the Federal Employer Identification Number of the agency.
   * Required for ENTITY_TYPE_AGENCY
   * Not allowed for ENTITY_TYPE_SOLE_PROPRIETOR
   *
   * @generated from field: optional string fein = 16;
   */
  fein?: string;

  /**
   * MailingAddress represents the mailing address of the agency.
   *
   * @generated from field: producerflow.producer.v1.Address mailing_address = 8;
   */
  mailingAddress?: Address;

  /**
   * PhysicalAddress represents the physical address of the agency.
   *
   * @generated from field: producerflow.producer.v1.Address physical_address = 17;
   */
  physicalAddress?: Address;

  /**
   * InvoicingAddress represents the invoicing address of the agency.
   *
   * @generated from field: producerflow.producer.v1.Address invoicing_address = 18;
   */
  invoicingAddress?: Address;

  /**
   * TenantAgencyID represents the ID of the agency in the tenant.
   * This is used to link the agency to the tenant.
   *
   * @generated from field: string tenant_agency_id = 19;
   */
  tenantAgencyId = "";

  constructor(data?: PartialMessage<NewAgencyRequest_Agency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewAgencyRequest.Agency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "principal", kind: "message", T: NewAgencyRequest_Agency_Principal },
    { no: 9, name: "bank_account", kind: "message", T: NewAgencyRequest_Agency_BankAccount },
    { no: 10, name: "eo_info", kind: "message", T: NewAgencyRequest_Agency_EOInfo },
    { no: 11, name: "business_hours", kind: "message", T: NewAgencyRequest_Agency_BusinessHours },
    { no: 12, name: "producers", kind: "message", T: NewProducer, repeated: true },
    { no: 13, name: "points_of_contact", kind: "message", T: NewAgencyRequest_Agency_PointOfContact, repeated: true },
    { no: 14, name: "root_organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "entity_type", kind: "enum", T: proto3.getEnumType(EntityType) },
    { no: 16, name: "fein", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "mailing_address", kind: "message", T: Address },
    { no: 17, name: "physical_address", kind: "message", T: Address },
    { no: 18, name: "invoicing_address", kind: "message", T: Address },
    { no: 19, name: "tenant_agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAgencyRequest_Agency {
    return new NewAgencyRequest_Agency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency {
    return new NewAgencyRequest_Agency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency {
    return new NewAgencyRequest_Agency().fromJsonString(jsonString, options);
  }

  static equals(a: NewAgencyRequest_Agency | PlainMessage<NewAgencyRequest_Agency> | undefined, b: NewAgencyRequest_Agency | PlainMessage<NewAgencyRequest_Agency> | undefined): boolean {
    return proto3.util.equals(NewAgencyRequest_Agency, a, b);
  }
}

/**
 * Principal is a data structure that represents the principal of a agency.
 * A principal is the person or entity that is responsible for the day-to-day operations of the agency.
 * The principal is usually the CEO or CFO of the agency.nThe principal is also known as the "owner" of the agency.
 *
 * @generated from message producerflow.producer.v1.NewAgencyRequest.Agency.Principal
 */
export class NewAgencyRequest_Agency_Principal extends Message<NewAgencyRequest_Agency_Principal> {
  /**
   * The first name of the principal.
   *
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * The last name of the principal.
   *
   * @generated from field: string last_name = 2;
   */
  lastName = "";

  /**
   * The middle name of the principal.
   *
   * @generated from field: string middle_name = 13;
   */
  middleName = "";

  /**
   * The email address of the principal.
   *
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * The phone number of the principal.
   *
   * @generated from field: string phone = 4;
   */
  phone = "";

  /**
   * The National Producer Number (NPN) of the principal.
   *
   * @generated from field: string npn = 5;
   */
  npn = "";

  /**
   * @generated from field: string tenant_id = 6;
   */
  tenantId = "";

  constructor(data?: PartialMessage<NewAgencyRequest_Agency_Principal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewAgencyRequest.Agency.Principal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "middle_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAgencyRequest_Agency_Principal {
    return new NewAgencyRequest_Agency_Principal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_Principal {
    return new NewAgencyRequest_Agency_Principal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_Principal {
    return new NewAgencyRequest_Agency_Principal().fromJsonString(jsonString, options);
  }

  static equals(a: NewAgencyRequest_Agency_Principal | PlainMessage<NewAgencyRequest_Agency_Principal> | undefined, b: NewAgencyRequest_Agency_Principal | PlainMessage<NewAgencyRequest_Agency_Principal> | undefined): boolean {
    return proto3.util.equals(NewAgencyRequest_Agency_Principal, a, b);
  }
}

/**
 * BankAccount contains banking information for commission payments
 * This is used to store the bank account information for the agency
 *
 * @generated from message producerflow.producer.v1.NewAgencyRequest.Agency.BankAccount
 */
export class NewAgencyRequest_Agency_BankAccount extends Message<NewAgencyRequest_Agency_BankAccount> {
  /**
   * @generated from field: string account_number = 1;
   */
  accountNumber = "";

  /**
   * Routing number for the bank account
   *
   * @generated from field: string routing_number = 2;
   */
  routingNumber = "";

  /**
   * Type of account (checking or savings)
   *
   * @generated from field: producerflow.producer.v1.NewAgencyRequest.Agency.BankAccount.AccountType account_type = 3;
   */
  accountType = NewAgencyRequest_Agency_BankAccount_AccountType.UNSPECIFIED;

  /**
   * Name of the account holder
   *
   * @generated from field: string account_holder_name = 4;
   */
  accountHolderName = "";

  constructor(data?: PartialMessage<NewAgencyRequest_Agency_BankAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewAgencyRequest.Agency.BankAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routing_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account_type", kind: "enum", T: proto3.getEnumType(NewAgencyRequest_Agency_BankAccount_AccountType) },
    { no: 4, name: "account_holder_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAgencyRequest_Agency_BankAccount {
    return new NewAgencyRequest_Agency_BankAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_BankAccount {
    return new NewAgencyRequest_Agency_BankAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_BankAccount {
    return new NewAgencyRequest_Agency_BankAccount().fromJsonString(jsonString, options);
  }

  static equals(a: NewAgencyRequest_Agency_BankAccount | PlainMessage<NewAgencyRequest_Agency_BankAccount> | undefined, b: NewAgencyRequest_Agency_BankAccount | PlainMessage<NewAgencyRequest_Agency_BankAccount> | undefined): boolean {
    return proto3.util.equals(NewAgencyRequest_Agency_BankAccount, a, b);
  }
}

/**
 * @generated from enum producerflow.producer.v1.NewAgencyRequest.Agency.BankAccount.AccountType
 */
export enum NewAgencyRequest_Agency_BankAccount_AccountType {
  /**
   * Default unspecified value. Avoid using this.
   *
   * @generated from enum value: ACCOUNT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Standard checking account
   *
   * @generated from enum value: ACCOUNT_TYPE_CHECKING = 1;
   */
  CHECKING = 1,

  /**
   * Savings account
   *
   * @generated from enum value: ACCOUNT_TYPE_SAVINGS = 2;
   */
  SAVINGS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NewAgencyRequest_Agency_BankAccount_AccountType)
proto3.util.setEnumType(NewAgencyRequest_Agency_BankAccount_AccountType, "producerflow.producer.v1.NewAgencyRequest.Agency.BankAccount.AccountType", [
  { no: 0, name: "ACCOUNT_TYPE_UNSPECIFIED" },
  { no: 1, name: "ACCOUNT_TYPE_CHECKING" },
  { no: 2, name: "ACCOUNT_TYPE_SAVINGS" },
]);

/**
 * EOInfo contains Errors & Omissions insurance information
 *
 * @generated from message producerflow.producer.v1.NewAgencyRequest.Agency.EOInfo
 */
export class NewAgencyRequest_Agency_EOInfo extends Message<NewAgencyRequest_Agency_EOInfo> {
  /**
   * Insurance carrier providing the E&O coverage
   *
   * @generated from field: string carrier = 1;
   */
  carrier = "";

  /**
   * Date when the E&O coverage will expire
   *
   * @generated from field: google.protobuf.Timestamp expiration_date = 2;
   */
  expirationDate?: Timestamp;

  /**
   * Amount of coverage provided by the E&O policy
   *
   * @generated from field: string coverage_amount = 3;
   */
  coverageAmount = "";

  /**
   * Date when the E&O coverage will become effective
   *
   * @generated from field: google.protobuf.Timestamp effective_date = 4;
   */
  effectiveDate?: Timestamp;

  constructor(data?: PartialMessage<NewAgencyRequest_Agency_EOInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewAgencyRequest.Agency.EOInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "carrier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiration_date", kind: "message", T: Timestamp },
    { no: 3, name: "coverage_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "effective_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAgencyRequest_Agency_EOInfo {
    return new NewAgencyRequest_Agency_EOInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_EOInfo {
    return new NewAgencyRequest_Agency_EOInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_EOInfo {
    return new NewAgencyRequest_Agency_EOInfo().fromJsonString(jsonString, options);
  }

  static equals(a: NewAgencyRequest_Agency_EOInfo | PlainMessage<NewAgencyRequest_Agency_EOInfo> | undefined, b: NewAgencyRequest_Agency_EOInfo | PlainMessage<NewAgencyRequest_Agency_EOInfo> | undefined): boolean {
    return proto3.util.equals(NewAgencyRequest_Agency_EOInfo, a, b);
  }
}

/**
 * BusinessHours contains the business hours of the agency
 *
 * @generated from message producerflow.producer.v1.NewAgencyRequest.Agency.BusinessHours
 */
export class NewAgencyRequest_Agency_BusinessHours extends Message<NewAgencyRequest_Agency_BusinessHours> {
  /**
   * Timezone of the agency
   *
   * @generated from field: string timezone = 1;
   */
  timezone = "";

  /**
   * @generated from field: repeated producerflow.producer.v1.NewAgencyRequest.Agency.BusinessHours.BusinessHour business_hours = 2;
   */
  businessHours: NewAgencyRequest_Agency_BusinessHours_BusinessHour[] = [];

  constructor(data?: PartialMessage<NewAgencyRequest_Agency_BusinessHours>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewAgencyRequest.Agency.BusinessHours";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "business_hours", kind: "message", T: NewAgencyRequest_Agency_BusinessHours_BusinessHour, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAgencyRequest_Agency_BusinessHours {
    return new NewAgencyRequest_Agency_BusinessHours().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_BusinessHours {
    return new NewAgencyRequest_Agency_BusinessHours().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_BusinessHours {
    return new NewAgencyRequest_Agency_BusinessHours().fromJsonString(jsonString, options);
  }

  static equals(a: NewAgencyRequest_Agency_BusinessHours | PlainMessage<NewAgencyRequest_Agency_BusinessHours> | undefined, b: NewAgencyRequest_Agency_BusinessHours | PlainMessage<NewAgencyRequest_Agency_BusinessHours> | undefined): boolean {
    return proto3.util.equals(NewAgencyRequest_Agency_BusinessHours, a, b);
  }
}

/**
 * @generated from message producerflow.producer.v1.NewAgencyRequest.Agency.BusinessHours.BusinessHour
 */
export class NewAgencyRequest_Agency_BusinessHours_BusinessHour extends Message<NewAgencyRequest_Agency_BusinessHours_BusinessHour> {
  /**
   * Days of the week when the agency is open
   *
   * @generated from field: repeated google.type.DayOfWeek week_days = 1;
   */
  weekDays: DayOfWeek[] = [];

  /**
   * Time when the agency opens
   *
   * @generated from field: google.type.TimeOfDay opening_time = 2;
   */
  openingTime?: TimeOfDay;

  /**
   * Time when the agency closes
   *
   * @generated from field: google.type.TimeOfDay closing_time = 3;
   */
  closingTime?: TimeOfDay;

  constructor(data?: PartialMessage<NewAgencyRequest_Agency_BusinessHours_BusinessHour>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewAgencyRequest.Agency.BusinessHours.BusinessHour";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "week_days", kind: "enum", T: proto3.getEnumType(DayOfWeek), repeated: true },
    { no: 2, name: "opening_time", kind: "message", T: TimeOfDay },
    { no: 3, name: "closing_time", kind: "message", T: TimeOfDay },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAgencyRequest_Agency_BusinessHours_BusinessHour {
    return new NewAgencyRequest_Agency_BusinessHours_BusinessHour().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_BusinessHours_BusinessHour {
    return new NewAgencyRequest_Agency_BusinessHours_BusinessHour().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_BusinessHours_BusinessHour {
    return new NewAgencyRequest_Agency_BusinessHours_BusinessHour().fromJsonString(jsonString, options);
  }

  static equals(a: NewAgencyRequest_Agency_BusinessHours_BusinessHour | PlainMessage<NewAgencyRequest_Agency_BusinessHours_BusinessHour> | undefined, b: NewAgencyRequest_Agency_BusinessHours_BusinessHour | PlainMessage<NewAgencyRequest_Agency_BusinessHours_BusinessHour> | undefined): boolean {
    return proto3.util.equals(NewAgencyRequest_Agency_BusinessHours_BusinessHour, a, b);
  }
}

/**
 * PointOfContact contains contact information for the agency. Each point of contact
 * consists of an email address with an associated role. Carriers will send specific
 * information to these email addresses based on their roles. For example, if an email
 * is assigned the COMMUNICATION_ROLE_ACCOUNTING role, all accounting information from
 * the carrier will be sent to that email address.
 *
 * @generated from message producerflow.producer.v1.NewAgencyRequest.Agency.PointOfContact
 */
export class NewAgencyRequest_Agency_PointOfContact extends Message<NewAgencyRequest_Agency_PointOfContact> {
  /**
   * Email address of the point of contact
   *
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * Role of the point of contact
   *
   * @generated from field: producerflow.producer.v1.NewAgencyRequest.Agency.PointOfContact.CommunicationRole role = 2;
   */
  role = NewAgencyRequest_Agency_PointOfContact_CommunicationRole.UNSPECIFIED;

  constructor(data?: PartialMessage<NewAgencyRequest_Agency_PointOfContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewAgencyRequest.Agency.PointOfContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "enum", T: proto3.getEnumType(NewAgencyRequest_Agency_PointOfContact_CommunicationRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAgencyRequest_Agency_PointOfContact {
    return new NewAgencyRequest_Agency_PointOfContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_PointOfContact {
    return new NewAgencyRequest_Agency_PointOfContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAgencyRequest_Agency_PointOfContact {
    return new NewAgencyRequest_Agency_PointOfContact().fromJsonString(jsonString, options);
  }

  static equals(a: NewAgencyRequest_Agency_PointOfContact | PlainMessage<NewAgencyRequest_Agency_PointOfContact> | undefined, b: NewAgencyRequest_Agency_PointOfContact | PlainMessage<NewAgencyRequest_Agency_PointOfContact> | undefined): boolean {
    return proto3.util.equals(NewAgencyRequest_Agency_PointOfContact, a, b);
  }
}

/**
 * @generated from enum producerflow.producer.v1.NewAgencyRequest.Agency.PointOfContact.CommunicationRole
 */
export enum NewAgencyRequest_Agency_PointOfContact_CommunicationRole {
  /**
   * Default unspecified value. Avoid using this.
   *
   * @generated from enum value: COMMUNICATION_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Accounting role
   *
   * @generated from enum value: COMMUNICATION_ROLE_ACCOUNTING = 1;
   */
  ACCOUNTING = 1,

  /**
   * Licensing role
   *
   * @generated from enum value: COMMUNICATION_ROLE_LICENSING = 2;
   */
  LICENSING = 2,

  /**
   * Reporting role
   *
   * @generated from enum value: COMMUNICATION_ROLE_REPORTING = 3;
   */
  REPORTING = 3,

  /**
   * Sales role
   *
   * @generated from enum value: COMMUNICATION_ROLE_SALES = 4;
   */
  SALES = 4,

  /**
   * Customer service role
   *
   * @generated from enum value: COMMUNICATION_ROLE_CUSTOMER_SERVICE = 5;
   */
  CUSTOMER_SERVICE = 5,

  /**
   * All roles
   *
   * @generated from enum value: COMMUNICATION_ROLE_ALL = 6;
   */
  ALL = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(NewAgencyRequest_Agency_PointOfContact_CommunicationRole)
proto3.util.setEnumType(NewAgencyRequest_Agency_PointOfContact_CommunicationRole, "producerflow.producer.v1.NewAgencyRequest.Agency.PointOfContact.CommunicationRole", [
  { no: 0, name: "COMMUNICATION_ROLE_UNSPECIFIED" },
  { no: 1, name: "COMMUNICATION_ROLE_ACCOUNTING" },
  { no: 2, name: "COMMUNICATION_ROLE_LICENSING" },
  { no: 3, name: "COMMUNICATION_ROLE_REPORTING" },
  { no: 4, name: "COMMUNICATION_ROLE_SALES" },
  { no: 5, name: "COMMUNICATION_ROLE_CUSTOMER_SERVICE" },
  { no: 6, name: "COMMUNICATION_ROLE_ALL" },
]);

/**
 * NewAgencyResponse contains the IDs of created resources after a successful agency creation
 *
 * @generated from message producerflow.producer.v1.NewAgencyResponse
 */
export class NewAgencyResponse extends Message<NewAgencyResponse> {
  /**
   * Unique identifier for the created agency
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  /**
   * List of unique identifiers for any producers created with the agency
   *
   * @generated from field: repeated string producer_ids = 2;
   */
  producerIds: string[] = [];

  /**
   * Unique identifier for the principal producer
   *
   * @generated from field: string principal_id = 3;
   */
  principalId = "";

  constructor(data?: PartialMessage<NewAgencyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewAgencyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "producer_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "principal_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAgencyResponse {
    return new NewAgencyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAgencyResponse {
    return new NewAgencyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAgencyResponse {
    return new NewAgencyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewAgencyResponse | PlainMessage<NewAgencyResponse> | undefined, b: NewAgencyResponse | PlainMessage<NewAgencyResponse> | undefined): boolean {
    return proto3.util.equals(NewAgencyResponse, a, b);
  }
}

/**
 * GetProducerRequest allows retrieving producer information through one of three
 * possible lookup methods: by ID, by NPN, or by email address.
 *
 * @generated from message producerflow.producer.v1.GetProducerRequest
 */
export class GetProducerRequest extends Message<GetProducerRequest> {
  /**
   * Only one lookup method can be specified.
   *
   * @generated from oneof producerflow.producer.v1.GetProducerRequest.lookup_method
   */
  lookupMethod: {
    /**
     * Look up producer by ID.
     *
     * @generated from field: producerflow.producer.v1.GetProducerRequest.ProducerIDLookup producer_id_lookup = 1;
     */
    value: GetProducerRequest_ProducerIDLookup;
    case: "producerIdLookup";
  } | {
    /**
     * Look up producer by NPN.
     *
     * @generated from field: producerflow.producer.v1.GetProducerRequest.ProducerNPNLookup npn_lookup = 2;
     */
    value: GetProducerRequest_ProducerNPNLookup;
    case: "npnLookup";
  } | {
    /**
     * Look up producer by email.
     *
     * @generated from field: producerflow.producer.v1.GetProducerRequest.EmailLookup email_lookup = 3;
     */
    value: GetProducerRequest_EmailLookup;
    case: "emailLookup";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetProducerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.GetProducerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id_lookup", kind: "message", T: GetProducerRequest_ProducerIDLookup, oneof: "lookup_method" },
    { no: 2, name: "npn_lookup", kind: "message", T: GetProducerRequest_ProducerNPNLookup, oneof: "lookup_method" },
    { no: 3, name: "email_lookup", kind: "message", T: GetProducerRequest_EmailLookup, oneof: "lookup_method" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProducerRequest {
    return new GetProducerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProducerRequest {
    return new GetProducerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProducerRequest {
    return new GetProducerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProducerRequest | PlainMessage<GetProducerRequest> | undefined, b: GetProducerRequest | PlainMessage<GetProducerRequest> | undefined): boolean {
    return proto3.util.equals(GetProducerRequest, a, b);
  }
}

/**
 * ProducerIDLookup allows looking up a producer by their unique identifier.
 *
 * @generated from message producerflow.producer.v1.GetProducerRequest.ProducerIDLookup
 */
export class GetProducerRequest_ProducerIDLookup extends Message<GetProducerRequest_ProducerIDLookup> {
  /**
   * The UUID of the producer to retrieve.
   * Must be a valid UUID format.
   *
   * @generated from field: string producer_id = 1;
   */
  producerId = "";

  constructor(data?: PartialMessage<GetProducerRequest_ProducerIDLookup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.GetProducerRequest.ProducerIDLookup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProducerRequest_ProducerIDLookup {
    return new GetProducerRequest_ProducerIDLookup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProducerRequest_ProducerIDLookup {
    return new GetProducerRequest_ProducerIDLookup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProducerRequest_ProducerIDLookup {
    return new GetProducerRequest_ProducerIDLookup().fromJsonString(jsonString, options);
  }

  static equals(a: GetProducerRequest_ProducerIDLookup | PlainMessage<GetProducerRequest_ProducerIDLookup> | undefined, b: GetProducerRequest_ProducerIDLookup | PlainMessage<GetProducerRequest_ProducerIDLookup> | undefined): boolean {
    return proto3.util.equals(GetProducerRequest_ProducerIDLookup, a, b);
  }
}

/**
 * ProducerNPNLookup allows looking up a producer by their National Producer Number (NPN).
 *
 * @generated from message producerflow.producer.v1.GetProducerRequest.ProducerNPNLookup
 */
export class GetProducerRequest_ProducerNPNLookup extends Message<GetProducerRequest_ProducerNPNLookup> {
  /**
   * The National Producer Number (NPN) of the producer to retrieve.
   * Must be a non-empty string.
   *
   * @generated from field: string producer_npn = 1;
   */
  producerNpn = "";

  constructor(data?: PartialMessage<GetProducerRequest_ProducerNPNLookup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.GetProducerRequest.ProducerNPNLookup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProducerRequest_ProducerNPNLookup {
    return new GetProducerRequest_ProducerNPNLookup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProducerRequest_ProducerNPNLookup {
    return new GetProducerRequest_ProducerNPNLookup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProducerRequest_ProducerNPNLookup {
    return new GetProducerRequest_ProducerNPNLookup().fromJsonString(jsonString, options);
  }

  static equals(a: GetProducerRequest_ProducerNPNLookup | PlainMessage<GetProducerRequest_ProducerNPNLookup> | undefined, b: GetProducerRequest_ProducerNPNLookup | PlainMessage<GetProducerRequest_ProducerNPNLookup> | undefined): boolean {
    return proto3.util.equals(GetProducerRequest_ProducerNPNLookup, a, b);
  }
}

/**
 * EmailLookup allows looking up a producer by their email address.
 *
 * @generated from message producerflow.producer.v1.GetProducerRequest.EmailLookup
 */
export class GetProducerRequest_EmailLookup extends Message<GetProducerRequest_EmailLookup> {
  /**
   * The email address of the producer to retrieve.
   * Must be a valid email format.
   *
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<GetProducerRequest_EmailLookup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.GetProducerRequest.EmailLookup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProducerRequest_EmailLookup {
    return new GetProducerRequest_EmailLookup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProducerRequest_EmailLookup {
    return new GetProducerRequest_EmailLookup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProducerRequest_EmailLookup {
    return new GetProducerRequest_EmailLookup().fromJsonString(jsonString, options);
  }

  static equals(a: GetProducerRequest_EmailLookup | PlainMessage<GetProducerRequest_EmailLookup> | undefined, b: GetProducerRequest_EmailLookup | PlainMessage<GetProducerRequest_EmailLookup> | undefined): boolean {
    return proto3.util.equals(GetProducerRequest_EmailLookup, a, b);
  }
}

/**
 * GetProducerResponse contains the producer information retrieved by the GetProducer RPC.
 *
 * @generated from message producerflow.producer.v1.GetProducerResponse
 */
export class GetProducerResponse extends Message<GetProducerResponse> {
  /**
   * The complete producer information including personal details, agency association,
   * and NIPR data.
   *
   * @generated from field: producerflow.producer.v1.Producer producer = 1;
   */
  producer?: Producer;

  constructor(data?: PartialMessage<GetProducerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.GetProducerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer", kind: "message", T: Producer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProducerResponse {
    return new GetProducerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProducerResponse {
    return new GetProducerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProducerResponse {
    return new GetProducerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProducerResponse | PlainMessage<GetProducerResponse> | undefined, b: GetProducerResponse | PlainMessage<GetProducerResponse> | undefined): boolean {
    return proto3.util.equals(GetProducerResponse, a, b);
  }
}

/**
 * GetAgencyAndProducersRequest requests information about an agency and all associated producers.
 *
 * @generated from message producerflow.producer.v1.GetAgencyAndProducersRequest
 */
export class GetAgencyAndProducersRequest extends Message<GetAgencyAndProducersRequest> {
  /**
   * The UUID of the agency to retrieve information for.
   * Must be a valid UUID format.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  constructor(data?: PartialMessage<GetAgencyAndProducersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.GetAgencyAndProducersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAgencyAndProducersRequest {
    return new GetAgencyAndProducersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAgencyAndProducersRequest {
    return new GetAgencyAndProducersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAgencyAndProducersRequest {
    return new GetAgencyAndProducersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAgencyAndProducersRequest | PlainMessage<GetAgencyAndProducersRequest> | undefined, b: GetAgencyAndProducersRequest | PlainMessage<GetAgencyAndProducersRequest> | undefined): boolean {
    return proto3.util.equals(GetAgencyAndProducersRequest, a, b);
  }
}

/**
 * GetAgencyAndProducersResponse contains the agency information and all associated producers.
 *
 * @generated from message producerflow.producer.v1.GetAgencyAndProducersResponse
 */
export class GetAgencyAndProducersResponse extends Message<GetAgencyAndProducersResponse> {
  /**
   * Complete agency information including contact details, principal, and bank account.
   *
   * @generated from field: producerflow.producer.v1.Agency agency = 1;
   */
  agency?: Agency;

  /**
   * List of all producers associated with the specified agency.
   *
   * @generated from field: repeated producerflow.producer.v1.Producer producers = 2;
   */
  producers: Producer[] = [];

  constructor(data?: PartialMessage<GetAgencyAndProducersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.GetAgencyAndProducersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency", kind: "message", T: Agency },
    { no: 2, name: "producers", kind: "message", T: Producer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAgencyAndProducersResponse {
    return new GetAgencyAndProducersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAgencyAndProducersResponse {
    return new GetAgencyAndProducersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAgencyAndProducersResponse {
    return new GetAgencyAndProducersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAgencyAndProducersResponse | PlainMessage<GetAgencyAndProducersResponse> | undefined, b: GetAgencyAndProducersResponse | PlainMessage<GetAgencyAndProducersResponse> | undefined): boolean {
    return proto3.util.equals(GetAgencyAndProducersResponse, a, b);
  }
}

/**
 * GetAgencyFilesRequest requests URLs for files associated with an agency.
 *
 * @generated from message producerflow.producer.v1.GetAgencyFilesRequest
 */
export class GetAgencyFilesRequest extends Message<GetAgencyFilesRequest> {
  /**
   * The UUID of the agency to retrieve files for.
   * Must be a valid UUID format.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  constructor(data?: PartialMessage<GetAgencyFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.GetAgencyFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAgencyFilesRequest {
    return new GetAgencyFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAgencyFilesRequest {
    return new GetAgencyFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAgencyFilesRequest {
    return new GetAgencyFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAgencyFilesRequest | PlainMessage<GetAgencyFilesRequest> | undefined, b: GetAgencyFilesRequest | PlainMessage<GetAgencyFilesRequest> | undefined): boolean {
    return proto3.util.equals(GetAgencyFilesRequest, a, b);
  }
}

/**
 * GetAgencyFilesResponse contains URLs for various documents associated with an agency.
 *
 * @generated from message producerflow.producer.v1.GetAgencyFilesResponse
 */
export class GetAgencyFilesResponse extends Message<GetAgencyFilesResponse> {
  /**
   * URL of the Errors & Omissions (E&O) insurance document.
   *
   * @generated from field: string eo_doc_url = 1;
   */
  eoDocUrl = "";

  /**
   * URL of the bank voided check document.
   * It's used to safely share bank account information for
   * electronic transfers.
   *
   * @generated from field: string voided_check_doc_url = 2;
   */
  voidedCheckDocUrl = "";

  /**
   * URL of the W9 form document.
   * It's a U.S. internal revenue service form, an identification
   * document used in the onboarding process for tax reporting purposes.
   *
   * @generated from field: string w9_doc_url = 3;
   */
  w9DocUrl = "";

  /**
   * URL of the license document.
   * An identification document that shows that the agency
   * is licensed to carry out its operations in the relevant jurisdictions.
   *
   * @generated from field: string license_doc_url = 4;
   */
  licenseDocUrl = "";

  /**
   * URL of the broker bond document.
   * It's a surety bond that a broker needs to operate legally,
   * providing financial security for clients.
   *
   * @generated from field: string broker_bond_doc_url = 5;
   */
  brokerBondDocUrl = "";

  constructor(data?: PartialMessage<GetAgencyFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.GetAgencyFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "eo_doc_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "voided_check_doc_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "w9_doc_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "license_doc_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "broker_bond_doc_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAgencyFilesResponse {
    return new GetAgencyFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAgencyFilesResponse {
    return new GetAgencyFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAgencyFilesResponse {
    return new GetAgencyFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAgencyFilesResponse | PlainMessage<GetAgencyFilesResponse> | undefined, b: GetAgencyFilesResponse | PlainMessage<GetAgencyFilesResponse> | undefined): boolean {
    return proto3.util.equals(GetAgencyFilesResponse, a, b);
  }
}

/**
 * UpdateProducerRequest contains the fields that can be updated in a producer record.
 * Only information collected during the onboarding process can be updated.
 * Information from NIPR and other third-party sources cannot be updated directly.
 *
 * @generated from message producerflow.producer.v1.UpdateProducerRequest
 */
export class UpdateProducerRequest extends Message<UpdateProducerRequest> {
  /**
   * The ID of the producer to update.
   * Must be a valid UUID format.
   *
   * @generated from field: string producer_id = 1;
   */
  producerId = "";

  /**
   * The producer information to update.
   * The field is required.
   *
   * @generated from field: producerflow.producer.v1.UpdateProducerRequest.Producer producer = 2;
   */
  producer?: UpdateProducerRequest_Producer;

  constructor(data?: PartialMessage<UpdateProducerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.UpdateProducerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "producer", kind: "message", T: UpdateProducerRequest_Producer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProducerRequest {
    return new UpdateProducerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProducerRequest {
    return new UpdateProducerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProducerRequest {
    return new UpdateProducerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProducerRequest | PlainMessage<UpdateProducerRequest> | undefined, b: UpdateProducerRequest | PlainMessage<UpdateProducerRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProducerRequest, a, b);
  }
}

/**
 * Producer contains the fields that can be updated for a producer.
 * All fields are optional, allowing partial updates.
 *
 * @generated from message producerflow.producer.v1.UpdateProducerRequest.Producer
 */
export class UpdateProducerRequest_Producer extends Message<UpdateProducerRequest_Producer> {
  /**
   * First name of the producer.
   * If provided, must be non-empty.
   *
   * @generated from field: optional string first_name = 1;
   */
  firstName?: string;

  /**
   * Last name of the producer.
   * If provided, must be non-empty.
   *
   * @generated from field: optional string last_name = 2;
   */
  lastName?: string;

  /**
   * Middle name of the producer.
   * If provided, must be non-empty.
   *
   * @generated from field: optional string middle_name = 10;
   */
  middleName?: string;

  /**
   * Email address of the producer.
   * If provided, must be a valid email format.
   * Must be unique within the tenant.
   *
   * @generated from field: optional string email = 3;
   */
  email?: string;

  /**
   * National Producer Number (NPN) of the producer.
   * If provided, must be non-empty.
   *
   * @generated from field: optional string npn = 4;
   */
  npn?: string;

  /**
   * Phone number of the producer.
   * If provided, must be a valid phone number format.
   *
   * @generated from field: optional string phone = 5;
   */
  phone?: string;

  /**
   * Street address of the producer.
   * If provided, must be non-empty.
   *
   * @generated from field: optional string street = 6;
   */
  street?: string;

  /**
   * City of the producer.
   * If provided, must be non-empty.
   *
   * @generated from field: optional string city = 7;
   */
  city?: string;

  /**
   * State of the producer.
   * If provided, must be non-empty.
   *
   * @generated from field: optional string state = 8;
   */
  state?: string;

  /**
   * ZIP code of the producer's address.
   * If provided, must be at least 5 characters.
   *
   * @generated from field: optional string zip = 9;
   */
  zip?: string;

  constructor(data?: PartialMessage<UpdateProducerRequest_Producer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.UpdateProducerRequest.Producer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "middle_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "street", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "zip", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProducerRequest_Producer {
    return new UpdateProducerRequest_Producer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProducerRequest_Producer {
    return new UpdateProducerRequest_Producer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProducerRequest_Producer {
    return new UpdateProducerRequest_Producer().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProducerRequest_Producer | PlainMessage<UpdateProducerRequest_Producer> | undefined, b: UpdateProducerRequest_Producer | PlainMessage<UpdateProducerRequest_Producer> | undefined): boolean {
    return proto3.util.equals(UpdateProducerRequest_Producer, a, b);
  }
}

/**
 * UpdateProducerResponse is the empty response returned after successfully updating a producer.
 *
 * @generated from message producerflow.producer.v1.UpdateProducerResponse
 */
export class UpdateProducerResponse extends Message<UpdateProducerResponse> {
  constructor(data?: PartialMessage<UpdateProducerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.UpdateProducerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProducerResponse {
    return new UpdateProducerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProducerResponse {
    return new UpdateProducerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProducerResponse {
    return new UpdateProducerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProducerResponse | PlainMessage<UpdateProducerResponse> | undefined, b: UpdateProducerResponse | PlainMessage<UpdateProducerResponse> | undefined): boolean {
    return proto3.util.equals(UpdateProducerResponse, a, b);
  }
}

/**
 * ListNewProducersRequest requests a list of new producers, optionally filtered by agency.
 *
 * @generated from message producerflow.producer.v1.ListNewProducersRequest
 */
export class ListNewProducersRequest extends Message<ListNewProducersRequest> {
  /**
   * Optional agency ID to filter producers by.
   * If provided, only producers belonging to this agency will be returned.
   * If not provided, producers from all agencies will be returned.
   *
   * @generated from field: optional string agency_id = 1;
   */
  agencyId?: string;

  constructor(data?: PartialMessage<ListNewProducersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ListNewProducersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNewProducersRequest {
    return new ListNewProducersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNewProducersRequest {
    return new ListNewProducersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNewProducersRequest {
    return new ListNewProducersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNewProducersRequest | PlainMessage<ListNewProducersRequest> | undefined, b: ListNewProducersRequest | PlainMessage<ListNewProducersRequest> | undefined): boolean {
    return proto3.util.equals(ListNewProducersRequest, a, b);
  }
}

/**
 * ListNewProducersResponse contains a list of new producers that match the filter criteria.
 *
 * @generated from message producerflow.producer.v1.ListNewProducersResponse
 */
export class ListNewProducersResponse extends Message<ListNewProducersResponse> {
  /**
   * List of new producers matching the filter criteria.
   * These are producers typically in the NEW or pending onboarding state.
   *
   * @generated from field: repeated producerflow.producer.v1.Producer new_producers = 1;
   */
  newProducers: Producer[] = [];

  constructor(data?: PartialMessage<ListNewProducersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ListNewProducersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_producers", kind: "message", T: Producer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNewProducersResponse {
    return new ListNewProducersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNewProducersResponse {
    return new ListNewProducersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNewProducersResponse {
    return new ListNewProducersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListNewProducersResponse | PlainMessage<ListNewProducersResponse> | undefined, b: ListNewProducersResponse | PlainMessage<ListNewProducersResponse> | undefined): boolean {
    return proto3.util.equals(ListNewProducersResponse, a, b);
  }
}

/**
 * ApproveProducerRequest requests approval for a producer in the onboarding process.
 *
 * @generated from message producerflow.producer.v1.ApproveProducerRequest
 * @deprecated
 */
export class ApproveProducerRequest extends Message<ApproveProducerRequest> {
  /**
   * The UUID of the producer to approve.
   * Must be a valid UUID format.
   *
   * @generated from field: string producer_id = 1;
   */
  producerId = "";

  constructor(data?: PartialMessage<ApproveProducerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ApproveProducerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveProducerRequest {
    return new ApproveProducerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveProducerRequest {
    return new ApproveProducerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveProducerRequest {
    return new ApproveProducerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApproveProducerRequest | PlainMessage<ApproveProducerRequest> | undefined, b: ApproveProducerRequest | PlainMessage<ApproveProducerRequest> | undefined): boolean {
    return proto3.util.equals(ApproveProducerRequest, a, b);
  }
}

/**
 * ApproveProducerResponse is the empty response returned after successfully approving a producer.
 *
 * @generated from message producerflow.producer.v1.ApproveProducerResponse
 */
export class ApproveProducerResponse extends Message<ApproveProducerResponse> {
  constructor(data?: PartialMessage<ApproveProducerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ApproveProducerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveProducerResponse {
    return new ApproveProducerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveProducerResponse {
    return new ApproveProducerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveProducerResponse {
    return new ApproveProducerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ApproveProducerResponse | PlainMessage<ApproveProducerResponse> | undefined, b: ApproveProducerResponse | PlainMessage<ApproveProducerResponse> | undefined): boolean {
    return proto3.util.equals(ApproveProducerResponse, a, b);
  }
}

/**
 * RejectProducerRequest requests rejection of a producer in the onboarding process.
 *
 * @generated from message producerflow.producer.v1.RejectProducerRequest
 */
export class RejectProducerRequest extends Message<RejectProducerRequest> {
  /**
   * The UUID of the producer to reject.
   * Must be a valid UUID format.
   *
   * @generated from field: string producer_id = 1;
   */
  producerId = "";

  /**
   * The reason for rejecting the producer.
   * Must be non-empty to provide context for the rejection.
   *
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<RejectProducerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.RejectProducerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RejectProducerRequest {
    return new RejectProducerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RejectProducerRequest {
    return new RejectProducerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RejectProducerRequest {
    return new RejectProducerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RejectProducerRequest | PlainMessage<RejectProducerRequest> | undefined, b: RejectProducerRequest | PlainMessage<RejectProducerRequest> | undefined): boolean {
    return proto3.util.equals(RejectProducerRequest, a, b);
  }
}

/**
 * RejectProducerResponse is the empty response returned after successfully rejecting a producer.
 *
 * @generated from message producerflow.producer.v1.RejectProducerResponse
 */
export class RejectProducerResponse extends Message<RejectProducerResponse> {
  constructor(data?: PartialMessage<RejectProducerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.RejectProducerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RejectProducerResponse {
    return new RejectProducerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RejectProducerResponse {
    return new RejectProducerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RejectProducerResponse {
    return new RejectProducerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RejectProducerResponse | PlainMessage<RejectProducerResponse> | undefined, b: RejectProducerResponse | PlainMessage<RejectProducerResponse> | undefined): boolean {
    return proto3.util.equals(RejectProducerResponse, a, b);
  }
}

/**
 * Agency represents a complete agency entity with all associated information.
 *
 * @generated from message producerflow.producer.v1.Agency
 */
export class Agency extends Message<Agency> {
  /**
   * Unique identifier for the agency.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  /**
   * AgencyInfo type field named agency_info
   *
   * @generated from field: producerflow.producer.v1.Agency.AgencyInfo agency_info = 2;
   */
  agencyInfo?: Agency_AgencyInfo;

  /**
   * Address type field named address.
   *
   * @generated from field: producerflow.producer.v1.Agency.Address address = 3;
   */
  address?: Agency_Address;

  /**
   * Address type field named mailing_address.
   *
   * @generated from field: producerflow.producer.v1.Agency.Address mailing_address = 4;
   */
  mailingAddress?: Agency_Address;

  /**
   * Banking information for commission payments.
   * Used for electronic transfers of commissions and other payments.
   *
   * @generated from field: producerflow.producer.v1.Agency.BankAccount bank_account = 5;
   */
  bankAccount?: Agency_BankAccount;

  /**
   * @generated from field: producerflow.producer.v1.Agency.EOInfo eo_info = 6;
   */
  eoInfo?: Agency_EOInfo;

  /**
   * Information about the agency's principal.
   * This is a required field as each agency must have a principal.
   *
   * @generated from field: producerflow.producer.v1.Agency.Principal principal = 7;
   */
  principal?: Agency_Principal;

  /**
   * IVANS account information for electronic carrier communication.
   * This is optional and only used if the agency uses IVANS.
   *
   * @generated from field: producerflow.producer.v1.Agency.IvansAccount ivans_account = 8;
   */
  ivansAccount?: Agency_IvansAccount;

  constructor(data?: PartialMessage<Agency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Agency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "agency_info", kind: "message", T: Agency_AgencyInfo },
    { no: 3, name: "address", kind: "message", T: Agency_Address },
    { no: 4, name: "mailing_address", kind: "message", T: Agency_Address },
    { no: 5, name: "bank_account", kind: "message", T: Agency_BankAccount },
    { no: 6, name: "eo_info", kind: "message", T: Agency_EOInfo },
    { no: 7, name: "principal", kind: "message", T: Agency_Principal },
    { no: 8, name: "ivans_account", kind: "message", T: Agency_IvansAccount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agency {
    return new Agency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agency {
    return new Agency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agency {
    return new Agency().fromJsonString(jsonString, options);
  }

  static equals(a: Agency | PlainMessage<Agency> | undefined, b: Agency | PlainMessage<Agency> | undefined): boolean {
    return proto3.util.equals(Agency, a, b);
  }
}

/**
 * AgencyInfo contains contact and identification information for an agency.
 *
 * @generated from message producerflow.producer.v1.Agency.AgencyInfo
 */
export class Agency_AgencyInfo extends Message<Agency_AgencyInfo> {
  /**
   * The unique identifier for the onboarding process.
   * Used to track the agency through the onboarding flow.
   *
   * @generated from field: string onboarding_id = 1;
   */
  onboardingId = "";

  /**
   * The organization ID represents the ID of the root organization that the agency belongs to.
   * An example of a root organization is an Aggregator (Like AgencyHero) or an Agency Network.
   * We currently don't support multiple levels of organizations or agencies.
   * Agencies are not always part of an organization, so this field is optional.
   *
   * @generated from field: string root_organization_id = 2;
   */
  rootOrganizationId = "";

  /**
   * The official name of the agency.
   * This is typically the legal name of the entity.
   *
   * @generated from field: string agency_name = 3;
   */
  agencyName = "";

  /**
   * Federal Employer Identification Number (FEIN) of the agency.
   * This is a unique nine-digit number assigned by the Internal
   * Revenue Service (IRS) to businesses operating in the United States.
   *
   * @generated from field: string agency_fein = 4;
   */
  agencyFein = "";

  /**
   * Primary email address for the agency.
   * Used for communication and must be unique.
   *
   * @generated from field: string email = 5;
   */
  email = "";

  /**
   * Phone number for the agency.
   *
   * @generated from field: string phone = 6;
   */
  phone = "";

  /**
   * Fax number for the agency.
   *
   * @generated from field: string fax = 7;
   */
  fax = "";

  /**
   * Website URL for the agency, if available.
   *
   * @generated from field: string website = 8;
   */
  website = "";

  /**
   * National Producer Number (NPN) of the agency.
   * This is a unique identifier assigned by the National Association of Insurance Commissioners (NAIC).
   *
   * @generated from field: string npn = 9;
   */
  npn = "";

  /**
   * Indicates whether the agency is enabled to be synchronized with NIPR API.
   * When true, the system will regularly check for updates from NIPR.
   *
   * @generated from field: bool pdb_alerts_sync_enabled = 10;
   */
  pdbAlertsSyncEnabled = false;

  constructor(data?: PartialMessage<Agency_AgencyInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Agency.AgencyInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "onboarding_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "root_organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "agency_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "agency_fein", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "fax", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "website", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "pdb_alerts_sync_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agency_AgencyInfo {
    return new Agency_AgencyInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agency_AgencyInfo {
    return new Agency_AgencyInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agency_AgencyInfo {
    return new Agency_AgencyInfo().fromJsonString(jsonString, options);
  }

  static equals(a: Agency_AgencyInfo | PlainMessage<Agency_AgencyInfo> | undefined, b: Agency_AgencyInfo | PlainMessage<Agency_AgencyInfo> | undefined): boolean {
    return proto3.util.equals(Agency_AgencyInfo, a, b);
  }
}

/**
 * Address is a data structure that represents a physical or mailing
 * location.
 *
 * @generated from message producerflow.producer.v1.Agency.Address
 */
export class Agency_Address extends Message<Agency_Address> {
  /**
   * Street name and number of the location.
   *
   * @generated from field: string street = 1;
   */
  street = "";

  /**
   * City where the location resides.
   *
   * @generated from field: string city = 2;
   */
  city = "";

  /**
   * State/Province where the location resides.
   *
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * ZIP/Postal code of the location.
   *
   * @generated from field: string zip = 4;
   */
  zip = "";

  constructor(data?: PartialMessage<Agency_Address>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Agency.Address";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "street", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "zip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agency_Address {
    return new Agency_Address().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agency_Address {
    return new Agency_Address().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agency_Address {
    return new Agency_Address().fromJsonString(jsonString, options);
  }

  static equals(a: Agency_Address | PlainMessage<Agency_Address> | undefined, b: Agency_Address | PlainMessage<Agency_Address> | undefined): boolean {
    return proto3.util.equals(Agency_Address, a, b);
  }
}

/**
 * BankAccount contains information about a bank account for commission payments.
 *
 * @generated from message producerflow.producer.v1.Agency.BankAccount
 */
export class Agency_BankAccount extends Message<Agency_BankAccount> {
  /**
   * Account number for the bank account.
   *
   * @generated from field: string account_number = 1;
   */
  accountNumber = "";

  /**
   * Routing number for the bank.
   * This is a nine-digit code identifying the financial institution.
   *
   * @generated from field: string routing_number = 2;
   */
  routingNumber = "";

  /**
   * Type of account (checking or savings).
   * Indicates how the account should be treated for electronic transfers.
   *
   * @generated from field: producerflow.producer.v1.Agency.BankAccount.AccountType account_type = 3;
   */
  accountType = Agency_BankAccount_AccountType.UNSPECIFIED;

  /**
   * Name of the account holder as it appears on bank records.
   *
   * @generated from field: string account_holder_name = 4;
   */
  accountHolderName = "";

  constructor(data?: PartialMessage<Agency_BankAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Agency.BankAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routing_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account_type", kind: "enum", T: proto3.getEnumType(Agency_BankAccount_AccountType) },
    { no: 4, name: "account_holder_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agency_BankAccount {
    return new Agency_BankAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agency_BankAccount {
    return new Agency_BankAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agency_BankAccount {
    return new Agency_BankAccount().fromJsonString(jsonString, options);
  }

  static equals(a: Agency_BankAccount | PlainMessage<Agency_BankAccount> | undefined, b: Agency_BankAccount | PlainMessage<Agency_BankAccount> | undefined): boolean {
    return proto3.util.equals(Agency_BankAccount, a, b);
  }
}

/**
 * The type of account.
 *
 * @generated from enum producerflow.producer.v1.Agency.BankAccount.AccountType
 */
export enum Agency_BankAccount_AccountType {
  /**
   * Default unspecified value. Avoid using this.
   *
   * @generated from enum value: ACCOUNT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Standard checking account.
   *
   * @generated from enum value: ACCOUNT_TYPE_CHECKING = 1;
   */
  CHECKING = 1,

  /**
   * Savings account.
   *
   * @generated from enum value: ACCOUNT_TYPE_SAVINGS = 2;
   */
  SAVINGS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Agency_BankAccount_AccountType)
proto3.util.setEnumType(Agency_BankAccount_AccountType, "producerflow.producer.v1.Agency.BankAccount.AccountType", [
  { no: 0, name: "ACCOUNT_TYPE_UNSPECIFIED" },
  { no: 1, name: "ACCOUNT_TYPE_CHECKING" },
  { no: 2, name: "ACCOUNT_TYPE_SAVINGS" },
]);

/**
 * EOInfo contains Errors & Omissions insurance information
 *
 * @generated from message producerflow.producer.v1.Agency.EOInfo
 */
export class Agency_EOInfo extends Message<Agency_EOInfo> {
  /**
   * Insurance carrier providing the E&O coverage
   *
   * @generated from field: string carrier = 1;
   */
  carrier = "";

  /**
   * Date when the E&O coverage will expire
   *
   * @generated from field: google.protobuf.Timestamp expiration_date = 2;
   */
  expirationDate?: Timestamp;

  /**
   * Amount of coverage provided by the E&O policy
   *
   * @generated from field: string coverage_amount = 3;
   */
  coverageAmount = "";

  constructor(data?: PartialMessage<Agency_EOInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Agency.EOInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "carrier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiration_date", kind: "message", T: Timestamp },
    { no: 3, name: "coverage_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agency_EOInfo {
    return new Agency_EOInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agency_EOInfo {
    return new Agency_EOInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agency_EOInfo {
    return new Agency_EOInfo().fromJsonString(jsonString, options);
  }

  static equals(a: Agency_EOInfo | PlainMessage<Agency_EOInfo> | undefined, b: Agency_EOInfo | PlainMessage<Agency_EOInfo> | undefined): boolean {
    return proto3.util.equals(Agency_EOInfo, a, b);
  }
}

/**
 * Principal is a data structure that represents the principal of a agency.
 * A principal is the person or entity that is responsible for the day-to-day operations of the agency.
 * The principal is usually the CEO or CFO of the agency.nThe principal is also known as the "owner" of the agency.
 *
 * @generated from message producerflow.producer.v1.Agency.Principal
 */
export class Agency_Principal extends Message<Agency_Principal> {
  /**
   * Unique identifier for the principal (as a producer).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * First name of the principal.
   *
   * @generated from field: string first_name = 2;
   */
  firstName = "";

  /**
   * Last name of the principal.
   *
   * @generated from field: string last_name = 3;
   */
  lastName = "";

  /**
   * Middle name of the principal.
   *
   * @generated from field: string middle_name = 9;
   */
  middleName = "";

  /**
   * Email address of the principal.
   * Must be unique and is used for communication.
   *
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * The NPN of the principal. This is used to
   * retrieve the license information
   * of the principal from the NIPR API.
   *
   * @generated from field: string npn = 5;
   */
  npn = "";

  /**
   * Phone number of the principal.
   * Used for communication.
   *
   * @generated from field: string phone = 6;
   */
  phone = "";

  /**
   * Mailing address of the principal.
   * This may differ from the agency address.
   *
   * @generated from field: producerflow.producer.v1.Agency.Address mailing_address = 8;
   */
  mailingAddress?: Agency_Address;

  constructor(data?: PartialMessage<Agency_Principal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Agency.Principal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "middle_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "mailing_address", kind: "message", T: Agency_Address },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agency_Principal {
    return new Agency_Principal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agency_Principal {
    return new Agency_Principal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agency_Principal {
    return new Agency_Principal().fromJsonString(jsonString, options);
  }

  static equals(a: Agency_Principal | PlainMessage<Agency_Principal> | undefined, b: Agency_Principal | PlainMessage<Agency_Principal> | undefined): boolean {
    return proto3.util.equals(Agency_Principal, a, b);
  }
}

/**
 * IvansAccount contains information for IVANS integration.
 * IVANS is a system for electronic communication between insurance agencies and carriers.
 *
 * @generated from message producerflow.producer.v1.Agency.IvansAccount
 */
export class Agency_IvansAccount extends Message<Agency_IvansAccount> {
  /**
   * Account number for the IVANS service.
   *
   * @generated from field: string account_number = 1;
   */
  accountNumber = "";

  /**
   * Software used for IVANS communication.
   *
   * @generated from field: string ams_software = 2;
   */
  amsSoftware = "";

  /**
   * Version of the IVANS software.
   *
   * @generated from field: string ams_version = 3;
   */
  amsVersion = "";

  /**
   * Mailbox number for the IVANS service.
   * Used for routing electronic messages.
   *
   * @generated from field: string mailbox_number = 4;
   */
  mailboxNumber = "";

  constructor(data?: PartialMessage<Agency_IvansAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Agency.IvansAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ams_software", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ams_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mailbox_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Agency_IvansAccount {
    return new Agency_IvansAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Agency_IvansAccount {
    return new Agency_IvansAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Agency_IvansAccount {
    return new Agency_IvansAccount().fromJsonString(jsonString, options);
  }

  static equals(a: Agency_IvansAccount | PlainMessage<Agency_IvansAccount> | undefined, b: Agency_IvansAccount | PlainMessage<Agency_IvansAccount> | undefined): boolean {
    return proto3.util.equals(Agency_IvansAccount, a, b);
  }
}

/**
 * Producer represents a producer that has been onboarded.
 *
 * Internal ID of the producer.
 *
 * @generated from message producerflow.producer.v1.Producer
 */
export class Producer extends Message<Producer> {
  /**
   * The full name of the producer.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The email address of the producer.
   * Used for communication and must be unique within the tenant.
   * Must be a valid email format.
   *
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * The National Producer Number (NPN) of the producer.
   * This is used to retrieve license information from the NIPR API.
   * Must be non-empty.
   *
   * @generated from field: string npn = 4;
   */
  npn = "";

  /**
   * Indicates whether the producer is enabled to be synchronized with NIPR API.
   * When true, the system will regularly check for updates from NIPR.
   *
   * @generated from field: bool pdb_alerts_sync_enabled = 13;
   */
  pdbAlertsSyncEnabled = false;

  /**
   * Basic information about the agency this producer is associated with.
   *
   * @generated from field: producerflow.producer.v1.Producer.Agency agency = 7;
   */
  agency?: Producer_Agency;

  /**
   * Data synchronized from the NIPR service.
   * Contains license information, biographic data, regulatory actions,
   * and carrier appointments.
   *
   * @generated from field: producerflow.producer.v1.Producer.NIPR nipr = 6;
   */
  nipr?: Producer_NIPR;

  /**
   * The status of the producer onboarding process.
   * This field is deprecated and should not be used in new code.
   *
   * @generated from field: producerflow.producer.v1.ProducerOnboardingState onboarding_status = 11 [deprecated = true];
   * @deprecated
   */
  onboardingStatus = ProducerOnboardingState.UNSPECIFIED;

  /**
   * Indicates whether this producer is the principal of an agency.
   * A principal producer has additional responsibilities and permissions.
   *
   * @generated from field: bool is_principal = 12;
   */
  isPrincipal = false;

  constructor(data?: PartialMessage<Producer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Producer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "pdb_alerts_sync_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "agency", kind: "message", T: Producer_Agency },
    { no: 6, name: "nipr", kind: "message", T: Producer_NIPR },
    { no: 11, name: "onboarding_status", kind: "enum", T: proto3.getEnumType(ProducerOnboardingState) },
    { no: 12, name: "is_principal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Producer {
    return new Producer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Producer {
    return new Producer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Producer {
    return new Producer().fromJsonString(jsonString, options);
  }

  static equals(a: Producer | PlainMessage<Producer> | undefined, b: Producer | PlainMessage<Producer> | undefined): boolean {
    return proto3.util.equals(Producer, a, b);
  }
}

/**
 * Agency contains basic information about the agency this producer is associated with.
 *
 * @generated from message producerflow.producer.v1.Producer.Agency
 */
export class Producer_Agency extends Message<Producer_Agency> {
  /**
   * Unique identifier for the associated agency.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  /**
   * Name of the associated agency.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Producer_Agency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Producer.Agency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Producer_Agency {
    return new Producer_Agency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Producer_Agency {
    return new Producer_Agency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Producer_Agency {
    return new Producer_Agency().fromJsonString(jsonString, options);
  }

  static equals(a: Producer_Agency | PlainMessage<Producer_Agency> | undefined, b: Producer_Agency | PlainMessage<Producer_Agency> | undefined): boolean {
    return proto3.util.equals(Producer_Agency, a, b);
  }
}

/**
 * NIPR contains data synchronized from the National Insurance Producer Registry.
 *
 * @generated from message producerflow.producer.v1.Producer.NIPR
 */
export class Producer_NIPR extends Message<Producer_NIPR> {
  /**
   * List of all licenses held by the producer across different states.
   *
   * @generated from field: repeated producerflow.producer.v1.Producer.NIPR.License licenses = 6;
   */
  licenses: Producer_NIPR_License[] = [];

  /**
   * Biographic information of the producer from NIPR
   *
   * @generated from field: producerflow.producer.v1.Producer.NIPR.Biographic biographic = 8;
   */
  biographic?: Producer_NIPR_Biographic;

  /**
   * Producer's regulatory information from NIPR
   *
   * @generated from field: producerflow.producer.v1.Producer.NIPR.ProducerRegulatoryInfo regulatory_info = 9;
   */
  regulatoryInfo?: Producer_NIPR_ProducerRegulatoryInfo;

  /**
   * List of carrier appointments held by the producer in NIPR.
   * These represent relationships with insurance carriers that allow
   * the producer to sell their products.
   *
   * @generated from field: repeated producerflow.producer.v1.Producer.NIPR.Appointment appointments = 10;
   */
  appointments: Producer_NIPR_Appointment[] = [];

  constructor(data?: PartialMessage<Producer_NIPR>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Producer.NIPR";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 6, name: "licenses", kind: "message", T: Producer_NIPR_License, repeated: true },
    { no: 8, name: "biographic", kind: "message", T: Producer_NIPR_Biographic },
    { no: 9, name: "regulatory_info", kind: "message", T: Producer_NIPR_ProducerRegulatoryInfo },
    { no: 10, name: "appointments", kind: "message", T: Producer_NIPR_Appointment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Producer_NIPR {
    return new Producer_NIPR().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Producer_NIPR {
    return new Producer_NIPR().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Producer_NIPR {
    return new Producer_NIPR().fromJsonString(jsonString, options);
  }

  static equals(a: Producer_NIPR | PlainMessage<Producer_NIPR> | undefined, b: Producer_NIPR | PlainMessage<Producer_NIPR> | undefined): boolean {
    return proto3.util.equals(Producer_NIPR, a, b);
  }
}

/**
 * License contains information about a producer's insurance license.
 *
 * @generated from message producerflow.producer.v1.Producer.NIPR.License
 */
export class Producer_NIPR_License extends Message<Producer_NIPR_License> {
  /**
   * The license number assigned by the state regulatory authority.
   *
   * @generated from field: string license_number = 1;
   */
  licenseNumber = "";

  /**
   * The state that issued the license.
   * Typically a two-letter state code.
   *
   * @generated from field: string license_state = 2;
   */
  licenseState = "";

  /**
   * Indicates whether this is a resident or non-resident license.
   * Values are typically "Resident" or "Non-Resident".
   *
   * @generated from field: string residency_status = 3;
   */
  residencyStatus = "";

  /**
   * Indicates whether the license is currently active.
   *
   * @generated from field: bool active = 4;
   */
  active = false;

  /**
   * The current status of the license (valid, expired, etc.).
   *
   * @generated from field: producerflow.producer.v1.Producer.NIPR.License.LicenseStatus status = 5;
   */
  status = Producer_NIPR_License_LicenseStatus.UNSPECIFIED;

  /**
   * The date when the license will expire if not renewed.
   *
   * @generated from field: google.protobuf.Timestamp expiration_date = 6;
   */
  expirationDate?: Timestamp;

  /**
   * The last time this license information was updated from NIPR.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Producer_NIPR_License>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Producer.NIPR.License";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "license_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "license_state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "residency_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "status", kind: "enum", T: proto3.getEnumType(Producer_NIPR_License_LicenseStatus) },
    { no: 6, name: "expiration_date", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Producer_NIPR_License {
    return new Producer_NIPR_License().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Producer_NIPR_License {
    return new Producer_NIPR_License().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Producer_NIPR_License {
    return new Producer_NIPR_License().fromJsonString(jsonString, options);
  }

  static equals(a: Producer_NIPR_License | PlainMessage<Producer_NIPR_License> | undefined, b: Producer_NIPR_License | PlainMessage<Producer_NIPR_License> | undefined): boolean {
    return proto3.util.equals(Producer_NIPR_License, a, b);
  }
}

/**
 * LicenseStatus defines the possible statuses of an insurance license.
 *
 * @generated from enum producerflow.producer.v1.Producer.NIPR.License.LicenseStatus
 */
export enum Producer_NIPR_License_LicenseStatus {
  /**
   * Default unspecified value. Avoid using this.
   *
   * @generated from enum value: LICENSE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The license has expired and is no longer valid.
   *
   * @generated from enum value: LICENSE_STATUS_EXPIRED = 1;
   */
  EXPIRED = 1,

  /**
   * License is currently active.
   *
   * @generated from enum value: LICENSE_STATUS_VALID = 2;
   */
  VALID = 2,

  /**
   * The license exists but is not in an active state.
   * This could be due to suspension, revocation, or other reasons.
   *
   * @generated from enum value: LICENSE_STATUS_NOT_ACTIVE = 3;
   */
  NOT_ACTIVE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Producer_NIPR_License_LicenseStatus)
proto3.util.setEnumType(Producer_NIPR_License_LicenseStatus, "producerflow.producer.v1.Producer.NIPR.License.LicenseStatus", [
  { no: 0, name: "LICENSE_STATUS_UNSPECIFIED" },
  { no: 1, name: "LICENSE_STATUS_EXPIRED" },
  { no: 2, name: "LICENSE_STATUS_VALID" },
  { no: 3, name: "LICENSE_STATUS_NOT_ACTIVE" },
]);

/**
 * Biographic contains personal and identifying information about the producer.
 *
 * @generated from message producerflow.producer.v1.Producer.NIPR.Biographic
 */
export class Producer_NIPR_Biographic extends Message<Producer_NIPR_Biographic> {
  /**
   * Last name of the producer as recorded in NIPR.
   *
   * @generated from field: string last_name = 1;
   */
  lastName = "";

  /**
   * First name of the producer as recorded in NIPR.
   *
   * @generated from field: string first_name = 2;
   */
  firstName = "";

  /**
   * Middle name of the producer as recorded in NIPR.
   *
   * @generated from field: string middle_name = 3;
   */
  middleName = "";

  /**
   * Date of birth of the producer.
   *
   * @generated from field: google.protobuf.Timestamp date_of_birth = 4;
   */
  dateOfBirth?: Timestamp;

  /**
   * Federal Employer Identification Number if the producer is a business entity.
   *
   * @generated from field: string fein = 7;
   */
  fein = "";

  /**
   * Company name if the producer is a business entity.
   *
   * @generated from field: string company_name = 8;
   */
  companyName = "";

  /**
   * State of domicile (resident state) for the producer.
   * This is the state where the producer is primarily located.
   *
   * @generated from field: string state_domicile = 9;
   */
  stateDomicile = "";

  constructor(data?: PartialMessage<Producer_NIPR_Biographic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Producer.NIPR.Biographic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "middle_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "date_of_birth", kind: "message", T: Timestamp },
    { no: 7, name: "fein", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "company_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "state_domicile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Producer_NIPR_Biographic {
    return new Producer_NIPR_Biographic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Producer_NIPR_Biographic {
    return new Producer_NIPR_Biographic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Producer_NIPR_Biographic {
    return new Producer_NIPR_Biographic().fromJsonString(jsonString, options);
  }

  static equals(a: Producer_NIPR_Biographic | PlainMessage<Producer_NIPR_Biographic> | undefined, b: Producer_NIPR_Biographic | PlainMessage<Producer_NIPR_Biographic> | undefined): boolean {
    return proto3.util.equals(Producer_NIPR_Biographic, a, b);
  }
}

/**
 * ProducerRegulatoryInfo contains regulatory information about a producer,
 * including any regulatory actions taken against them.
 *
 * @generated from message producerflow.producer.v1.Producer.NIPR.ProducerRegulatoryInfo
 */
export class Producer_NIPR_ProducerRegulatoryInfo extends Message<Producer_NIPR_ProducerRegulatoryInfo> {
  /**
   * Map of regulatory actions by state.
   * The key is the state code, and the value is the regulatory action.
   *
   * @generated from field: map<string, producerflow.producer.v1.Producer.NIPR.ProducerRegulatoryInfo.RegulatoryAction> regulatory_actions_by_state = 1;
   */
  regulatoryActionsByState: { [key: string]: Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction } = {};

  /**
   * Clearance certification information for the producer.
   *
   * @generated from field: string clearance_certification_info = 2;
   */
  clearanceCertificationInfo = "";

  /**
   * Details about NASD/FINRA examinations taken by the producer.
   *
   * @generated from field: string nasd_exam_details = 3;
   */
  nasdExamDetails = "";

  constructor(data?: PartialMessage<Producer_NIPR_ProducerRegulatoryInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Producer.NIPR.ProducerRegulatoryInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "regulatory_actions_by_state", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction} },
    { no: 2, name: "clearance_certification_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nasd_exam_details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Producer_NIPR_ProducerRegulatoryInfo {
    return new Producer_NIPR_ProducerRegulatoryInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Producer_NIPR_ProducerRegulatoryInfo {
    return new Producer_NIPR_ProducerRegulatoryInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Producer_NIPR_ProducerRegulatoryInfo {
    return new Producer_NIPR_ProducerRegulatoryInfo().fromJsonString(jsonString, options);
  }

  static equals(a: Producer_NIPR_ProducerRegulatoryInfo | PlainMessage<Producer_NIPR_ProducerRegulatoryInfo> | undefined, b: Producer_NIPR_ProducerRegulatoryInfo | PlainMessage<Producer_NIPR_ProducerRegulatoryInfo> | undefined): boolean {
    return proto3.util.equals(Producer_NIPR_ProducerRegulatoryInfo, a, b);
  }
}

/**
 * RegulatoryAction represents a regulatory action taken against a producer.
 *
 * @generated from message producerflow.producer.v1.Producer.NIPR.ProducerRegulatoryInfo.RegulatoryAction
 */
export class Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction extends Message<Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction> {
  /**
   * Unique identifier for the regulatory action.
   *
   * @generated from field: string action_id = 1;
   */
  actionId = "";

  /**
   * The regulatory body that originated the action.
   * Typically a state insurance department or FINRA.
   *
   * @generated from field: string origin_of_action = 2;
   */
  originOfAction = "";

  /**
   * The reason why the regulatory action was taken.
   *
   * @generated from field: string reason_for_action = 3;
   */
  reasonForAction = "";

  /**
   * The outcome or resolution of the regulatory action.
   *
   * @generated from field: string disposition = 4;
   */
  disposition = "";

  /**
   * The date when the regulatory action was taken.
   *
   * @generated from field: google.protobuf.Timestamp date_of_action = 5;
   */
  dateOfAction?: Timestamp;

  /**
   * The date when the regulatory action became effective.
   *
   * @generated from field: google.protobuf.Timestamp effective_date = 6;
   */
  effectiveDate?: Timestamp;

  /**
   * The date when the producer entered into the regulatory action.
   *
   * @generated from field: google.protobuf.Timestamp enter_date = 7;
   */
  enterDate?: Timestamp;

  /**
   * Reference number for the regulatory action file.
   *
   * @generated from field: string file_ref = 8;
   */
  fileRef = "";

  /**
   * Any financial penalties associated with the regulatory action.
   *
   * @generated from field: string penalty_fine_forfeiture = 9;
   */
  penaltyFineForfeiture = "";

  /**
   * Duration of any orders associated with the regulatory action.
   *
   * @generated from field: string length_of_order = 10;
   */
  lengthOfOrder = "";

  constructor(data?: PartialMessage<Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Producer.NIPR.ProducerRegulatoryInfo.RegulatoryAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "origin_of_action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason_for_action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "disposition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "date_of_action", kind: "message", T: Timestamp },
    { no: 6, name: "effective_date", kind: "message", T: Timestamp },
    { no: 7, name: "enter_date", kind: "message", T: Timestamp },
    { no: 8, name: "file_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "penalty_fine_forfeiture", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "length_of_order", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction {
    return new Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction {
    return new Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction {
    return new Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction().fromJsonString(jsonString, options);
  }

  static equals(a: Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction | PlainMessage<Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction> | undefined, b: Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction | PlainMessage<Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction> | undefined): boolean {
    return proto3.util.equals(Producer_NIPR_ProducerRegulatoryInfo_RegulatoryAction, a, b);
  }
}

/**
 * Appointment represents a relationship between a producer and an insurance carrier.
 *
 * @generated from message producerflow.producer.v1.Producer.NIPR.Appointment
 */
export class Producer_NIPR_Appointment extends Message<Producer_NIPR_Appointment> {
  /**
   * @generated from field: string branch_id = 1;
   */
  branchId = "";

  /**
   * Name of the insurance company for this appointment.
   *
   * @generated from field: string company_name = 2;
   */
  companyName = "";

  /**
   * Federal Employer Identification Number of the producer's company.
   *
   * @generated from field: string fein = 3;
   */
  fein = "";

  /**
   * Company code for the insurance carrier.
   *
   * @generated from field: string co_code = 4;
   */
  coCode = "";

  /**
   * Line of authority for this appointment (e.g., Life, Property, Casualty).
   * Indicates what types of insurance the producer can sell.
   *
   * @generated from field: string line_of_authority = 5;
   */
  lineOfAuthority = "";

  /**
   * Code for the line of authority for this appointment.
   *
   * @generated from field: string loa_code = 6;
   */
  loaCode = "";

  /**
   * Current status of the appointment (e.g., Active, Terminated).
   *
   * @generated from field: string status = 7;
   */
  status = "";

  /**
   * Reason for termination if the appointment has been terminated.
   *
   * @generated from field: string termination_reason = 8;
   */
  terminationReason = "";

  /**
   * Date associated with the current status or reason.
   *
   * @generated from field: google.protobuf.Timestamp status_reason_date = 9;
   */
  statusReasonDate?: Timestamp;

  /**
   * Date when the appointment will renew.
   *
   * @generated from field: google.protobuf.Timestamp appointment_renewal_date = 10;
   */
  appointmentRenewalDate?: Timestamp;

  /**
   * Additional affiliations or roles the producer has with the agency.
   *
   * @generated from field: string agency_affiliations = 11;
   */
  agencyAffiliations = "";

  constructor(data?: PartialMessage<Producer_NIPR_Appointment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.Producer.NIPR.Appointment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "branch_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "company_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fein", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "co_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "line_of_authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "loa_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "termination_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "status_reason_date", kind: "message", T: Timestamp },
    { no: 10, name: "appointment_renewal_date", kind: "message", T: Timestamp },
    { no: 11, name: "agency_affiliations", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Producer_NIPR_Appointment {
    return new Producer_NIPR_Appointment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Producer_NIPR_Appointment {
    return new Producer_NIPR_Appointment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Producer_NIPR_Appointment {
    return new Producer_NIPR_Appointment().fromJsonString(jsonString, options);
  }

  static equals(a: Producer_NIPR_Appointment | PlainMessage<Producer_NIPR_Appointment> | undefined, b: Producer_NIPR_Appointment | PlainMessage<Producer_NIPR_Appointment> | undefined): boolean {
    return proto3.util.equals(Producer_NIPR_Appointment, a, b);
  }
}

/**
 * NewProducer represents the data needed to create a new producer in the system.
 *
 * @generated from message producerflow.producer.v1.NewProducer
 */
export class NewProducer extends Message<NewProducer> {
  /**
   * First name of the producer.
   * Required and must be non-empty.
   *
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * Last name of the producer.
   * Required and must be non-empty.
   *
   * @generated from field: string last_name = 2;
   */
  lastName = "";

  /**
   * Middle name of the producer.
   * Optional.
   *
   * @generated from field: string middle_name = 7;
   */
  middleName = "";

  /**
   * Email address of the producer.
   * Required and must be a valid email format.
   * Must be unique within the tenant.
   *
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * National Producer Number (NPN) of the producer.
   * Optional, but recommended for license verification.
   *
   * @generated from field: string npn = 4;
   */
  npn = "";

  /**
   * Phone number of the producer.
   * Optional if default value, but if provided must match the pattern of a valid phone number.
   *
   * @generated from field: string phone = 5;
   */
  phone = "";

  /**
   * Mailing address of the producer.
   * This is where correspondence will be sent.
   *
   * @generated from field: producerflow.producer.v1.NewProducer.Address mailing_address = 6;
   */
  mailingAddress?: NewProducer_Address;

  /**
   * External tenant identifier for the producer.
   * Used for integration with external systems.
   *
   * @generated from field: string tenant_id = 8;
   */
  tenantId = "";

  /**
   * Indicates whether the producer should be automatically approved.
   * This field is deprecated and should not be used in new code.
   *
   * @generated from field: bool auto_approve = 9 [deprecated = true];
   * @deprecated
   */
  autoApprove = false;

  constructor(data?: PartialMessage<NewProducer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewProducer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "middle_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "mailing_address", kind: "message", T: NewProducer_Address },
    { no: 8, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "auto_approve", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewProducer {
    return new NewProducer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewProducer {
    return new NewProducer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewProducer {
    return new NewProducer().fromJsonString(jsonString, options);
  }

  static equals(a: NewProducer | PlainMessage<NewProducer> | undefined, b: NewProducer | PlainMessage<NewProducer> | undefined): boolean {
    return proto3.util.equals(NewProducer, a, b);
  }
}

/**
 * Address represents a mailing address for the producer.
 *
 * @generated from message producerflow.producer.v1.NewProducer.Address
 */
export class NewProducer_Address extends Message<NewProducer_Address> {
  /**
   * Street address of the producer.
   * Required and must be non-empty.
   *
   * @generated from field: string street = 1;
   */
  street = "";

  /**
   * City of the producer.
   * Required and must be non-empty.
   *
   * @generated from field: string city = 2;
   */
  city = "";

  /**
   * State of the producer.
   * Required and must be a 2-letter state code.
   *
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * Zip code of the producer.
   * Required and must be between 1 and 10 characters.
   *
   * @generated from field: string zip = 4;
   */
  zip = "";

  constructor(data?: PartialMessage<NewProducer_Address>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewProducer.Address";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "street", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "zip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewProducer_Address {
    return new NewProducer_Address().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewProducer_Address {
    return new NewProducer_Address().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewProducer_Address {
    return new NewProducer_Address().fromJsonString(jsonString, options);
  }

  static equals(a: NewProducer_Address | PlainMessage<NewProducer_Address> | undefined, b: NewProducer_Address | PlainMessage<NewProducer_Address> | undefined): boolean {
    return proto3.util.equals(NewProducer_Address, a, b);
  }
}

/**
 * NewProducerRequest is used to create a new producer and associate it with an agency.
 * This will trigger a call to the NIPR API to retrieve license information of the producer.
 *
 * @generated from message producerflow.producer.v1.NewProducerRequest
 */
export class NewProducerRequest extends Message<NewProducerRequest> {
  /**
   * The UUID of the agency to associate the producer with.
   * Must be a valid UUID format.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  /**
   * Information about the producer to create.
   * This field is required.
   *
   * @generated from field: producerflow.producer.v1.NewProducer producer = 2;
   */
  producer?: NewProducer;

  constructor(data?: PartialMessage<NewProducerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewProducerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "producer", kind: "message", T: NewProducer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewProducerRequest {
    return new NewProducerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewProducerRequest {
    return new NewProducerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewProducerRequest {
    return new NewProducerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewProducerRequest | PlainMessage<NewProducerRequest> | undefined, b: NewProducerRequest | PlainMessage<NewProducerRequest> | undefined): boolean {
    return proto3.util.equals(NewProducerRequest, a, b);
  }
}

/**
 * NewProducerResponse contains the ID of the created producer.
 *
 * @generated from message producerflow.producer.v1.NewProducerResponse
 */
export class NewProducerResponse extends Message<NewProducerResponse> {
  /**
   * The UUID of the created producer.
   * Must be a valid UUID format.
   *
   * @generated from field: string producer_id = 1;
   */
  producerId = "";

  constructor(data?: PartialMessage<NewProducerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewProducerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewProducerResponse {
    return new NewProducerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewProducerResponse {
    return new NewProducerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewProducerResponse {
    return new NewProducerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewProducerResponse | PlainMessage<NewProducerResponse> | undefined, b: NewProducerResponse | PlainMessage<NewProducerResponse> | undefined): boolean {
    return proto3.util.equals(NewProducerResponse, a, b);
  }
}

/**
 * NewProducersRequest is used to create multiple producers in a single request.
 * All producers will be associated with the specified agency.
 *
 * @generated from message producerflow.producer.v1.NewProducersRequest
 */
export class NewProducersRequest extends Message<NewProducersRequest> {
  /**
   * The UUID of the agency to associate the producers with.
   * Must be a valid UUID format.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  /**
   * List of producers to create.
   * This field is required and must contain at least one producer.
   *
   * @generated from field: repeated producerflow.producer.v1.NewProducer producers = 2;
   */
  producers: NewProducer[] = [];

  constructor(data?: PartialMessage<NewProducersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewProducersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "producers", kind: "message", T: NewProducer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewProducersRequest {
    return new NewProducersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewProducersRequest {
    return new NewProducersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewProducersRequest {
    return new NewProducersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewProducersRequest | PlainMessage<NewProducersRequest> | undefined, b: NewProducersRequest | PlainMessage<NewProducersRequest> | undefined): boolean {
    return proto3.util.equals(NewProducersRequest, a, b);
  }
}

/**
 * NewProducersResponse contains the IDs of all created producers.
 *
 * @generated from message producerflow.producer.v1.NewProducersResponse
 */
export class NewProducersResponse extends Message<NewProducersResponse> {
  /**
   * List of UUIDs for the newly created producers.
   * The order matches the order of producers in the request.
   *
   * @generated from field: repeated string producer_ids = 1;
   */
  producerIds: string[] = [];

  constructor(data?: PartialMessage<NewProducersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewProducersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewProducersResponse {
    return new NewProducersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewProducersResponse {
    return new NewProducersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewProducersResponse {
    return new NewProducersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewProducersResponse | PlainMessage<NewProducersResponse> | undefined, b: NewProducersResponse | PlainMessage<NewProducersResponse> | undefined): boolean {
    return proto3.util.equals(NewProducersResponse, a, b);
  }
}

/**
 * NewContact represents the data needed to create a new contact in the system.
 * Contacts represent non-producer individuals associated with an agency.
 *
 * @generated from message producerflow.producer.v1.NewContact
 */
export class NewContact extends Message<NewContact> {
  /**
   * First name of the contact.
   * Required and must be non-empty.
   *
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * Last name of the contact.
   * Required and must be non-empty.
   *
   * @generated from field: string last_name = 2;
   */
  lastName = "";

  /**
   * Middle name of the contact.
   * Optional.
   *
   * @generated from field: string middle_name = 3;
   */
  middleName = "";

  /**
   * Email address of the contact.
   * Required and must be a valid email format.
   * Must be unique within the tenant.
   *
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * Phone number of the contact.
   * Optional if default value, but if provided must match the pattern of a valid phone number.
   *
   * @generated from field: string phone = 5;
   */
  phone = "";

  /**
   * Mailing address of the contact.
   *
   * @generated from field: producerflow.producer.v1.NewContact.Address address = 6;
   */
  address?: NewContact_Address;

  /**
   * Role or position of the contact within the agency.
   * Required and must be non-empty.
   *
   * @generated from field: string role = 7;
   */
  role = "";

  /**
   * External tenant identifier for the contact.
   * Used for integration with external systems.
   *
   * @generated from field: string tenant_id = 8;
   */
  tenantId = "";

  /**
   * National Producer Number (NPN) of the contact.
   *
   * @generated from field: string npn = 9;
   */
  npn = "";

  constructor(data?: PartialMessage<NewContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "middle_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "address", kind: "message", T: NewContact_Address },
    { no: 7, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewContact {
    return new NewContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewContact {
    return new NewContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewContact {
    return new NewContact().fromJsonString(jsonString, options);
  }

  static equals(a: NewContact | PlainMessage<NewContact> | undefined, b: NewContact | PlainMessage<NewContact> | undefined): boolean {
    return proto3.util.equals(NewContact, a, b);
  }
}

/**
 * Address represents a mailing address for the contact.
 *
 * @generated from message producerflow.producer.v1.NewContact.Address
 */
export class NewContact_Address extends Message<NewContact_Address> {
  /**
   * Street address of the contact.
   * Required and must be non-empty.
   *
   * @generated from field: string street = 1;
   */
  street = "";

  /**
   * City of the contact.
   * Required and must be non-empty.
   *
   * @generated from field: string city = 2;
   */
  city = "";

  /**
   * State of the contact's address.
   * Required and must be exactly 2 characters (state code).
   *
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * Zip code of the contact's address.
   * Required and must be between 1 and 10 characters.
   *
   * @generated from field: string zip = 4;
   */
  zip = "";

  constructor(data?: PartialMessage<NewContact_Address>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewContact.Address";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "street", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "zip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewContact_Address {
    return new NewContact_Address().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewContact_Address {
    return new NewContact_Address().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewContact_Address {
    return new NewContact_Address().fromJsonString(jsonString, options);
  }

  static equals(a: NewContact_Address | PlainMessage<NewContact_Address> | undefined, b: NewContact_Address | PlainMessage<NewContact_Address> | undefined): boolean {
    return proto3.util.equals(NewContact_Address, a, b);
  }
}

/**
 * NewContactRequest is used to create a new contact and associate it with an agency.
 *
 * @generated from message producerflow.producer.v1.NewContactRequest
 */
export class NewContactRequest extends Message<NewContactRequest> {
  /**
   * The UUID of the agency to associate the contact with.
   * Must be a valid UUID format.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  /**
   * Information about the contact to create.
   *
   * @generated from field: producerflow.producer.v1.NewContact contact = 2;
   */
  contact?: NewContact;

  constructor(data?: PartialMessage<NewContactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewContactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contact", kind: "message", T: NewContact },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewContactRequest {
    return new NewContactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewContactRequest {
    return new NewContactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewContactRequest {
    return new NewContactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewContactRequest | PlainMessage<NewContactRequest> | undefined, b: NewContactRequest | PlainMessage<NewContactRequest> | undefined): boolean {
    return proto3.util.equals(NewContactRequest, a, b);
  }
}

/**
 * NewContactResponse contains the ID of the created contact.
 *
 * @generated from message producerflow.producer.v1.NewContactResponse
 */
export class NewContactResponse extends Message<NewContactResponse> {
  /**
   * The UUID of the created contact.
   * Must be a valid UUID format.
   *
   * @generated from field: string contact_id = 1;
   */
  contactId = "";

  constructor(data?: PartialMessage<NewContactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewContactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contact_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewContactResponse {
    return new NewContactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewContactResponse {
    return new NewContactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewContactResponse {
    return new NewContactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewContactResponse | PlainMessage<NewContactResponse> | undefined, b: NewContactResponse | PlainMessage<NewContactResponse> | undefined): boolean {
    return proto3.util.equals(NewContactResponse, a, b);
  }
}

/**
 * NewContactsRequest is used to create multiple contacts in a single request.
 * All contacts will be associated with the specified agency.
 *
 * @generated from message producerflow.producer.v1.NewContactsRequest
 */
export class NewContactsRequest extends Message<NewContactsRequest> {
  /**
   * The UUID of the agency to associate the contacts with.
   * Must be a valid UUID format.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  /**
   * List of contacts to create.
   * This field is required and must contain at least one contact.
   *
   * @generated from field: repeated producerflow.producer.v1.NewContact contacts = 2;
   */
  contacts: NewContact[] = [];

  constructor(data?: PartialMessage<NewContactsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewContactsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contacts", kind: "message", T: NewContact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewContactsRequest {
    return new NewContactsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewContactsRequest {
    return new NewContactsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewContactsRequest {
    return new NewContactsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewContactsRequest | PlainMessage<NewContactsRequest> | undefined, b: NewContactsRequest | PlainMessage<NewContactsRequest> | undefined): boolean {
    return proto3.util.equals(NewContactsRequest, a, b);
  }
}

/**
 * NewContactsResponse contains the IDs of all created contacts.
 *
 * @generated from message producerflow.producer.v1.NewContactsResponse
 */
export class NewContactsResponse extends Message<NewContactsResponse> {
  /**
   * List of UUIDs for the newly created contacts.
   * The order matches the order of contacts in the request.
   *
   * @generated from field: repeated string contact_ids = 1;
   */
  contactIds: string[] = [];

  constructor(data?: PartialMessage<NewContactsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.NewContactsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contact_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewContactsResponse {
    return new NewContactsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewContactsResponse {
    return new NewContactsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewContactsResponse {
    return new NewContactsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewContactsResponse | PlainMessage<NewContactsResponse> | undefined, b: NewContactsResponse | PlainMessage<NewContactsResponse> | undefined): boolean {
    return proto3.util.equals(NewContactsResponse, a, b);
  }
}

/**
 * SetExternalIDRequest is used to associate an external identifier with a producer, agency, or contact.
 * This allows integration with external systems that use different ID schemes.
 *
 * Only one entity type can be specified.
 *
 * @generated from message producerflow.producer.v1.SetExternalIDRequest
 */
export class SetExternalIDRequest extends Message<SetExternalIDRequest> {
  /**
   * @generated from oneof producerflow.producer.v1.SetExternalIDRequest.entity_id
   */
  entityId: {
    /**
     * The UUID of the producer to set an external ID for.
     *
     * @generated from field: string producer_id = 1;
     */
    value: string;
    case: "producerId";
  } | {
    /**
     * The UUID of the agency to set an external ID for.
     *
     * @generated from field: string agency_id = 2;
     */
    value: string;
    case: "agencyId";
  } | {
    /**
     * The UUID of the contact to set an external ID for.
     *
     * @generated from field: string contact_id = 3;
     */
    value: string;
    case: "contactId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The external tenant identifier to associate with the entity.
   * Required and must be non-empty.
   *
   * @generated from field: string tenant_id = 4;
   */
  tenantId = "";

  constructor(data?: PartialMessage<SetExternalIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.SetExternalIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "entity_id" },
    { no: 2, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "entity_id" },
    { no: 3, name: "contact_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "entity_id" },
    { no: 4, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetExternalIDRequest {
    return new SetExternalIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetExternalIDRequest {
    return new SetExternalIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetExternalIDRequest {
    return new SetExternalIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetExternalIDRequest | PlainMessage<SetExternalIDRequest> | undefined, b: SetExternalIDRequest | PlainMessage<SetExternalIDRequest> | undefined): boolean {
    return proto3.util.equals(SetExternalIDRequest, a, b);
  }
}

/**
 * SetExternalIDResponse is the empty response returned after successfully setting an external ID.
 *
 * @generated from message producerflow.producer.v1.SetExternalIDResponse
 */
export class SetExternalIDResponse extends Message<SetExternalIDResponse> {
  constructor(data?: PartialMessage<SetExternalIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.SetExternalIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetExternalIDResponse {
    return new SetExternalIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetExternalIDResponse {
    return new SetExternalIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetExternalIDResponse {
    return new SetExternalIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetExternalIDResponse | PlainMessage<SetExternalIDResponse> | undefined, b: SetExternalIDResponse | PlainMessage<SetExternalIDResponse> | undefined): boolean {
    return proto3.util.equals(SetExternalIDResponse, a, b);
  }
}

/**
 * ValidateProducerNPNRequest is used to validate a producer's National Producer Number.
 *
 * @generated from message producerflow.producer.v1.ValidateProducerNPNRequest
 */
export class ValidateProducerNPNRequest extends Message<ValidateProducerNPNRequest> {
  /**
   * The National Producer Number (NPN) to validate.
   * Required and must be non-empty.
   *
   * @generated from field: string npn = 1;
   */
  npn = "";

  /**
   * Optional name of the producer to validate.
   * If provided, the NPN will be validated against this name.
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  constructor(data?: PartialMessage<ValidateProducerNPNRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ValidateProducerNPNRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateProducerNPNRequest {
    return new ValidateProducerNPNRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateProducerNPNRequest {
    return new ValidateProducerNPNRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateProducerNPNRequest {
    return new ValidateProducerNPNRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateProducerNPNRequest | PlainMessage<ValidateProducerNPNRequest> | undefined, b: ValidateProducerNPNRequest | PlainMessage<ValidateProducerNPNRequest> | undefined): boolean {
    return proto3.util.equals(ValidateProducerNPNRequest, a, b);
  }
}

/**
 * ValidateProducerNPNResponse contains the result of validating a producer's NPN.
 *
 * @generated from message producerflow.producer.v1.ValidateProducerNPNResponse
 */
export class ValidateProducerNPNResponse extends Message<ValidateProducerNPNResponse> {
  /**
   * Indicates whether the NPN is valid.
   * True if the NPN exists and is valid, false otherwise.
   *
   * @generated from field: bool valid = 1;
   */
  valid = false;

  constructor(data?: PartialMessage<ValidateProducerNPNResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ValidateProducerNPNResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateProducerNPNResponse {
    return new ValidateProducerNPNResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateProducerNPNResponse {
    return new ValidateProducerNPNResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateProducerNPNResponse {
    return new ValidateProducerNPNResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateProducerNPNResponse | PlainMessage<ValidateProducerNPNResponse> | undefined, b: ValidateProducerNPNResponse | PlainMessage<ValidateProducerNPNResponse> | undefined): boolean {
    return proto3.util.equals(ValidateProducerNPNResponse, a, b);
  }
}

/**
 * ValidateAgencyNPNRequest is used to validate an agency's National Producer Number.
 *
 * @generated from message producerflow.producer.v1.ValidateAgencyNPNRequest
 */
export class ValidateAgencyNPNRequest extends Message<ValidateAgencyNPNRequest> {
  /**
   * The National Producer Number (NPN) to validate.
   * Required and must be non-empty.
   *
   * @generated from field: string npn = 1;
   */
  npn = "";

  constructor(data?: PartialMessage<ValidateAgencyNPNRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ValidateAgencyNPNRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateAgencyNPNRequest {
    return new ValidateAgencyNPNRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateAgencyNPNRequest {
    return new ValidateAgencyNPNRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateAgencyNPNRequest {
    return new ValidateAgencyNPNRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateAgencyNPNRequest | PlainMessage<ValidateAgencyNPNRequest> | undefined, b: ValidateAgencyNPNRequest | PlainMessage<ValidateAgencyNPNRequest> | undefined): boolean {
    return proto3.util.equals(ValidateAgencyNPNRequest, a, b);
  }
}

/**
 * ValidateAgencyNPNResponse contains the result of validating an agency's NPN.
 *
 * @generated from message producerflow.producer.v1.ValidateAgencyNPNResponse
 */
export class ValidateAgencyNPNResponse extends Message<ValidateAgencyNPNResponse> {
  /**
   * Indicates whether the NPN is valid.
   * True if the NPN exists and is valid, false otherwise.
   *
   * @generated from field: bool valid = 1;
   */
  valid = false;

  constructor(data?: PartialMessage<ValidateAgencyNPNResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ValidateAgencyNPNResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateAgencyNPNResponse {
    return new ValidateAgencyNPNResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateAgencyNPNResponse {
    return new ValidateAgencyNPNResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateAgencyNPNResponse {
    return new ValidateAgencyNPNResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateAgencyNPNResponse | PlainMessage<ValidateAgencyNPNResponse> | undefined, b: ValidateAgencyNPNResponse | PlainMessage<ValidateAgencyNPNResponse> | undefined): boolean {
    return proto3.util.equals(ValidateAgencyNPNResponse, a, b);
  }
}

/**
 * LookupNPNByFEINRequest is used to look up a producer's National Producer Number by their Federal Employer Identification Number (FEIN).
 *
 * @generated from message producerflow.producer.v1.LookupNPNByFEINRequest
 */
export class LookupNPNByFEINRequest extends Message<LookupNPNByFEINRequest> {
  /**
   * The Federal Employer Identification Number (FEIN) to look up.
   * Required and must be exactly 9 characters.
   *
   * @generated from field: string fein = 1;
   */
  fein = "";

  constructor(data?: PartialMessage<LookupNPNByFEINRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.LookupNPNByFEINRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fein", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LookupNPNByFEINRequest {
    return new LookupNPNByFEINRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LookupNPNByFEINRequest {
    return new LookupNPNByFEINRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LookupNPNByFEINRequest {
    return new LookupNPNByFEINRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LookupNPNByFEINRequest | PlainMessage<LookupNPNByFEINRequest> | undefined, b: LookupNPNByFEINRequest | PlainMessage<LookupNPNByFEINRequest> | undefined): boolean {
    return proto3.util.equals(LookupNPNByFEINRequest, a, b);
  }
}

/**
 * LookupNPNByFEINResponse contains the National Producer Number (NPN) for the producer associated with the given FEIN.
 *
 * @generated from message producerflow.producer.v1.LookupNPNByFEINResponse
 */
export class LookupNPNByFEINResponse extends Message<LookupNPNByFEINResponse> {
  /**
   * The National Producer Number (NPN) for the producer.
   *
   * @generated from field: string npn = 1;
   */
  npn = "";

  constructor(data?: PartialMessage<LookupNPNByFEINResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.LookupNPNByFEINResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "npn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LookupNPNByFEINResponse {
    return new LookupNPNByFEINResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LookupNPNByFEINResponse {
    return new LookupNPNByFEINResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LookupNPNByFEINResponse {
    return new LookupNPNByFEINResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LookupNPNByFEINResponse | PlainMessage<LookupNPNByFEINResponse> | undefined, b: LookupNPNByFEINResponse | PlainMessage<LookupNPNByFEINResponse> | undefined): boolean {
    return proto3.util.equals(LookupNPNByFEINResponse, a, b);
  }
}

/**
 * ResyncAgencyRequest is used to trigger a manual resynchronization of agency data.
 * This will re-fetch all data from the NIPR API for the agency and all associated producers.
 *
 * @generated from message producerflow.producer.v1.ResyncAgencyRequest
 */
export class ResyncAgencyRequest extends Message<ResyncAgencyRequest> {
  /**
   * The UUID of the agency to resynchronize.
   * Must be a valid UUID format.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  constructor(data?: PartialMessage<ResyncAgencyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ResyncAgencyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResyncAgencyRequest {
    return new ResyncAgencyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResyncAgencyRequest {
    return new ResyncAgencyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResyncAgencyRequest {
    return new ResyncAgencyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResyncAgencyRequest | PlainMessage<ResyncAgencyRequest> | undefined, b: ResyncAgencyRequest | PlainMessage<ResyncAgencyRequest> | undefined): boolean {
    return proto3.util.equals(ResyncAgencyRequest, a, b);
  }
}

/**
 * ResyncAgencyResponse is the empty response returned after successfully triggering a resynchronization.
 *
 * @generated from message producerflow.producer.v1.ResyncAgencyResponse
 */
export class ResyncAgencyResponse extends Message<ResyncAgencyResponse> {
  constructor(data?: PartialMessage<ResyncAgencyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ResyncAgencyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResyncAgencyResponse {
    return new ResyncAgencyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResyncAgencyResponse {
    return new ResyncAgencyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResyncAgencyResponse {
    return new ResyncAgencyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResyncAgencyResponse | PlainMessage<ResyncAgencyResponse> | undefined, b: ResyncAgencyResponse | PlainMessage<ResyncAgencyResponse> | undefined): boolean {
    return proto3.util.equals(ResyncAgencyResponse, a, b);
  }
}

/**
 * ResyncProducerRequest is used to trigger a manual resynchronization of producer data.
 *
 * @generated from message producerflow.producer.v1.ResyncProducerRequest
 */
export class ResyncProducerRequest extends Message<ResyncProducerRequest> {
  /**
   * The UUID of the producer to resynchronize.
   * Must be a valid UUID format.
   *
   * @generated from field: string producer_id = 1;
   */
  producerId = "";

  constructor(data?: PartialMessage<ResyncProducerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ResyncProducerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResyncProducerRequest {
    return new ResyncProducerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResyncProducerRequest {
    return new ResyncProducerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResyncProducerRequest {
    return new ResyncProducerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResyncProducerRequest | PlainMessage<ResyncProducerRequest> | undefined, b: ResyncProducerRequest | PlainMessage<ResyncProducerRequest> | undefined): boolean {
    return proto3.util.equals(ResyncProducerRequest, a, b);
  }
}

/**
 * ResyncProducerResponse is the empty response returned after successfully triggering a resynchronization.
 *
 * @generated from message producerflow.producer.v1.ResyncProducerResponse
 */
export class ResyncProducerResponse extends Message<ResyncProducerResponse> {
  constructor(data?: PartialMessage<ResyncProducerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.ResyncProducerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResyncProducerResponse {
    return new ResyncProducerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResyncProducerResponse {
    return new ResyncProducerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResyncProducerResponse {
    return new ResyncProducerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResyncProducerResponse | PlainMessage<ResyncProducerResponse> | undefined, b: ResyncProducerResponse | PlainMessage<ResyncProducerResponse> | undefined): boolean {
    return proto3.util.equals(ResyncProducerResponse, a, b);
  }
}

/**
 * SyncProducerWithNIPRRequest is used to synchronize a producer's data with the NIPR API.
 *
 * @generated from message producerflow.producer.v1.SyncProducerWithNIPRRequest
 */
export class SyncProducerWithNIPRRequest extends Message<SyncProducerWithNIPRRequest> {
  /**
   * The UUID of the producer to synchronize.
   * Must be a valid UUID format.
   *
   * @generated from field: string producer_id = 1;
   */
  producerId = "";

  constructor(data?: PartialMessage<SyncProducerWithNIPRRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.SyncProducerWithNIPRRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncProducerWithNIPRRequest {
    return new SyncProducerWithNIPRRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncProducerWithNIPRRequest {
    return new SyncProducerWithNIPRRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncProducerWithNIPRRequest {
    return new SyncProducerWithNIPRRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncProducerWithNIPRRequest | PlainMessage<SyncProducerWithNIPRRequest> | undefined, b: SyncProducerWithNIPRRequest | PlainMessage<SyncProducerWithNIPRRequest> | undefined): boolean {
    return proto3.util.equals(SyncProducerWithNIPRRequest, a, b);
  }
}

/**
 * SyncProducerWithNIPRResponse is the empty response returned after successfully synchronizing a producer's data with the NIPR API.
 *
 * @generated from message producerflow.producer.v1.SyncProducerWithNIPRResponse
 */
export class SyncProducerWithNIPRResponse extends Message<SyncProducerWithNIPRResponse> {
  constructor(data?: PartialMessage<SyncProducerWithNIPRResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.SyncProducerWithNIPRResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncProducerWithNIPRResponse {
    return new SyncProducerWithNIPRResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncProducerWithNIPRResponse {
    return new SyncProducerWithNIPRResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncProducerWithNIPRResponse {
    return new SyncProducerWithNIPRResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncProducerWithNIPRResponse | PlainMessage<SyncProducerWithNIPRResponse> | undefined, b: SyncProducerWithNIPRResponse | PlainMessage<SyncProducerWithNIPRResponse> | undefined): boolean {
    return proto3.util.equals(SyncProducerWithNIPRResponse, a, b);
  }
}

/**
 * SyncAgencyWithNIPRRequest is used to synchronize an agency's data with the NIPR API.
 *
 * @generated from message producerflow.producer.v1.SyncAgencyWithNIPRRequest
 */
export class SyncAgencyWithNIPRRequest extends Message<SyncAgencyWithNIPRRequest> {
  /**
   * The UUID of the agency to synchronize.
   * Must be a valid UUID format.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  /**
   * If true, all producers associated with the agency will be synchronized.
   * If false, only the agency will be synchronized.
   *
   * @generated from field: bool sync_all_producers = 2;
   */
  syncAllProducers = false;

  constructor(data?: PartialMessage<SyncAgencyWithNIPRRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.SyncAgencyWithNIPRRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sync_all_producers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncAgencyWithNIPRRequest {
    return new SyncAgencyWithNIPRRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncAgencyWithNIPRRequest {
    return new SyncAgencyWithNIPRRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncAgencyWithNIPRRequest {
    return new SyncAgencyWithNIPRRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncAgencyWithNIPRRequest | PlainMessage<SyncAgencyWithNIPRRequest> | undefined, b: SyncAgencyWithNIPRRequest | PlainMessage<SyncAgencyWithNIPRRequest> | undefined): boolean {
    return proto3.util.equals(SyncAgencyWithNIPRRequest, a, b);
  }
}

/**
 * SyncAgencyWithNIPRResponse is the empty response returned after successfully synchronizing an agency's data with the NIPR API.
 *
 * @generated from message producerflow.producer.v1.SyncAgencyWithNIPRResponse
 */
export class SyncAgencyWithNIPRResponse extends Message<SyncAgencyWithNIPRResponse> {
  constructor(data?: PartialMessage<SyncAgencyWithNIPRResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.SyncAgencyWithNIPRResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncAgencyWithNIPRResponse {
    return new SyncAgencyWithNIPRResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncAgencyWithNIPRResponse {
    return new SyncAgencyWithNIPRResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncAgencyWithNIPRResponse {
    return new SyncAgencyWithNIPRResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncAgencyWithNIPRResponse | PlainMessage<SyncAgencyWithNIPRResponse> | undefined, b: SyncAgencyWithNIPRResponse | PlainMessage<SyncAgencyWithNIPRResponse> | undefined): boolean {
    return proto3.util.equals(SyncAgencyWithNIPRResponse, a, b);
  }
}

/**
 * StopSyncProducerWithNIPRRequest is used to stop synchronizing a producer's data with the NIPR API.
 *
 * @generated from message producerflow.producer.v1.StopSyncProducerWithNIPRRequest
 */
export class StopSyncProducerWithNIPRRequest extends Message<StopSyncProducerWithNIPRRequest> {
  /**
   * The UUID of the producer to stop synchronizing.
   * Must be a valid UUID format.
   *
   * @generated from field: string producer_id = 1;
   */
  producerId = "";

  constructor(data?: PartialMessage<StopSyncProducerWithNIPRRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.StopSyncProducerWithNIPRRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "producer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopSyncProducerWithNIPRRequest {
    return new StopSyncProducerWithNIPRRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopSyncProducerWithNIPRRequest {
    return new StopSyncProducerWithNIPRRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopSyncProducerWithNIPRRequest {
    return new StopSyncProducerWithNIPRRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopSyncProducerWithNIPRRequest | PlainMessage<StopSyncProducerWithNIPRRequest> | undefined, b: StopSyncProducerWithNIPRRequest | PlainMessage<StopSyncProducerWithNIPRRequest> | undefined): boolean {
    return proto3.util.equals(StopSyncProducerWithNIPRRequest, a, b);
  }
}

/**
 * StopSyncProducerWithNIPRResponse is the empty response returned after successfully stopping the synchronization of a producer's data with the NIPR API.
 *
 * @generated from message producerflow.producer.v1.StopSyncProducerWithNIPRResponse
 */
export class StopSyncProducerWithNIPRResponse extends Message<StopSyncProducerWithNIPRResponse> {
  constructor(data?: PartialMessage<StopSyncProducerWithNIPRResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.StopSyncProducerWithNIPRResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopSyncProducerWithNIPRResponse {
    return new StopSyncProducerWithNIPRResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopSyncProducerWithNIPRResponse {
    return new StopSyncProducerWithNIPRResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopSyncProducerWithNIPRResponse {
    return new StopSyncProducerWithNIPRResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopSyncProducerWithNIPRResponse | PlainMessage<StopSyncProducerWithNIPRResponse> | undefined, b: StopSyncProducerWithNIPRResponse | PlainMessage<StopSyncProducerWithNIPRResponse> | undefined): boolean {
    return proto3.util.equals(StopSyncProducerWithNIPRResponse, a, b);
  }
}

/**
 * StopSyncAgencyWithNIPRRequest is used to stop synchronizing an agency's data with the NIPR API.
 *
 * @generated from message producerflow.producer.v1.StopSyncAgencyWithNIPRRequest
 */
export class StopSyncAgencyWithNIPRRequest extends Message<StopSyncAgencyWithNIPRRequest> {
  /**
   * The UUID of the agency to stop synchronizing.
   * Must be a valid UUID format.
   *
   * @generated from field: string agency_id = 1;
   */
  agencyId = "";

  /**
   * If true, all producers associated with the agency will be stopped from synchronizing.
   * If false, only the agency will be stopped from synchronizing.
   *
   * @generated from field: bool stop_all_producers = 2;
   */
  stopAllProducers = false;

  constructor(data?: PartialMessage<StopSyncAgencyWithNIPRRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.StopSyncAgencyWithNIPRRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agency_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stop_all_producers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopSyncAgencyWithNIPRRequest {
    return new StopSyncAgencyWithNIPRRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopSyncAgencyWithNIPRRequest {
    return new StopSyncAgencyWithNIPRRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopSyncAgencyWithNIPRRequest {
    return new StopSyncAgencyWithNIPRRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopSyncAgencyWithNIPRRequest | PlainMessage<StopSyncAgencyWithNIPRRequest> | undefined, b: StopSyncAgencyWithNIPRRequest | PlainMessage<StopSyncAgencyWithNIPRRequest> | undefined): boolean {
    return proto3.util.equals(StopSyncAgencyWithNIPRRequest, a, b);
  }
}

/**
 * StopSyncAgencyWithNIPRResponse is the empty response returned after successfully stopping the synchronization of an agency's data with the NIPR API.
 *
 * @generated from message producerflow.producer.v1.StopSyncAgencyWithNIPRResponse
 */
export class StopSyncAgencyWithNIPRResponse extends Message<StopSyncAgencyWithNIPRResponse> {
  constructor(data?: PartialMessage<StopSyncAgencyWithNIPRResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "producerflow.producer.v1.StopSyncAgencyWithNIPRResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopSyncAgencyWithNIPRResponse {
    return new StopSyncAgencyWithNIPRResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopSyncAgencyWithNIPRResponse {
    return new StopSyncAgencyWithNIPRResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopSyncAgencyWithNIPRResponse {
    return new StopSyncAgencyWithNIPRResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopSyncAgencyWithNIPRResponse | PlainMessage<StopSyncAgencyWithNIPRResponse> | undefined, b: StopSyncAgencyWithNIPRResponse | PlainMessage<StopSyncAgencyWithNIPRResponse> | undefined): boolean {
    return proto3.util.equals(StopSyncAgencyWithNIPRResponse, a, b);
  }
}

