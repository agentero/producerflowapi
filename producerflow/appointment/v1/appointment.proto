syntax = "proto3";

package producerflow.appointment.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

// AppointmentService manages license appointments through NIPR.
//
// The appointment flow in NIPR is as follows:
// 1. A new appointment (or termination) is requested for a license number.
// 2. Some time later, NIPR processes the request and returns the final result.
//
// Since NIPR does not return results immediately, RequestAppointment and TerminateAppointment
// RPCs will return a processing status of IN_PROGRESS if the request is accepted by NIPR.
// When the appointment is finally processed by NIPR, ProducerFlow will notify via a webhook of
// the final result. Also, any call from this point on to ListAppointments or GetAppointment will
// also return the final result.
//
// Any call to this service must be authenticated using an API key in the request headers. The API key
// can be found in the ProducerFlow API key section of the ProducerFlow UI and it identifies the tenant
// that is making the request.
service AppointmentService {
  // Retrieves the details of an appointment by its ID.
  rpc GetAppointment(GetAppointmentRequest) returns (GetAppointmentResponse);

  // Retrieves the total fees associated with requesting an appointment for the given license.
  // Fee amounts are represented as integer values in cents. E.g. $10.34 is sent as 1034.
  rpc GetAppointmentFees(GetAppointmentFeesRequest) returns (GetAppointmentFeesResponse);

  // Retrieves the carriers that are available to appoint licenses for the tenant.
  rpc GetAppointableCarriers(GetAppointableCarriersRequest) returns (GetAppointableCarriersResponse);

  // Retrieves the total fees associated with terminating an appointment for the given license.
  // Fee amounts are represented as integer values in cents. E.g. $10.34 is sent as 1034.
  rpc GetTerminationFees(GetTerminationFeesRequest) returns (GetTerminationFeesResponse);

  // Lists appointments for the tenant, optionally filtered by processing status.
  rpc ListAppointments(ListAppointmentsRequest) returns (ListAppointmentsResponse);

  // Returns a list of licenses that are eligible to be appointed.
  rpc ListEligibleLicenses(ListEligibleLicensesRequest) returns (ListEligibleLicensesResponse);

  // Requests a new appointment for a license that is eligible to be appointed. The simpler way
  // to do this is to call ListEligibleLicenses to get a list of licenses that are eligible to be
  // appointed. Then, call RequestAppointment for the licenses in the list that you want to appoint.
  //
  // If the request is accepted by NIPR, the appointment will have IN_PROGRESS processing status.
  // If rejected, it will have REJECTED status and reasons will be provided in not_eligible_reasons.
  rpc RequestAppointment(RequestAppointmentRequest) returns (RequestAppointmentResponse);

  // Terminates an existing appointment, permanently ending the relationship between
  // the license holder and the carrier.
  //
  // Before calling this method, you must:
  // 1. Ensure the appointment exists and is in APPOINTED status
  // 2. Call ListTerminationReasons to get valid termination reasons for the license's state
  // 3. Select an appropriate termination reason from the state-specific list
  //
  // The termination process works as follows:
  // - The request is submitted to NIPR for processing
  // - Once NIPR completes processing, the status becomes TERMINATED
  // - If rejected by NIPR, the appointment remains in its current status
  //
  // Important considerations:
  // - Termination is permanent and cannot be undone
  // - Termination reasons must be valid for the specific state where the license is issued
  // - Some terminations may incur fees (check GetTerminationFees first)
  // - You will receive webhook notifications when the termination is processed by NIPR
  //
  // The response indicates whether the termination request was successfully submitted,
  // not whether the actual termination was completed (since NIPR processes asynchronously).
  rpc TerminateAppointment(TerminateAppointmentRequest) returns (TerminateAppointmentResponse);

  // Lists the valid termination reasons for appointments in a specific state.
  //
  // When terminating an appointment, you must provide a valid termination reason that is
  // accepted by NIPR for the state where the license is issued. Termination reasons vary
  // by state, so you should call this method first to retrieve the list of valid reasons
  // before calling TerminateAppointment.
  //
  // The termination reasons returned are based on NIPR's valid termination codes for the
  // specified state. Each reason corresponds to a specific business scenario for why an
  // appointment might be terminated (e.g., voluntary termination, inadequate production,
  // company merger, etc.).
  rpc ListTerminationReasons(ListTerminationReasonsRequest) returns (ListTerminationReasonsResponse);
}

// Request to create a new appointment.
message RequestAppointmentRequest {
  // Required. The ID of the license to appoint.
  string license_id = 1 [(buf.validate.field).string.min_len = 1];

  // Required. The ID of the carrier to appoint the license with.
  string carrier_id = 2 [(buf.validate.field).string.min_len = 1];
}

message RequestAppointmentResponse {
  // The ID of the created appointment.
  string appointment_id = 1;
  // Processing status of the appointment request.
  ProcessingStatus processing_status = 2;
  // If the appointment was rejected or ineligible, these reasons explain why.
  repeated string not_eligible_reasons = 3;
}

// Request to retrieve an appointment by ID.
message GetAppointmentRequest {
  // Required. The ID of the appointment to retrieve.
  string appointment_id = 1 [(buf.validate.field).string.min_len = 1];
}

message GetAppointmentResponse {
  // The appointment details.
  Appointment appointment = 1;
}

// Request to list appointments, optionally filtered by processing status.
message ListAppointmentsRequest {
  // Optional. Filter results by processing status.
  repeated ProcessingStatus processing_status = 1;
  // Optional. Filter results by license owner.
  oneof license_owner {
    string producer_id = 2 [(buf.validate.field).string.uuid = true];
    string agency_id = 3 [(buf.validate.field).string.uuid = true];
    option (buf.validate.oneof).required = true;
  }
}

message ListAppointmentsResponse {
  // List of appointments.
  repeated Appointment appointments = 1;
  // Token for fetching the next page of results.
  string next_page_token = 2;
}

// Request to terminate an appointment.
message TerminateAppointmentRequest {
  // ID of the appointment to terminate.
  string appointment_id = 1 [(buf.validate.field).string.uuid = true];
  // Reason for termination. This must be a valid termination reason
  // for the state where the license is issued. Call ListTerminationReasons
  // first to get the list of valid reasons for the specific state.
  TerminationReason reason = 2 [(buf.validate.field).enum.defined_only = true];
}

message TerminateAppointmentResponse {
  // Indicates whether the termination request was successfully submitted to NIPR.
  // This does not indicate that the appointment has been terminated, only that
  // the request has been accepted for processing. The actual termination will
  // be processed asynchronously by NIPR, and you will be notified via webhook
  // when the process completes.
  bool success = 1;
}

// Request to retrieve a list of licenses that are eligible to be appointed.
message ListEligibleLicensesRequest {
  // The applicant is the producer or agency with licenses eligible to be appointed.
  oneof applicant {
    string producer_id = 1 [(buf.validate.field).string.uuid = true];
    string agency_id = 2 [(buf.validate.field).string.uuid = true];
    option (buf.validate.oneof).required = true;
  }
}

message ListEligibleLicensesResponse {
  // List of licenses that are eligible to be appointed.
  repeated License licenses = 1;
}

// Request to get appointment fees.
message GetAppointmentFeesRequest {
  // Required. The ID of the license to get the appointment fee for.
  string license_id = 1 [(buf.validate.field).string.min_len = 1];
}

message GetAppointmentFeesResponse {
  // Total fee for the appointment in cents.
  int64 fee_in_cents = 1;
}

// Request to get termination fees.
message GetTerminationFeesRequest {
  // Required. The ID of the license to get the termination fee for.
  string license_id = 1 [(buf.validate.field).string.min_len = 1];
}

message GetTerminationFeesResponse {
  // Total fee for the termination in cents.
  int64 fee_in_cents = 1;
}

message GetAppointableCarriersRequest {}

message GetAppointableCarriersResponse {
  // The list of carriers that are available to be appointed.
  repeated Carrier carriers = 1;
}

// Represents a carrier that is available to be appointed.
message Carrier {
  // The ID of the carrier.
  string carrier_id = 1;

  // The name of the carrier.
  string name = 2;

  // The NPN of the carrier.
  string npn = 3;

  // The state of the carrier.
  string fein = 4;
}

// Represents an appointment for a license.
message Appointment {
  // Unique identifier for the appointment.
  string appointment_id = 1;

  // Information about the license being appointed.
  License license = 2;

  // The license number of the license being appointed.
  string name = 3;

  // The id of the agency that is appointed.
  string agency_id = 4;

  // The id of the producer that is appointed, if any.
  optional string producer_id = 5;

  // The name of the carrier to which the license is appointed.
  string carrier = 6;

  // Type of appointment (e.g., up-front, registry).
  AppointmentType appointment_type = 7;

  // Processing status of the appointment (e.g., in progress, appointed).
  ProcessingStatus processing_status = 8;

  // Optional comments or notes related to the appointment.
  string comments = 9;

  // Timestamp of the last update to the appointment.
  google.protobuf.Timestamp effective_date = 10;

  // Timestamp of the termination of the appointment.
  optional google.protobuf.Timestamp termination_date = 11;

  // Timestamp of the last update to the appointment.
  google.protobuf.Timestamp updated_at = 12;
}

// Processing status of the appointment.
enum ProcessingStatus {
  PROCESSING_STATUS_UNSPECIFIED = 0;
  PROCESSING_STATUS_IN_PROGRESS = 1;
  PROCESSING_STATUS_APPOINTED = 2;
  PROCESSING_STATUS_TERMINATED = 3;
  PROCESSING_STATUS_REJECTED = 4;
  PROCESSING_STATUS_MISSING_LICENSE = 5;
  PROCESSING_STATUS_TERMINATION_REQUESTED = 6;
}

// Type of appointment.
enum AppointmentType {
  APPOINTMENT_TYPE_UNSPECIFIED = 0;
  APPOINTMENT_TYPE_REGISTRY = 1;
  APPOINTMENT_TYPE_UP_FRONT = 2;
  APPOINTMENT_TYPE_JUST_IN_TIME = 3;
}

message License {
  // The ID of the license.
  string license_id = 1;

  // The license number.
  string license_number = 2;

  // The owner of the license, it can be an agency or a producer.
  oneof license_owner {
    string producer_id = 3 [(buf.validate.field).string.uuid = true];
    string agency_id = 4 [(buf.validate.field).string.uuid = true];
  }

  // The two-letter state code of the license.
  string state = 5;

  // The license class.
  string license_class = 6;
}

message ListTerminationReasonsRequest {
  // Required. The two-letter state code of the license for which you want to retrieve
  // valid termination reasons. Different states may have different sets of valid
  // termination reasons accepted by NIPR.
  string state = 1 [(buf.validate.field).string.len = 2];
}

message ListTerminationReasonsResponse {
  // The list of valid termination reasons for the specified state.
  // These reasons can be used when calling TerminateAppointment for licenses
  // issued in this state.
  repeated TerminationReason termination_reasons = 1;
}

// TerminationReason represents the reason for the termination of an appointment.
// These reasons correspond to NIPR's valid termination codes and vary by state.
// Use ListTerminationReasons to get the valid reasons for a specific state
// before terminating an appointment.
//
// Reference: https://pdb.nipr.com/Gateway/ValidTerms
enum TerminationReason {
  TERMINATION_REASON_UNSPECIFIED = 0;
  TERMINATION_REASON_VOLUNTARY_TERMINATION = 1;
  TERMINATION_REASON_INADEQUATE_PRODUCTION = 2;
  TERMINATION_REASON_CANCELLED_BY_GENERAL_AGENT = 3;
  TERMINATION_REASON_DEATH = 4;
  TERMINATION_REASON_COMPANY_DEFUNCT_OR_LIQUIDATION = 5;
  TERMINATION_REASON_COMPANY_INDEBTEDNESS = 6;
  TERMINATION_REASON_POOR_POLICYHOLDER_SERVICE = 7;
  TERMINATION_REASON_AGENT_MOVED = 8;
  TERMINATION_REASON_APPOINTED_IN_ERROR = 9;
  TERMINATION_REASON_CANCELLED = 10;
  TERMINATION_REASON_CANCELLED_FOR_CAUSE = 11;
  TERMINATION_REASON_COMPANY_MERGER = 12;
  TERMINATION_REASON_REVOKED = 13;
  TERMINATION_REASON_SUSPENDED_FOR_COMPLIANCE = 14;
  TERMINATION_REASON_REQUEST_REGULATORY_REVIEW = 15;
}
